//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Thu Feb 23 12:05:55 2017
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Wed Apr 19 21:19:50 2017
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 5
`define MEMORY_CONTROLLER_TAG_SIZE 9
// @a_input = internal unnamed_addr constant [46 x i64] [i64 9221120237041090560, i64 9218868437227405312, i64 4611686018427387904, i64 4611686018427387904, i64 4607182418800017408, i64 46071824188000174...
`define TAG_g_a_input `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_a_input_a {`TAG_g_a_input, 23'd0}
// @b_input = internal unnamed_addr constant [46 x i64] [i64 4607182418800017408, i64 4607182418800017408, i64 0, i64 4609434218613702656, i64 9221120237041090560, i64 9218868437227405312, i64 4611686018...
`define TAG_g_b_input `MEMORY_CONTROLLER_TAG_SIZE'd4
`define TAG_g_b_input_a {`TAG_g_b_input, 23'd0}
// @countLeadingZeros32.countLeadingZerosHigh = internal unnamed_addr constant [256 x i32] [i32 8, i32 7, i32 6, i32 6, i32 5, i32 5, i32 5, i32 5, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4,...
`define TAG_g_countLeadingZeros32countLeadingZerosHigh `MEMORY_CONTROLLER_TAG_SIZE'd6
`define TAG_g_countLeadingZeros32countLeadingZerosHigh_a {`TAG_g_countLeadingZeros32countLeadingZerosHigh, 23'd0}
// @float_exception_flags = internal unnamed_addr global i32 0, align 4
`define TAG_g_float_exception_flags `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_float_exception_flags_a {`TAG_g_float_exception_flags, 23'd0}
// @z_output = internal unnamed_addr constant [46 x i64] [i64 9221120237041090560, i64 9218868437227405312, i64 4611686018427387904, i64 4615063718147915776, i64 9221120237041090560, i64 9218868437227405...
`define TAG_g_z_output `MEMORY_CONTROLLER_TAG_SIZE'd5
`define TAG_g_z_output_a {`TAG_g_z_output, 23'd0}

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

`timescale 1 ns / 1 ns
module dfadd
	(
		clk,
		reset,
		start,
		finish,
		waitrequest,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
input waitrequest;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

/* synthesis translate_off */
assign memory_controller_waitrequest = waitrequest;
/* synthesis translate_on */

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_waitrequest(memory_controller_waitrequest),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b)
);

endmodule

`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);

parameter latency = 2;

parameter ram_latency = latency-1;

integer j;

input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;

reg [0:0] float_exception_flags_address_a;
reg [0:0] float_exception_flags_address_b;
reg float_exception_flags_write_enable_a;
reg float_exception_flags_write_enable_b;
reg [31:0] float_exception_flags_in_a;
reg [31:0] float_exception_flags_in_b;
wire [31:0] float_exception_flags_out_a;
wire [31:0] float_exception_flags_out_b;

// @float_exception_flags = internal unnamed_addr global i32 0, align 4
ram_dual_port float_exception_flags (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( float_exception_flags_address_a ),
	.address_b( float_exception_flags_address_b ),
	.wren_a( float_exception_flags_write_enable_a ),
	.wren_b( float_exception_flags_write_enable_b ),
	.data_a( float_exception_flags_in_a ),
	.data_b( float_exception_flags_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( float_exception_flags_out_a ),
	.q_b( float_exception_flags_out_b)
);
defparam float_exception_flags.width_a = 32;
defparam float_exception_flags.width_b = 32;
defparam float_exception_flags.widthad_a = 1;
defparam float_exception_flags.widthad_b = 1;
defparam float_exception_flags.width_be_a = 1;
defparam float_exception_flags.width_be_b = 1;
defparam float_exception_flags.numwords_a = 1;
defparam float_exception_flags.numwords_b = 1;
defparam float_exception_flags.latency = ram_latency;
defparam float_exception_flags.init_file = "float_exception_flags.mif";

reg [5:0] a_input_address_a;
reg [5:0] a_input_address_b;
reg a_input_write_enable_a;
reg a_input_write_enable_b;
reg [63:0] a_input_in_a;
reg [63:0] a_input_in_b;
wire [63:0] a_input_out_a;
wire [63:0] a_input_out_b;

// @a_input = internal unnamed_addr constant [46 x i64] [i64 9221120237041090560, i64 9218868437227405312, i64 4611686018427387904, i64 4611686018427387904, i64 4607182418800017408, i64 46071824188000174...
rom_dual_port a_input (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( a_input_address_a ),
	.address_b( a_input_address_b ),
	.q_a( a_input_out_a ),
	.q_b( a_input_out_b)
);
defparam a_input.width_a = 64;
defparam a_input.width_b = 64;
defparam a_input.widthad_a = 6;
defparam a_input.widthad_b = 6;
defparam a_input.numwords_a = 46;
defparam a_input.numwords_b = 46;
defparam a_input.latency = ram_latency;
defparam a_input.init_file = "a_input.mif";

reg [5:0] b_input_address_a;
reg [5:0] b_input_address_b;
reg b_input_write_enable_a;
reg b_input_write_enable_b;
reg [63:0] b_input_in_a;
reg [63:0] b_input_in_b;
wire [63:0] b_input_out_a;
wire [63:0] b_input_out_b;

// @b_input = internal unnamed_addr constant [46 x i64] [i64 4607182418800017408, i64 4607182418800017408, i64 0, i64 4609434218613702656, i64 9221120237041090560, i64 9218868437227405312, i64 4611686018...
rom_dual_port b_input (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( b_input_address_a ),
	.address_b( b_input_address_b ),
	.q_a( b_input_out_a ),
	.q_b( b_input_out_b)
);
defparam b_input.width_a = 64;
defparam b_input.width_b = 64;
defparam b_input.widthad_a = 6;
defparam b_input.widthad_b = 6;
defparam b_input.numwords_a = 46;
defparam b_input.numwords_b = 46;
defparam b_input.latency = ram_latency;
defparam b_input.init_file = "b_input.mif";

reg [5:0] z_output_address_a;
reg [5:0] z_output_address_b;
reg z_output_write_enable_a;
reg z_output_write_enable_b;
reg [63:0] z_output_in_a;
reg [63:0] z_output_in_b;
wire [63:0] z_output_out_a;
wire [63:0] z_output_out_b;

// @z_output = internal unnamed_addr constant [46 x i64] [i64 9221120237041090560, i64 9218868437227405312, i64 4611686018427387904, i64 4615063718147915776, i64 9221120237041090560, i64 9218868437227405...
rom_dual_port z_output (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( z_output_address_a ),
	.address_b( z_output_address_b ),
	.q_a( z_output_out_a ),
	.q_b( z_output_out_b)
);
defparam z_output.width_a = 64;
defparam z_output.width_b = 64;
defparam z_output.widthad_a = 6;
defparam z_output.widthad_b = 6;
defparam z_output.numwords_a = 46;
defparam z_output.numwords_b = 46;
defparam z_output.latency = ram_latency;
defparam z_output.init_file = "z_output.mif";

reg [7:0] countLeadingZeros32countLeadingZerosHigh_address_a;
reg [7:0] countLeadingZeros32countLeadingZerosHigh_address_b;
reg countLeadingZeros32countLeadingZerosHigh_write_enable_a;
reg countLeadingZeros32countLeadingZerosHigh_write_enable_b;
reg [31:0] countLeadingZeros32countLeadingZerosHigh_in_a;
reg [31:0] countLeadingZeros32countLeadingZerosHigh_in_b;
wire [31:0] countLeadingZeros32countLeadingZerosHigh_out_a;
wire [31:0] countLeadingZeros32countLeadingZerosHigh_out_b;

// @countLeadingZeros32.countLeadingZerosHigh = internal unnamed_addr constant [256 x i32] [i32 8, i32 7, i32 6, i32 6, i32 5, i32 5, i32 5, i32 5, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4,...
rom_dual_port countLeadingZeros32countLeadingZerosHigh (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( countLeadingZeros32countLeadingZerosHigh_address_a ),
	.address_b( countLeadingZeros32countLeadingZerosHigh_address_b ),
	.q_a( countLeadingZeros32countLeadingZerosHigh_out_a ),
	.q_b( countLeadingZeros32countLeadingZerosHigh_out_b)
);
defparam countLeadingZeros32countLeadingZerosHigh.width_a = 32;
defparam countLeadingZeros32countLeadingZerosHigh.width_b = 32;
defparam countLeadingZeros32countLeadingZerosHigh.widthad_a = 8;
defparam countLeadingZeros32countLeadingZerosHigh.widthad_b = 8;
defparam countLeadingZeros32countLeadingZerosHigh.numwords_a = 256;
defparam countLeadingZeros32countLeadingZerosHigh.numwords_b = 256;
defparam countLeadingZeros32countLeadingZerosHigh.latency = ram_latency;
defparam countLeadingZeros32countLeadingZerosHigh.init_file = "countLeadingZeros32countLeadingZerosHigh.mif";
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_a;
assign tag_a = memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
reg [2:0] prevAddr_a;
reg [1:0] prevSize_a;
reg [2:0] prevSize_a_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_a <= memory_controller_address_a[2:0];
	prevSize_a <= memory_controller_size_a;
end
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_b;
assign tag_b = memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
reg [2:0] prevAddr_b;
reg [1:0] prevSize_b;
reg [2:0] prevSize_b_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_b <= memory_controller_address_b[2:0];
	prevSize_b <= memory_controller_size_b;
end

reg [2:0] select_not_struct_a;

wire select_float_exception_flags_a;
assign select_float_exception_flags_a = (tag_a == `TAG_g_float_exception_flags);
reg [ram_latency:0] select_float_exception_flags_reg_a;
wire [31:0] memory_controller_float_exception_flags_out_a;
assign memory_controller_float_exception_flags_out_a = {32{ select_float_exception_flags_reg_a[ram_latency]}} & float_exception_flags_out_a;

wire select_a_input_a;
assign select_a_input_a = (tag_a == `TAG_g_a_input);
reg [ram_latency:0] select_a_input_reg_a;
wire [63:0] memory_controller_a_input_out_a;
assign memory_controller_a_input_out_a = {64{ select_a_input_reg_a[ram_latency]}} & a_input_out_a;

wire select_b_input_a;
assign select_b_input_a = (tag_a == `TAG_g_b_input);
reg [ram_latency:0] select_b_input_reg_a;
wire [63:0] memory_controller_b_input_out_a;
assign memory_controller_b_input_out_a = {64{ select_b_input_reg_a[ram_latency]}} & b_input_out_a;

wire select_z_output_a;
assign select_z_output_a = (tag_a == `TAG_g_z_output);
reg [ram_latency:0] select_z_output_reg_a;
wire [63:0] memory_controller_z_output_out_a;
assign memory_controller_z_output_out_a = {64{ select_z_output_reg_a[ram_latency]}} & z_output_out_a;

wire select_countLeadingZeros32countLeadingZerosHigh_a;
assign select_countLeadingZeros32countLeadingZerosHigh_a = (tag_a == `TAG_g_countLeadingZeros32countLeadingZerosHigh);
reg [ram_latency:0] select_countLeadingZeros32countLeadingZerosHigh_reg_a;
wire [31:0] memory_controller_countLeadingZeros32countLeadingZerosHigh_out_a;
assign memory_controller_countLeadingZeros32countLeadingZerosHigh_out_a = {32{ select_countLeadingZeros32countLeadingZerosHigh_reg_a[ram_latency]}} & countLeadingZeros32countLeadingZerosHigh_out_a;

always @(*)
begin
	float_exception_flags_address_a = memory_controller_address_a [1-1+2:2] & {1{select_float_exception_flags_a}};
	float_exception_flags_write_enable_a = memory_controller_write_enable_a & select_float_exception_flags_a;
	float_exception_flags_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	a_input_address_a = memory_controller_address_a [6-1+3:3] & {6{select_a_input_a}};
	a_input_write_enable_a = memory_controller_write_enable_a & select_a_input_a;
	a_input_in_a [64-1:0] = memory_controller_in_a[64-1:0];

	b_input_address_a = memory_controller_address_a [6-1+3:3] & {6{select_b_input_a}};
	b_input_write_enable_a = memory_controller_write_enable_a & select_b_input_a;
	b_input_in_a [64-1:0] = memory_controller_in_a[64-1:0];

	z_output_address_a = memory_controller_address_a [6-1+3:3] & {6{select_z_output_a}};
	z_output_write_enable_a = memory_controller_write_enable_a & select_z_output_a;
	z_output_in_a [64-1:0] = memory_controller_in_a[64-1:0];

	countLeadingZeros32countLeadingZerosHigh_address_a = memory_controller_address_a [8-1+2:2] & {8{select_countLeadingZeros32countLeadingZerosHigh_a}};
	countLeadingZeros32countLeadingZerosHigh_write_enable_a = memory_controller_write_enable_a & select_countLeadingZeros32countLeadingZerosHigh_a;
	countLeadingZeros32countLeadingZerosHigh_in_a [32-1:0] = memory_controller_in_a[32-1:0];

end
always @(*)
begin
	select_not_struct_a [2:0] = 3'b0 | {2{select_float_exception_flags_reg_a[ram_latency]}} | {3{select_a_input_reg_a[ram_latency]}} | {3{select_b_input_reg_a[ram_latency]}} | {3{select_z_output_reg_a[ram_latency]}} | {2{select_countLeadingZeros32countLeadingZerosHigh_reg_a[ram_latency]}};
	if (prevAddr_a[2:0] & select_not_struct_a[2:0] != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_a_and[0] = prevSize_a[1] | prevSize_a[0];
	prevSize_a_and[1] = prevSize_a[1];
	prevSize_a_and[2] = prevSize_a[1] & prevSize_a[0];
	if ((prevAddr_a & prevSize_a_and) != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_a = memory_controller_out_reg_a & { 64{!memory_controller_enable_reg_a}};
	memory_controller_out_a = 1'b0 | memory_controller_out_prev_a | memory_controller_float_exception_flags_out_a | memory_controller_a_input_out_a | memory_controller_b_input_out_a | memory_controller_z_output_out_a | memory_controller_countLeadingZeros32countLeadingZerosHigh_out_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_a <= memory_controller_out_a;
memory_controller_enable_reg_a <= memory_controller_enable_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_float_exception_flags_reg_a[j+1] <= select_float_exception_flags_reg_a[j];
select_a_input_reg_a[j+1] <= select_a_input_reg_a[j];
select_b_input_reg_a[j+1] <= select_b_input_reg_a[j];
select_z_output_reg_a[j+1] <= select_z_output_reg_a[j];
select_countLeadingZeros32countLeadingZerosHigh_reg_a[j+1] <= select_countLeadingZeros32countLeadingZerosHigh_reg_a[j];
end
always @(*)
begin
select_float_exception_flags_reg_a[0] <= select_float_exception_flags_a;
select_a_input_reg_a[0] <= select_a_input_a;
select_b_input_reg_a[0] <= select_b_input_a;
select_z_output_reg_a[0] <= select_z_output_a;
select_countLeadingZeros32countLeadingZerosHigh_reg_a[0] <= select_countLeadingZeros32countLeadingZerosHigh_a;
end

reg [2:0] select_not_struct_b;

wire select_float_exception_flags_b;
assign select_float_exception_flags_b = (tag_b == `TAG_g_float_exception_flags);
reg [ram_latency:0] select_float_exception_flags_reg_b;
wire [31:0] memory_controller_float_exception_flags_out_b;
assign memory_controller_float_exception_flags_out_b = {32{ select_float_exception_flags_reg_b[ram_latency]}} & float_exception_flags_out_b;

wire select_a_input_b;
assign select_a_input_b = (tag_b == `TAG_g_a_input);
reg [ram_latency:0] select_a_input_reg_b;
wire [63:0] memory_controller_a_input_out_b;
assign memory_controller_a_input_out_b = {64{ select_a_input_reg_b[ram_latency]}} & a_input_out_b;

wire select_b_input_b;
assign select_b_input_b = (tag_b == `TAG_g_b_input);
reg [ram_latency:0] select_b_input_reg_b;
wire [63:0] memory_controller_b_input_out_b;
assign memory_controller_b_input_out_b = {64{ select_b_input_reg_b[ram_latency]}} & b_input_out_b;

wire select_z_output_b;
assign select_z_output_b = (tag_b == `TAG_g_z_output);
reg [ram_latency:0] select_z_output_reg_b;
wire [63:0] memory_controller_z_output_out_b;
assign memory_controller_z_output_out_b = {64{ select_z_output_reg_b[ram_latency]}} & z_output_out_b;

wire select_countLeadingZeros32countLeadingZerosHigh_b;
assign select_countLeadingZeros32countLeadingZerosHigh_b = (tag_b == `TAG_g_countLeadingZeros32countLeadingZerosHigh);
reg [ram_latency:0] select_countLeadingZeros32countLeadingZerosHigh_reg_b;
wire [31:0] memory_controller_countLeadingZeros32countLeadingZerosHigh_out_b;
assign memory_controller_countLeadingZeros32countLeadingZerosHigh_out_b = {32{ select_countLeadingZeros32countLeadingZerosHigh_reg_b[ram_latency]}} & countLeadingZeros32countLeadingZerosHigh_out_b;

always @(*)
begin
	float_exception_flags_address_b = memory_controller_address_b [1-1+2:2] & {1{select_float_exception_flags_b}};
	float_exception_flags_write_enable_b = memory_controller_write_enable_b & select_float_exception_flags_b;
	float_exception_flags_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	a_input_address_b = memory_controller_address_b [6-1+3:3] & {6{select_a_input_b}};
	a_input_write_enable_b = memory_controller_write_enable_b & select_a_input_b;
	a_input_in_b [64-1:0] = memory_controller_in_b[64-1:0];

	b_input_address_b = memory_controller_address_b [6-1+3:3] & {6{select_b_input_b}};
	b_input_write_enable_b = memory_controller_write_enable_b & select_b_input_b;
	b_input_in_b [64-1:0] = memory_controller_in_b[64-1:0];

	z_output_address_b = memory_controller_address_b [6-1+3:3] & {6{select_z_output_b}};
	z_output_write_enable_b = memory_controller_write_enable_b & select_z_output_b;
	z_output_in_b [64-1:0] = memory_controller_in_b[64-1:0];

	countLeadingZeros32countLeadingZerosHigh_address_b = memory_controller_address_b [8-1+2:2] & {8{select_countLeadingZeros32countLeadingZerosHigh_b}};
	countLeadingZeros32countLeadingZerosHigh_write_enable_b = memory_controller_write_enable_b & select_countLeadingZeros32countLeadingZerosHigh_b;
	countLeadingZeros32countLeadingZerosHigh_in_b [32-1:0] = memory_controller_in_b[32-1:0];

end
always @(*)
begin
	select_not_struct_b [2:0] = 3'b0 | {2{select_float_exception_flags_reg_b[ram_latency]}} | {3{select_a_input_reg_b[ram_latency]}} | {3{select_b_input_reg_b[ram_latency]}} | {3{select_z_output_reg_b[ram_latency]}} | {2{select_countLeadingZeros32countLeadingZerosHigh_reg_b[ram_latency]}};
	if (prevAddr_b[2:0] & select_not_struct_b[2:0] != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_b_and[0] = prevSize_b[1] | prevSize_b[0];
	prevSize_b_and[1] = prevSize_b[1];
	prevSize_b_and[2] = prevSize_b[1] & prevSize_b[0];
	if ((prevAddr_b & prevSize_b_and) != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_b = memory_controller_out_reg_b & { 64{!memory_controller_enable_reg_b}};
	memory_controller_out_b = 1'b0 | memory_controller_out_prev_b | memory_controller_float_exception_flags_out_b | memory_controller_a_input_out_b | memory_controller_b_input_out_b | memory_controller_z_output_out_b | memory_controller_countLeadingZeros32countLeadingZerosHigh_out_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_b <= memory_controller_out_b;
memory_controller_enable_reg_b <= memory_controller_enable_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_float_exception_flags_reg_b[j+1] <= select_float_exception_flags_reg_b[j];
select_a_input_reg_b[j+1] <= select_a_input_reg_b[j];
select_b_input_reg_b[j+1] <= select_b_input_reg_b[j];
select_z_output_reg_b[j+1] <= select_z_output_reg_b[j];
select_countLeadingZeros32countLeadingZerosHigh_reg_b[j+1] <= select_countLeadingZeros32countLeadingZerosHigh_reg_b[j];
end
always @(*)
begin
select_float_exception_flags_reg_b[0] <= select_float_exception_flags_b;
select_a_input_reg_b[0] <= select_a_input_b;
select_b_input_reg_b[0] <= select_b_input_b;
select_z_output_reg_b[0] <= select_z_output_b;
select_countLeadingZeros32countLeadingZerosHigh_reg_b[0] <= select_countLeadingZeros32countLeadingZerosHigh_b;
end

endmodule 

`timescale 1 ns / 1 ns
module roundAndPackFloat64
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val,
	arg_zSign,
	arg_zExp,
	arg_zSig
);

parameter [4:0] LEGUP_0 = 5'd0;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__0_1 = 5'd1;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__4_2 = 5'd2;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__6_3 = 5'd3;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__8_4 = 5'd4;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__11_5 = 5'd5;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__11_6 = 5'd6;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__11_7 = 5'd7;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__11_8 = 5'd8;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__17_9 = 5'd9;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__19_10 = 5'd10;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__21_11 = 5'd11;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__31_12 = 5'd12;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB_shift64RightJammingexit_13 = 5'd13;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__36_14 = 5'd14;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__36_15 = 5'd15;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__36_16 = 5'd16;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__36_17 = 5'd17;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB_thread_18 = 5'd18;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__40_19 = 5'd19;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__40_20 = 5'd20;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__40_21 = 5'd21;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__40_22 = 5'd22;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB_thread6_23 = 5'd23;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB_thread6_24 = 5'd24;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__57_25 = 5'd25;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [63:0] return_val;
input [31:0] arg_zSign;
input [31:0] arg_zExp;
input [63:0] arg_zSig;
reg [4:0] cur_state;
reg [4:0] next_state;
reg [31:0] roundAndPackFloat64_0_tr;
reg [31:0] roundAndPackFloat64_0_1;
reg [31:0] roundAndPackFloat64_0_1_reg;
reg [31:0] roundAndPackFloat64_0_2;
reg  roundAndPackFloat64_0_3;
reg  roundAndPackFloat64_4_5;
reg  roundAndPackFloat64_6_7;
reg [63:0] roundAndPackFloat64_8_9;
reg  roundAndPackFloat64_8_10;
reg [31:0] roundAndPackFloat64_11_12;
reg [31:0] roundAndPackFloat64_11_13;
reg [63:0] roundAndPackFloat64_11_14;
reg [63:0] roundAndPackFloat64_11_15;
reg [63:0] roundAndPackFloat64_11_16;
reg [63:0] roundAndPackFloat64_11_16_reg;
reg  roundAndPackFloat64_17_18;
reg  roundAndPackFloat64_19_20;
reg [31:0] roundAndPackFloat64_21_22;
reg [63:0] roundAndPackFloat64_21_23;
reg [63:0] roundAndPackFloat64_21_24;
reg [31:0] roundAndPackFloat64_21_25;
reg [63:0] roundAndPackFloat64_21_26;
reg [63:0] roundAndPackFloat64_21_27;
reg  roundAndPackFloat64_21_28;
reg [63:0] roundAndPackFloat64_21_29;
reg [63:0] roundAndPackFloat64_21_30;
reg  roundAndPackFloat64_31_32;
reg [63:0] roundAndPackFloat64_31_33;
reg [63:0] roundAndPackFloat64_shift64RightJammingexit_z0i;
reg [63:0] roundAndPackFloat64_shift64RightJammingexit_z0i_reg;
reg [31:0] roundAndPackFloat64_shift64RightJammingexit_tr3;
reg [31:0] roundAndPackFloat64_shift64RightJammingexit_34;
reg [31:0] roundAndPackFloat64_shift64RightJammingexit_34_reg;
reg  roundAndPackFloat64_shift64RightJammingexit_35;
reg [31:0] roundAndPackFloat64_36_37;
reg [31:0] roundAndPackFloat64_36_38;
reg [63:0] roundAndPackFloat64_thread_zSig5;
reg [63:0] roundAndPackFloat64_thread_zSig5_reg;
reg [31:0] roundAndPackFloat64_thread_02;
reg [31:0] roundAndPackFloat64_thread_02_reg;
reg [31:0] roundAndPackFloat64_thread_roundBits0;
reg [31:0] roundAndPackFloat64_thread_roundBits0_reg;
reg  roundAndPackFloat64_thread_39;
reg [31:0] roundAndPackFloat64_40_41;
reg [31:0] roundAndPackFloat64_40_42;
reg [31:0] roundAndPackFloat64_thread6_roundBits09;
reg [31:0] roundAndPackFloat64_thread6_roundBits09_reg;
reg [31:0] roundAndPackFloat64_thread6_028;
reg [31:0] roundAndPackFloat64_thread6_028_reg;
reg [63:0] roundAndPackFloat64_thread6_zSig57;
reg [63:0] roundAndPackFloat64_thread6_zSig57_reg;
reg [63:0] roundAndPackFloat64_thread6_43;
reg [63:0] roundAndPackFloat64_thread6_44;
reg  roundAndPackFloat64_thread6_45;
reg [31:0] roundAndPackFloat64_thread6_46;
reg [31:0] roundAndPackFloat64_thread6_47;
reg [63:0] roundAndPackFloat64_thread6_48;
reg [63:0] roundAndPackFloat64_thread6_49;
reg  roundAndPackFloat64_thread6_50;
reg  roundAndPackFloat64_thread6_50_reg;
reg [63:0] roundAndPackFloat64_thread6_51;
reg [63:0] roundAndPackFloat64_thread6_52;
reg [63:0] roundAndPackFloat64_thread6_53;
reg [63:0] roundAndPackFloat64_thread6_op;
reg [63:0] roundAndPackFloat64_thread6_op_reg;
reg [63:0] roundAndPackFloat64_thread6_54;
reg [63:0] roundAndPackFloat64_thread6_55;
reg [63:0] roundAndPackFloat64_thread6_55_reg;
reg [63:0] roundAndPackFloat64_thread6_56;
reg [63:0] roundAndPackFloat64_57_0;
reg [63:0] roundAndPackFloat64_57_0_reg;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_roundAndPackFloat64_BB__0_1;
LEGUP_F_roundAndPackFloat64_BB__0_1:
	if ((roundAndPackFloat64_0_3 == 1'd1))
		next_state = LEGUP_F_roundAndPackFloat64_BB__4_2;
	else if ((roundAndPackFloat64_0_3 == 1'd0))
		next_state = LEGUP_F_roundAndPackFloat64_BB_thread_18;
LEGUP_F_roundAndPackFloat64_BB__11_5:
		next_state = LEGUP_F_roundAndPackFloat64_BB__11_6;
LEGUP_F_roundAndPackFloat64_BB__11_6:
		next_state = LEGUP_F_roundAndPackFloat64_BB__11_7;
LEGUP_F_roundAndPackFloat64_BB__11_7:
		next_state = LEGUP_F_roundAndPackFloat64_BB__11_8;
LEGUP_F_roundAndPackFloat64_BB__11_8:
		next_state = LEGUP_F_roundAndPackFloat64_BB__57_25;
LEGUP_F_roundAndPackFloat64_BB__17_9:
	if ((roundAndPackFloat64_17_18 == 1'd1))
		next_state = LEGUP_F_roundAndPackFloat64_BB__19_10;
	else if ((roundAndPackFloat64_17_18 == 1'd0))
		next_state = LEGUP_F_roundAndPackFloat64_BB_thread_18;
LEGUP_F_roundAndPackFloat64_BB__19_10:
	if ((roundAndPackFloat64_19_20 == 1'd1))
		next_state = LEGUP_F_roundAndPackFloat64_BB__21_11;
	else if ((roundAndPackFloat64_19_20 == 1'd0))
		next_state = LEGUP_F_roundAndPackFloat64_BB__31_12;
LEGUP_F_roundAndPackFloat64_BB__21_11:
		next_state = LEGUP_F_roundAndPackFloat64_BB_shift64RightJammingexit_13;
LEGUP_F_roundAndPackFloat64_BB__31_12:
		next_state = LEGUP_F_roundAndPackFloat64_BB_shift64RightJammingexit_13;
LEGUP_F_roundAndPackFloat64_BB__36_14:
		next_state = LEGUP_F_roundAndPackFloat64_BB__36_15;
LEGUP_F_roundAndPackFloat64_BB__36_15:
		next_state = LEGUP_F_roundAndPackFloat64_BB__36_16;
LEGUP_F_roundAndPackFloat64_BB__36_16:
		next_state = LEGUP_F_roundAndPackFloat64_BB__36_17;
LEGUP_F_roundAndPackFloat64_BB__36_17:
		next_state = LEGUP_F_roundAndPackFloat64_BB_thread_18;
LEGUP_F_roundAndPackFloat64_BB__40_19:
		next_state = LEGUP_F_roundAndPackFloat64_BB__40_20;
LEGUP_F_roundAndPackFloat64_BB__40_20:
		next_state = LEGUP_F_roundAndPackFloat64_BB__40_21;
LEGUP_F_roundAndPackFloat64_BB__40_21:
		next_state = LEGUP_F_roundAndPackFloat64_BB__40_22;
LEGUP_F_roundAndPackFloat64_BB__40_22:
		next_state = LEGUP_F_roundAndPackFloat64_BB_thread6_23;
LEGUP_F_roundAndPackFloat64_BB__4_2:
	if ((roundAndPackFloat64_4_5 == 1'd1))
		next_state = LEGUP_F_roundAndPackFloat64_BB__11_5;
	else if ((roundAndPackFloat64_4_5 == 1'd0))
		next_state = LEGUP_F_roundAndPackFloat64_BB__6_3;
LEGUP_F_roundAndPackFloat64_BB__57_25:
		next_state = LEGUP_0;
LEGUP_F_roundAndPackFloat64_BB__6_3:
	if ((roundAndPackFloat64_6_7 == 1'd1))
		next_state = LEGUP_F_roundAndPackFloat64_BB__8_4;
	else if ((roundAndPackFloat64_6_7 == 1'd0))
		next_state = LEGUP_F_roundAndPackFloat64_BB__17_9;
LEGUP_F_roundAndPackFloat64_BB__8_4:
	if ((roundAndPackFloat64_8_10 == 1'd1))
		next_state = LEGUP_F_roundAndPackFloat64_BB__11_5;
	else if ((roundAndPackFloat64_8_10 == 1'd0))
		next_state = LEGUP_F_roundAndPackFloat64_BB_thread_18;
LEGUP_F_roundAndPackFloat64_BB_shift64RightJammingexit_13:
	if ((roundAndPackFloat64_shift64RightJammingexit_35 == 1'd1))
		next_state = LEGUP_F_roundAndPackFloat64_BB_thread6_23;
	else if ((roundAndPackFloat64_shift64RightJammingexit_35 == 1'd0))
		next_state = LEGUP_F_roundAndPackFloat64_BB__36_14;
LEGUP_F_roundAndPackFloat64_BB_thread6_23:
		next_state = LEGUP_F_roundAndPackFloat64_BB_thread6_24;
LEGUP_F_roundAndPackFloat64_BB_thread6_24:
		next_state = LEGUP_F_roundAndPackFloat64_BB__57_25;
LEGUP_F_roundAndPackFloat64_BB_thread_18:
	if ((roundAndPackFloat64_thread_39 == 1'd1))
		next_state = LEGUP_F_roundAndPackFloat64_BB_thread6_23;
	else if ((roundAndPackFloat64_thread_39 == 1'd0))
		next_state = LEGUP_F_roundAndPackFloat64_BB__40_19;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* roundAndPackFloat64: %0*/
	/*   %.tr = trunc i64 %zSig to i32*/
		roundAndPackFloat64_0_tr = arg_zSig[31:0];
end
always @(*) begin
	/* roundAndPackFloat64: %0*/
	/*   %1 = and i32 %.tr, 1023*/
		roundAndPackFloat64_0_1 = (roundAndPackFloat64_0_tr & 32'd1023);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %0*/
	/*   %1 = and i32 %.tr, 1023*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__0_1)) begin
		roundAndPackFloat64_0_1_reg <= roundAndPackFloat64_0_1;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(roundAndPackFloat64_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_0_1_reg"); $finish; end
		/* synthesis translate_on */
	end
end
always @(*) begin
	/* roundAndPackFloat64: %0*/
	/*   %2 = and i32 %zExp, 65535*/
		roundAndPackFloat64_0_2 = (arg_zExp & 32'd65535);
end
always @(*) begin
	/* roundAndPackFloat64: %0*/
	/*   %3 = icmp ugt i32 %2, 2044*/
		roundAndPackFloat64_0_3 = (roundAndPackFloat64_0_2 > 32'd2044);
end
always @(*) begin
	/* roundAndPackFloat64: %4*/
	/*   %5 = icmp sgt i32 %zExp, 2045*/
		roundAndPackFloat64_4_5 = ($signed(arg_zExp) > $signed(32'd2045));
end
always @(*) begin
	/* roundAndPackFloat64: %6*/
	/*   %7 = icmp eq i32 %zExp, 2045*/
		roundAndPackFloat64_6_7 = (arg_zExp == 32'd2045);
end
always @(*) begin
	/* roundAndPackFloat64: %8*/
	/*   %9 = add i64 %zSig, 512*/
		roundAndPackFloat64_8_9 = (arg_zSig + 64'd512);
end
always @(*) begin
	/* roundAndPackFloat64: %8*/
	/*   %10 = icmp slt i64 %9, 0*/
		roundAndPackFloat64_8_10 = ($signed(roundAndPackFloat64_8_9) < $signed(64'd0));
end
always @(*) begin
	/* roundAndPackFloat64: %11*/
	/*   %12 = load i32* @float_exception_flags, align 4, !tbaa !1*/
		roundAndPackFloat64_11_12 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* roundAndPackFloat64: %11*/
	/*   %13 = or i32 %12, 9*/
		roundAndPackFloat64_11_13 = (roundAndPackFloat64_11_12 | 32'd9);
end
always @(*) begin
	/* roundAndPackFloat64: %11*/
	/*   %14 = zext i32 %zSign to i64*/
		roundAndPackFloat64_11_14 = arg_zSign;
end
always @(*) begin
	/* roundAndPackFloat64: %11*/
	/*   %15 = shl i64 %14, 63*/
		roundAndPackFloat64_11_15 = (roundAndPackFloat64_11_14 <<< (64'd63 % 64'd64));
end
always @(*) begin
	/* roundAndPackFloat64: %11*/
	/*   %16 = or i64 %15, 9218868437227405312*/
		roundAndPackFloat64_11_16 = (roundAndPackFloat64_11_15 | 64'd9218868437227405312);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %11*/
	/*   %16 = or i64 %15, 9218868437227405312*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__11_5)) begin
		roundAndPackFloat64_11_16_reg <= roundAndPackFloat64_11_16;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(roundAndPackFloat64_11_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_11_16_reg"); $finish; end
		/* synthesis translate_on */
	end
end
always @(*) begin
	/* roundAndPackFloat64: %17*/
	/*   %18 = icmp slt i32 %zExp, 0*/
		roundAndPackFloat64_17_18 = ($signed(arg_zExp) < $signed(32'd0));
end
always @(*) begin
	/* roundAndPackFloat64: %19*/
	/*   %20 = icmp sgt i32 %zExp, -64*/
		roundAndPackFloat64_19_20 = ($signed(arg_zExp) > $signed(-32'd64));
end
always @(*) begin
	/* roundAndPackFloat64: %21*/
	/*   %22 = sub nsw i32 0, %zExp*/
		roundAndPackFloat64_21_22 = (32'd0 - arg_zExp);
end
always @(*) begin
	/* roundAndPackFloat64: %21*/
	/*   %23 = zext i32 %22 to i64*/
		roundAndPackFloat64_21_23 = roundAndPackFloat64_21_22;
end
always @(*) begin
	/* roundAndPackFloat64: %21*/
	/*   %24 = lshr i64 %zSig, %23*/
		roundAndPackFloat64_21_24 = (arg_zSig >>> (roundAndPackFloat64_21_23 % 64'd64));
end
always @(*) begin
	/* roundAndPackFloat64: %21*/
	/*   %25 = and i32 %zExp, 63*/
		roundAndPackFloat64_21_25 = (arg_zExp & 32'd63);
end
always @(*) begin
	/* roundAndPackFloat64: %21*/
	/*   %26 = zext i32 %25 to i64*/
		roundAndPackFloat64_21_26 = roundAndPackFloat64_21_25;
end
always @(*) begin
	/* roundAndPackFloat64: %21*/
	/*   %27 = shl i64 %zSig, %26*/
		roundAndPackFloat64_21_27 = (arg_zSig <<< (roundAndPackFloat64_21_26 % 64'd64));
end
always @(*) begin
	/* roundAndPackFloat64: %21*/
	/*   %28 = icmp ne i64 %27, 0*/
		roundAndPackFloat64_21_28 = (roundAndPackFloat64_21_27 != 64'd0);
end
always @(*) begin
	/* roundAndPackFloat64: %21*/
	/*   %29 = zext i1 %28 to i64*/
		roundAndPackFloat64_21_29 = roundAndPackFloat64_21_28;
end
always @(*) begin
	/* roundAndPackFloat64: %21*/
	/*   %30 = or i64 %29, %24*/
		roundAndPackFloat64_21_30 = (roundAndPackFloat64_21_29 | roundAndPackFloat64_21_24);
end
always @(*) begin
	/* roundAndPackFloat64: %31*/
	/*   %32 = icmp ne i64 %zSig, 0*/
		roundAndPackFloat64_31_32 = (arg_zSig != 64'd0);
end
always @(*) begin
	/* roundAndPackFloat64: %31*/
	/*   %33 = zext i1 %32 to i64*/
		roundAndPackFloat64_31_33 = roundAndPackFloat64_31_32;
end
always @(*) begin
	/* roundAndPackFloat64: %shift64RightJamming.exit*/
	/*   %z.0.i = phi i64 [ %30, %21 ], [ %33, %31 ]*/
	if (((cur_state == LEGUP_F_roundAndPackFloat64_BB__21_11) & (memory_controller_waitrequest == 1'd0))) begin
		roundAndPackFloat64_shift64RightJammingexit_z0i = roundAndPackFloat64_21_30;
	end
	/* roundAndPackFloat64: %shift64RightJamming.exit*/
	/*   %z.0.i = phi i64 [ %30, %21 ], [ %33, %31 ]*/
	else /* if (((cur_state == LEGUP_F_roundAndPackFloat64_BB__31_12) & (memory_controller_waitrequest == 1'd0))) */ begin
		roundAndPackFloat64_shift64RightJammingexit_z0i = roundAndPackFloat64_31_33;
	end
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %shift64RightJamming.exit*/
	/*   %z.0.i = phi i64 [ %30, %21 ], [ %33, %31 ]*/
	if (((cur_state == LEGUP_F_roundAndPackFloat64_BB__21_11) & (memory_controller_waitrequest == 1'd0))) begin
		roundAndPackFloat64_shift64RightJammingexit_z0i_reg <= roundAndPackFloat64_shift64RightJammingexit_z0i;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(roundAndPackFloat64_shift64RightJammingexit_z0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_shift64RightJammingexit_z0i_reg"); $finish; end
		/* synthesis translate_on */
	end
	/* roundAndPackFloat64: %shift64RightJamming.exit*/
	/*   %z.0.i = phi i64 [ %30, %21 ], [ %33, %31 ]*/
	if (((cur_state == LEGUP_F_roundAndPackFloat64_BB__31_12) & (memory_controller_waitrequest == 1'd0))) begin
		roundAndPackFloat64_shift64RightJammingexit_z0i_reg <= roundAndPackFloat64_shift64RightJammingexit_z0i;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(roundAndPackFloat64_shift64RightJammingexit_z0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_shift64RightJammingexit_z0i_reg"); $finish; end
		/* synthesis translate_on */
	end
end
always @(*) begin
	/* roundAndPackFloat64: %shift64RightJamming.exit*/
	/*   %.tr3 = trunc i64 %z.0.i to i32*/
		roundAndPackFloat64_shift64RightJammingexit_tr3 = roundAndPackFloat64_shift64RightJammingexit_z0i_reg[31:0];
end
always @(*) begin
	/* roundAndPackFloat64: %shift64RightJamming.exit*/
	/*   %34 = and i32 %.tr3, 1023*/
		roundAndPackFloat64_shift64RightJammingexit_34 = (roundAndPackFloat64_shift64RightJammingexit_tr3 & 32'd1023);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %shift64RightJamming.exit*/
	/*   %34 = and i32 %.tr3, 1023*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB_shift64RightJammingexit_13)) begin
		roundAndPackFloat64_shift64RightJammingexit_34_reg <= roundAndPackFloat64_shift64RightJammingexit_34;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(roundAndPackFloat64_shift64RightJammingexit_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_shift64RightJammingexit_34_reg"); $finish; end
		/* synthesis translate_on */
	end
end
always @(*) begin
	/* roundAndPackFloat64: %shift64RightJamming.exit*/
	/*   %35 = icmp eq i32 %34, 0*/
		roundAndPackFloat64_shift64RightJammingexit_35 = (roundAndPackFloat64_shift64RightJammingexit_34 == 32'd0);
end
always @(*) begin
	/* roundAndPackFloat64: %36*/
	/*   %37 = load i32* @float_exception_flags, align 4, !tbaa !1*/
		roundAndPackFloat64_36_37 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* roundAndPackFloat64: %36*/
	/*   %38 = or i32 %37, 4*/
		roundAndPackFloat64_36_38 = (roundAndPackFloat64_36_37 | 32'd4);
end
always @(*) begin
	/* roundAndPackFloat64: %.thread*/
	/*   %zSig5 = phi i64 [ %z.0.i, %36 ], [ %zSig, %17 ], [ %zSig, %0 ], [ %zSig, %8 ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB__0_1) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_0_3 == 1'd0))) begin
		roundAndPackFloat64_thread_zSig5 = arg_zSig;
	end
	/* roundAndPackFloat64: %.thread*/
	/*   %zSig5 = phi i64 [ %z.0.i, %36 ], [ %zSig, %17 ], [ %zSig, %0 ], [ %zSig, %8 ]*/
	else if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB__8_4) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_8_10 == 1'd0))) begin
		roundAndPackFloat64_thread_zSig5 = arg_zSig;
	end
	/* roundAndPackFloat64: %.thread*/
	/*   %zSig5 = phi i64 [ %z.0.i, %36 ], [ %zSig, %17 ], [ %zSig, %0 ], [ %zSig, %8 ]*/
	else if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB__17_9) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_17_18 == 1'd0))) begin
		roundAndPackFloat64_thread_zSig5 = arg_zSig;
	end
	/* roundAndPackFloat64: %.thread*/
	/*   %zSig5 = phi i64 [ %z.0.i, %36 ], [ %zSig, %17 ], [ %zSig, %0 ], [ %zSig, %8 ]*/
	else /* if (((cur_state == LEGUP_F_roundAndPackFloat64_BB__36_17) & (memory_controller_waitrequest == 1'd0))) */ begin
		roundAndPackFloat64_thread_zSig5 = roundAndPackFloat64_shift64RightJammingexit_z0i_reg;
	end
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread*/
	/*   %zSig5 = phi i64 [ %z.0.i, %36 ], [ %zSig, %17 ], [ %zSig, %0 ], [ %zSig, %8 ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB__0_1) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_0_3 == 1'd0))) begin
		roundAndPackFloat64_thread_zSig5_reg <= roundAndPackFloat64_thread_zSig5;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(roundAndPackFloat64_thread_zSig5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread_zSig5_reg"); $finish; end
		/* synthesis translate_on */
	end
	/* roundAndPackFloat64: %.thread*/
	/*   %zSig5 = phi i64 [ %z.0.i, %36 ], [ %zSig, %17 ], [ %zSig, %0 ], [ %zSig, %8 ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB__8_4) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_8_10 == 1'd0))) begin
		roundAndPackFloat64_thread_zSig5_reg <= roundAndPackFloat64_thread_zSig5;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(roundAndPackFloat64_thread_zSig5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread_zSig5_reg"); $finish; end
		/* synthesis translate_on */
	end
	/* roundAndPackFloat64: %.thread*/
	/*   %zSig5 = phi i64 [ %z.0.i, %36 ], [ %zSig, %17 ], [ %zSig, %0 ], [ %zSig, %8 ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB__17_9) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_17_18 == 1'd0))) begin
		roundAndPackFloat64_thread_zSig5_reg <= roundAndPackFloat64_thread_zSig5;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(roundAndPackFloat64_thread_zSig5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread_zSig5_reg"); $finish; end
		/* synthesis translate_on */
	end
	/* roundAndPackFloat64: %.thread*/
	/*   %zSig5 = phi i64 [ %z.0.i, %36 ], [ %zSig, %17 ], [ %zSig, %0 ], [ %zSig, %8 ]*/
	if (((cur_state == LEGUP_F_roundAndPackFloat64_BB__36_17) & (memory_controller_waitrequest == 1'd0))) begin
		roundAndPackFloat64_thread_zSig5_reg <= roundAndPackFloat64_thread_zSig5;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(roundAndPackFloat64_thread_zSig5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread_zSig5_reg"); $finish; end
		/* synthesis translate_on */
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread*/
	/*   %.02 = phi i32 [ 0, %36 ], [ %zExp, %17 ], [ %zExp, %0 ], [ 2045, %8 ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB__0_1) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_0_3 == 1'd0))) begin
		roundAndPackFloat64_thread_02 = arg_zExp;
	end
	/* roundAndPackFloat64: %.thread*/
	/*   %.02 = phi i32 [ 0, %36 ], [ %zExp, %17 ], [ %zExp, %0 ], [ 2045, %8 ]*/
	else if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB__8_4) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_8_10 == 1'd0))) begin
		roundAndPackFloat64_thread_02 = 32'd2045;
	end
	/* roundAndPackFloat64: %.thread*/
	/*   %.02 = phi i32 [ 0, %36 ], [ %zExp, %17 ], [ %zExp, %0 ], [ 2045, %8 ]*/
	else if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB__17_9) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_17_18 == 1'd0))) begin
		roundAndPackFloat64_thread_02 = arg_zExp;
	end
	/* roundAndPackFloat64: %.thread*/
	/*   %.02 = phi i32 [ 0, %36 ], [ %zExp, %17 ], [ %zExp, %0 ], [ 2045, %8 ]*/
	else /* if (((cur_state == LEGUP_F_roundAndPackFloat64_BB__36_17) & (memory_controller_waitrequest == 1'd0))) */ begin
		roundAndPackFloat64_thread_02 = 32'd0;
	end
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread*/
	/*   %.02 = phi i32 [ 0, %36 ], [ %zExp, %17 ], [ %zExp, %0 ], [ 2045, %8 ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB__0_1) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_0_3 == 1'd0))) begin
		roundAndPackFloat64_thread_02_reg <= roundAndPackFloat64_thread_02;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(roundAndPackFloat64_thread_02) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread_02_reg"); $finish; end
		/* synthesis translate_on */
	end
	/* roundAndPackFloat64: %.thread*/
	/*   %.02 = phi i32 [ 0, %36 ], [ %zExp, %17 ], [ %zExp, %0 ], [ 2045, %8 ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB__8_4) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_8_10 == 1'd0))) begin
		roundAndPackFloat64_thread_02_reg <= roundAndPackFloat64_thread_02;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(roundAndPackFloat64_thread_02) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread_02_reg"); $finish; end
		/* synthesis translate_on */
	end
	/* roundAndPackFloat64: %.thread*/
	/*   %.02 = phi i32 [ 0, %36 ], [ %zExp, %17 ], [ %zExp, %0 ], [ 2045, %8 ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB__17_9) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_17_18 == 1'd0))) begin
		roundAndPackFloat64_thread_02_reg <= roundAndPackFloat64_thread_02;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(roundAndPackFloat64_thread_02) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread_02_reg"); $finish; end
		/* synthesis translate_on */
	end
	/* roundAndPackFloat64: %.thread*/
	/*   %.02 = phi i32 [ 0, %36 ], [ %zExp, %17 ], [ %zExp, %0 ], [ 2045, %8 ]*/
	if (((cur_state == LEGUP_F_roundAndPackFloat64_BB__36_17) & (memory_controller_waitrequest == 1'd0))) begin
		roundAndPackFloat64_thread_02_reg <= roundAndPackFloat64_thread_02;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(roundAndPackFloat64_thread_02) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread_02_reg"); $finish; end
		/* synthesis translate_on */
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread*/
	/*   %roundBits.0 = phi i32 [ %34, %36 ], [ %1, %17 ], [ %1, %0 ], [ %1, %8 ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB__0_1) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_0_3 == 1'd0))) begin
		roundAndPackFloat64_thread_roundBits0 = roundAndPackFloat64_0_1;
	end
	/* roundAndPackFloat64: %.thread*/
	/*   %roundBits.0 = phi i32 [ %34, %36 ], [ %1, %17 ], [ %1, %0 ], [ %1, %8 ]*/
	else if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB__8_4) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_8_10 == 1'd0))) begin
		roundAndPackFloat64_thread_roundBits0 = roundAndPackFloat64_0_1_reg;
	end
	/* roundAndPackFloat64: %.thread*/
	/*   %roundBits.0 = phi i32 [ %34, %36 ], [ %1, %17 ], [ %1, %0 ], [ %1, %8 ]*/
	else if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB__17_9) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_17_18 == 1'd0))) begin
		roundAndPackFloat64_thread_roundBits0 = roundAndPackFloat64_0_1_reg;
	end
	/* roundAndPackFloat64: %.thread*/
	/*   %roundBits.0 = phi i32 [ %34, %36 ], [ %1, %17 ], [ %1, %0 ], [ %1, %8 ]*/
	else /* if (((cur_state == LEGUP_F_roundAndPackFloat64_BB__36_17) & (memory_controller_waitrequest == 1'd0))) */ begin
		roundAndPackFloat64_thread_roundBits0 = roundAndPackFloat64_shift64RightJammingexit_34_reg;
	end
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread*/
	/*   %roundBits.0 = phi i32 [ %34, %36 ], [ %1, %17 ], [ %1, %0 ], [ %1, %8 ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB__0_1) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_0_3 == 1'd0))) begin
		roundAndPackFloat64_thread_roundBits0_reg <= roundAndPackFloat64_thread_roundBits0;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(roundAndPackFloat64_thread_roundBits0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread_roundBits0_reg"); $finish; end
		/* synthesis translate_on */
	end
	/* roundAndPackFloat64: %.thread*/
	/*   %roundBits.0 = phi i32 [ %34, %36 ], [ %1, %17 ], [ %1, %0 ], [ %1, %8 ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB__8_4) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_8_10 == 1'd0))) begin
		roundAndPackFloat64_thread_roundBits0_reg <= roundAndPackFloat64_thread_roundBits0;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(roundAndPackFloat64_thread_roundBits0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread_roundBits0_reg"); $finish; end
		/* synthesis translate_on */
	end
	/* roundAndPackFloat64: %.thread*/
	/*   %roundBits.0 = phi i32 [ %34, %36 ], [ %1, %17 ], [ %1, %0 ], [ %1, %8 ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB__17_9) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_17_18 == 1'd0))) begin
		roundAndPackFloat64_thread_roundBits0_reg <= roundAndPackFloat64_thread_roundBits0;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(roundAndPackFloat64_thread_roundBits0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread_roundBits0_reg"); $finish; end
		/* synthesis translate_on */
	end
	/* roundAndPackFloat64: %.thread*/
	/*   %roundBits.0 = phi i32 [ %34, %36 ], [ %1, %17 ], [ %1, %0 ], [ %1, %8 ]*/
	if (((cur_state == LEGUP_F_roundAndPackFloat64_BB__36_17) & (memory_controller_waitrequest == 1'd0))) begin
		roundAndPackFloat64_thread_roundBits0_reg <= roundAndPackFloat64_thread_roundBits0;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(roundAndPackFloat64_thread_roundBits0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread_roundBits0_reg"); $finish; end
		/* synthesis translate_on */
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread*/
	/*   %39 = icmp eq i32 %roundBits.0, 0*/
		roundAndPackFloat64_thread_39 = (roundAndPackFloat64_thread_roundBits0_reg == 32'd0);
end
always @(*) begin
	/* roundAndPackFloat64: %40*/
	/*   %41 = load i32* @float_exception_flags, align 4, !tbaa !1*/
		roundAndPackFloat64_40_41 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* roundAndPackFloat64: %40*/
	/*   %42 = or i32 %41, 1*/
		roundAndPackFloat64_40_42 = (roundAndPackFloat64_40_41 | 32'd1);
end
always @(*) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %roundBits.09 = phi i32 [ 0, %.thread ], [ %roundBits.0, %40 ], [ 0, %shift64RightJamming.exit ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB_shift64RightJammingexit_13) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_shift64RightJammingexit_35 == 1'd1))) begin
		roundAndPackFloat64_thread6_roundBits09 = 32'd0;
	end
	/* roundAndPackFloat64: %.thread6*/
	/*   %roundBits.09 = phi i32 [ 0, %.thread ], [ %roundBits.0, %40 ], [ 0, %shift64RightJamming.exit ]*/
	else if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread_18) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_thread_39 == 1'd1))) begin
		roundAndPackFloat64_thread6_roundBits09 = 32'd0;
	end
	/* roundAndPackFloat64: %.thread6*/
	/*   %roundBits.09 = phi i32 [ 0, %.thread ], [ %roundBits.0, %40 ], [ 0, %shift64RightJamming.exit ]*/
	else /* if (((cur_state == LEGUP_F_roundAndPackFloat64_BB__40_22) & (memory_controller_waitrequest == 1'd0))) */ begin
		roundAndPackFloat64_thread6_roundBits09 = roundAndPackFloat64_thread_roundBits0_reg;
	end
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %roundBits.09 = phi i32 [ 0, %.thread ], [ %roundBits.0, %40 ], [ 0, %shift64RightJamming.exit ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB_shift64RightJammingexit_13) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_shift64RightJammingexit_35 == 1'd1))) begin
		roundAndPackFloat64_thread6_roundBits09_reg <= roundAndPackFloat64_thread6_roundBits09;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_roundBits09) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_roundBits09_reg"); $finish; end
		/* synthesis translate_on */
	end
	/* roundAndPackFloat64: %.thread6*/
	/*   %roundBits.09 = phi i32 [ 0, %.thread ], [ %roundBits.0, %40 ], [ 0, %shift64RightJamming.exit ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread_18) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_thread_39 == 1'd1))) begin
		roundAndPackFloat64_thread6_roundBits09_reg <= roundAndPackFloat64_thread6_roundBits09;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_roundBits09) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_roundBits09_reg"); $finish; end
		/* synthesis translate_on */
	end
	/* roundAndPackFloat64: %.thread6*/
	/*   %roundBits.09 = phi i32 [ 0, %.thread ], [ %roundBits.0, %40 ], [ 0, %shift64RightJamming.exit ]*/
	if (((cur_state == LEGUP_F_roundAndPackFloat64_BB__40_22) & (memory_controller_waitrequest == 1'd0))) begin
		roundAndPackFloat64_thread6_roundBits09_reg <= roundAndPackFloat64_thread6_roundBits09;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_roundBits09) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_roundBits09_reg"); $finish; end
		/* synthesis translate_on */
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %.028 = phi i32 [ %.02, %.thread ], [ %.02, %40 ], [ 0, %shift64RightJamming.exit ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB_shift64RightJammingexit_13) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_shift64RightJammingexit_35 == 1'd1))) begin
		roundAndPackFloat64_thread6_028 = 32'd0;
	end
	/* roundAndPackFloat64: %.thread6*/
	/*   %.028 = phi i32 [ %.02, %.thread ], [ %.02, %40 ], [ 0, %shift64RightJamming.exit ]*/
	else if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread_18) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_thread_39 == 1'd1))) begin
		roundAndPackFloat64_thread6_028 = roundAndPackFloat64_thread_02_reg;
	end
	/* roundAndPackFloat64: %.thread6*/
	/*   %.028 = phi i32 [ %.02, %.thread ], [ %.02, %40 ], [ 0, %shift64RightJamming.exit ]*/
	else /* if (((cur_state == LEGUP_F_roundAndPackFloat64_BB__40_22) & (memory_controller_waitrequest == 1'd0))) */ begin
		roundAndPackFloat64_thread6_028 = roundAndPackFloat64_thread_02_reg;
	end
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %.028 = phi i32 [ %.02, %.thread ], [ %.02, %40 ], [ 0, %shift64RightJamming.exit ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB_shift64RightJammingexit_13) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_shift64RightJammingexit_35 == 1'd1))) begin
		roundAndPackFloat64_thread6_028_reg <= roundAndPackFloat64_thread6_028;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_028) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_028_reg"); $finish; end
		/* synthesis translate_on */
	end
	/* roundAndPackFloat64: %.thread6*/
	/*   %.028 = phi i32 [ %.02, %.thread ], [ %.02, %40 ], [ 0, %shift64RightJamming.exit ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread_18) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_thread_39 == 1'd1))) begin
		roundAndPackFloat64_thread6_028_reg <= roundAndPackFloat64_thread6_028;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_028) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_028_reg"); $finish; end
		/* synthesis translate_on */
	end
	/* roundAndPackFloat64: %.thread6*/
	/*   %.028 = phi i32 [ %.02, %.thread ], [ %.02, %40 ], [ 0, %shift64RightJamming.exit ]*/
	if (((cur_state == LEGUP_F_roundAndPackFloat64_BB__40_22) & (memory_controller_waitrequest == 1'd0))) begin
		roundAndPackFloat64_thread6_028_reg <= roundAndPackFloat64_thread6_028;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_028) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_028_reg"); $finish; end
		/* synthesis translate_on */
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %zSig57 = phi i64 [ %zSig5, %.thread ], [ %zSig5, %40 ], [ %z.0.i, %shift64RightJamming.exit ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB_shift64RightJammingexit_13) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_shift64RightJammingexit_35 == 1'd1))) begin
		roundAndPackFloat64_thread6_zSig57 = roundAndPackFloat64_shift64RightJammingexit_z0i_reg;
	end
	/* roundAndPackFloat64: %.thread6*/
	/*   %zSig57 = phi i64 [ %zSig5, %.thread ], [ %zSig5, %40 ], [ %z.0.i, %shift64RightJamming.exit ]*/
	else if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread_18) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_thread_39 == 1'd1))) begin
		roundAndPackFloat64_thread6_zSig57 = roundAndPackFloat64_thread_zSig5_reg;
	end
	/* roundAndPackFloat64: %.thread6*/
	/*   %zSig57 = phi i64 [ %zSig5, %.thread ], [ %zSig5, %40 ], [ %z.0.i, %shift64RightJamming.exit ]*/
	else /* if (((cur_state == LEGUP_F_roundAndPackFloat64_BB__40_22) & (memory_controller_waitrequest == 1'd0))) */ begin
		roundAndPackFloat64_thread6_zSig57 = roundAndPackFloat64_thread_zSig5_reg;
	end
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %zSig57 = phi i64 [ %zSig5, %.thread ], [ %zSig5, %40 ], [ %z.0.i, %shift64RightJamming.exit ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB_shift64RightJammingexit_13) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_shift64RightJammingexit_35 == 1'd1))) begin
		roundAndPackFloat64_thread6_zSig57_reg <= roundAndPackFloat64_thread6_zSig57;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_zSig57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_zSig57_reg"); $finish; end
		/* synthesis translate_on */
	end
	/* roundAndPackFloat64: %.thread6*/
	/*   %zSig57 = phi i64 [ %zSig5, %.thread ], [ %zSig5, %40 ], [ %z.0.i, %shift64RightJamming.exit ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread_18) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_thread_39 == 1'd1))) begin
		roundAndPackFloat64_thread6_zSig57_reg <= roundAndPackFloat64_thread6_zSig57;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_zSig57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_zSig57_reg"); $finish; end
		/* synthesis translate_on */
	end
	/* roundAndPackFloat64: %.thread6*/
	/*   %zSig57 = phi i64 [ %zSig5, %.thread ], [ %zSig5, %40 ], [ %z.0.i, %shift64RightJamming.exit ]*/
	if (((cur_state == LEGUP_F_roundAndPackFloat64_BB__40_22) & (memory_controller_waitrequest == 1'd0))) begin
		roundAndPackFloat64_thread6_zSig57_reg <= roundAndPackFloat64_thread6_zSig57;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_zSig57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_zSig57_reg"); $finish; end
		/* synthesis translate_on */
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %43 = add i64 %zSig57, 512*/
		roundAndPackFloat64_thread6_43 = (roundAndPackFloat64_thread6_zSig57_reg + 64'd512);
end
always @(*) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %44 = lshr i64 %43, 10*/
		roundAndPackFloat64_thread6_44 = (roundAndPackFloat64_thread6_43 >>> (64'd10 % 64'd64));
end
always @(*) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %45 = icmp eq i32 %roundBits.09, 512*/
		roundAndPackFloat64_thread6_45 = (roundAndPackFloat64_thread6_roundBits09_reg == 32'd512);
end
always @(*) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %46 = zext i1 %45 to i32*/
		roundAndPackFloat64_thread6_46 = roundAndPackFloat64_thread6_45;
end
always @(*) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %47 = xor i32 %46, -1*/
		roundAndPackFloat64_thread6_47 = (roundAndPackFloat64_thread6_46 ^ -32'd1);
end
always @(*) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %48 = sext i32 %47 to i64*/
		roundAndPackFloat64_thread6_48 = $signed(roundAndPackFloat64_thread6_47);
end
always @(*) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %49 = and i64 %44, %48*/
		roundAndPackFloat64_thread6_49 = (roundAndPackFloat64_thread6_44 & roundAndPackFloat64_thread6_48);
end
always @(*) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %50 = icmp eq i64 %49, 0*/
		roundAndPackFloat64_thread6_50 = (roundAndPackFloat64_thread6_49 == 64'd0);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %50 = icmp eq i64 %49, 0*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread6_23)) begin
		roundAndPackFloat64_thread6_50_reg <= roundAndPackFloat64_thread6_50;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_50_reg"); $finish; end
		/* synthesis translate_on */
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %51 = zext i32 %zSign to i64*/
		roundAndPackFloat64_thread6_51 = arg_zSign;
end
always @(*) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %52 = shl i64 %51, 63*/
		roundAndPackFloat64_thread6_52 = (roundAndPackFloat64_thread6_51 <<< (64'd63 % 64'd64));
end
always @(*) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %53 = zext i32 %.028 to i64*/
		roundAndPackFloat64_thread6_53 = roundAndPackFloat64_thread6_028_reg;
end
always @(*) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %.op = shl i64 %53, 52*/
		roundAndPackFloat64_thread6_op = (roundAndPackFloat64_thread6_53 <<< (64'd52 % 64'd64));
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %.op = shl i64 %53, 52*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread6_23)) begin
		roundAndPackFloat64_thread6_op_reg <= roundAndPackFloat64_thread6_op;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_op) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_op_reg"); $finish; end
		/* synthesis translate_on */
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %54 = select i1 %50, i64 0, i64 %.op*/
		roundAndPackFloat64_thread6_54 = (roundAndPackFloat64_thread6_50_reg ? 64'd0 : roundAndPackFloat64_thread6_op_reg);
end
always @(*) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %55 = or i64 %49, %52*/
		roundAndPackFloat64_thread6_55 = (roundAndPackFloat64_thread6_49 | roundAndPackFloat64_thread6_52);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %55 = or i64 %49, %52*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread6_23)) begin
		roundAndPackFloat64_thread6_55_reg <= roundAndPackFloat64_thread6_55;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_55_reg"); $finish; end
		/* synthesis translate_on */
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %56 = add i64 %54, %55*/
		roundAndPackFloat64_thread6_56 = (roundAndPackFloat64_thread6_54 + roundAndPackFloat64_thread6_55_reg);
end
always @(*) begin
	/* roundAndPackFloat64: %57*/
	/*   %.0 = phi i64 [ %16, %11 ], [ %56, %.thread6 ]*/
	if (((cur_state == LEGUP_F_roundAndPackFloat64_BB__11_8) & (memory_controller_waitrequest == 1'd0))) begin
		roundAndPackFloat64_57_0 = roundAndPackFloat64_11_16_reg;
	end
	/* roundAndPackFloat64: %57*/
	/*   %.0 = phi i64 [ %16, %11 ], [ %56, %.thread6 ]*/
	else /* if (((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread6_24) & (memory_controller_waitrequest == 1'd0))) */ begin
		roundAndPackFloat64_57_0 = roundAndPackFloat64_thread6_56;
	end
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %57*/
	/*   %.0 = phi i64 [ %16, %11 ], [ %56, %.thread6 ]*/
	if (((cur_state == LEGUP_F_roundAndPackFloat64_BB__11_8) & (memory_controller_waitrequest == 1'd0))) begin
		roundAndPackFloat64_57_0_reg <= roundAndPackFloat64_57_0;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(roundAndPackFloat64_57_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_57_0_reg"); $finish; end
		/* synthesis translate_on */
	end
	/* roundAndPackFloat64: %57*/
	/*   %.0 = phi i64 [ %16, %11 ], [ %56, %.thread6 ]*/
	if (((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread6_24) & (memory_controller_waitrequest == 1'd0))) begin
		roundAndPackFloat64_57_0_reg <= roundAndPackFloat64_57_0;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(roundAndPackFloat64_57_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_57_0_reg"); $finish; end
		/* synthesis translate_on */
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
		/* synthesis translate_on */
	end
	/* roundAndPackFloat64: %57*/
	/*   ret i64 %.0*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__57_25)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		/* synthesis translate_off */
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
		/* synthesis translate_on */
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
	/* roundAndPackFloat64: %11*/
	/*   %12 = load i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__11_5)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* roundAndPackFloat64: %11*/
	/*   store i32 %13, i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__11_7)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* roundAndPackFloat64: %36*/
	/*   %37 = load i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__36_14)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* roundAndPackFloat64: %36*/
	/*   store i32 %38, i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__36_16)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* roundAndPackFloat64: %40*/
	/*   %41 = load i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__40_19)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* roundAndPackFloat64: %40*/
	/*   store i32 %42, i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__40_21)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
	/* roundAndPackFloat64: %11*/
	/*   %12 = load i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__11_5)) begin
		memory_controller_address_a = `TAG_g_float_exception_flags_a;
	end
	/* roundAndPackFloat64: %11*/
	/*   store i32 %13, i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__11_7)) begin
		memory_controller_address_a = `TAG_g_float_exception_flags_a;
	end
	/* roundAndPackFloat64: %36*/
	/*   %37 = load i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__36_14)) begin
		memory_controller_address_a = `TAG_g_float_exception_flags_a;
	end
	/* roundAndPackFloat64: %36*/
	/*   store i32 %38, i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__36_16)) begin
		memory_controller_address_a = `TAG_g_float_exception_flags_a;
	end
	/* roundAndPackFloat64: %40*/
	/*   %41 = load i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__40_19)) begin
		memory_controller_address_a = `TAG_g_float_exception_flags_a;
	end
	/* roundAndPackFloat64: %40*/
	/*   store i32 %42, i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__40_21)) begin
		memory_controller_address_a = `TAG_g_float_exception_flags_a;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* roundAndPackFloat64: %11*/
	/*   %12 = load i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__11_5)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* roundAndPackFloat64: %11*/
	/*   store i32 %13, i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__11_7)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* roundAndPackFloat64: %36*/
	/*   %37 = load i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__36_14)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* roundAndPackFloat64: %36*/
	/*   store i32 %38, i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__36_16)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* roundAndPackFloat64: %40*/
	/*   %41 = load i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__40_19)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* roundAndPackFloat64: %40*/
	/*   store i32 %42, i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__40_21)) begin
		memory_controller_write_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
	/* roundAndPackFloat64: %11*/
	/*   store i32 %13, i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__11_7)) begin
		memory_controller_in_a = roundAndPackFloat64_11_13;
	end
	/* roundAndPackFloat64: %36*/
	/*   store i32 %38, i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__36_16)) begin
		memory_controller_in_a = roundAndPackFloat64_36_38;
	end
	/* roundAndPackFloat64: %40*/
	/*   store i32 %42, i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__40_21)) begin
		memory_controller_in_a = roundAndPackFloat64_40_42;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
	/* roundAndPackFloat64: %11*/
	/*   %12 = load i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__11_5)) begin
		memory_controller_size_a = 2'd2;
	end
	/* roundAndPackFloat64: %11*/
	/*   store i32 %13, i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__11_7)) begin
		memory_controller_size_a = 2'd2;
	end
	/* roundAndPackFloat64: %36*/
	/*   %37 = load i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__36_14)) begin
		memory_controller_size_a = 2'd2;
	end
	/* roundAndPackFloat64: %36*/
	/*   store i32 %38, i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__36_16)) begin
		memory_controller_size_a = 2'd2;
	end
	/* roundAndPackFloat64: %40*/
	/*   %41 = load i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__40_19)) begin
		memory_controller_size_a = 2'd2;
	end
	/* roundAndPackFloat64: %40*/
	/*   store i32 %42, i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__40_21)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 64'd0;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(64'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
		/* synthesis translate_on */
	end
	/* roundAndPackFloat64: %57*/
	/*   ret i64 %.0*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__57_25)) begin
		return_val <= roundAndPackFloat64_57_0_reg;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(roundAndPackFloat64_57_0_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
		/* synthesis translate_on */
	end
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val
);

parameter [6:0] LEGUP_0 = 7'd0;
parameter [6:0] LEGUP_F_main_BB__1_1 = 7'd1;
parameter [6:0] LEGUP_F_main_BB__1_2 = 7'd2;
parameter [6:0] LEGUP_F_main_BB__1_3 = 7'd3;
parameter [6:0] LEGUP_F_main_BB__15_4 = 7'd4;
parameter [6:0] LEGUP_F_main_BB__21_5 = 7'd5;
parameter [6:0] LEGUP_F_main_BB__23_6 = 7'd6;
parameter [6:0] LEGUP_F_main_BB_float64_is_signaling_nanexit1i10ii_7 = 7'd7;
parameter [6:0] LEGUP_F_main_BB_float64_is_signaling_nanexit1i10ii_8 = 7'd8;
parameter [6:0] LEGUP_F_main_BB__27_9 = 7'd9;
parameter [6:0] LEGUP_F_main_BB__33_10 = 7'd10;
parameter [6:0] LEGUP_F_main_BB__35_11 = 7'd11;
parameter [6:0] LEGUP_F_main_BB__45_12 = 7'd12;
parameter [6:0] LEGUP_F_main_BB__48_13 = 7'd13;
parameter [6:0] LEGUP_F_main_BB__50_14 = 7'd14;
parameter [6:0] LEGUP_F_main_BB__52_15 = 7'd15;
parameter [6:0] LEGUP_F_main_BB_float64_is_signaling_nanexit1i1ii_16 = 7'd16;
parameter [6:0] LEGUP_F_main_BB_float64_is_signaling_nanexit1i1ii_17 = 7'd17;
parameter [6:0] LEGUP_F_main_BB__56_18 = 7'd18;
parameter [6:0] LEGUP_F_main_BB__59_19 = 7'd19;
parameter [6:0] LEGUP_F_main_BB__66_20 = 7'd20;
parameter [6:0] LEGUP_F_main_BB__68_21 = 7'd21;
parameter [6:0] LEGUP_F_main_BB__77_22 = 7'd22;
parameter [6:0] LEGUP_F_main_BB__80_23 = 7'd23;
parameter [6:0] LEGUP_F_main_BB__81_24 = 7'd24;
parameter [6:0] LEGUP_F_main_BB_float64_is_signaling_nanexit1ii4i_25 = 7'd25;
parameter [6:0] LEGUP_F_main_BB_float64_is_signaling_nanexit1ii4i_26 = 7'd26;
parameter [6:0] LEGUP_F_main_BB__86_27 = 7'd27;
parameter [6:0] LEGUP_F_main_BB__91_28 = 7'd28;
parameter [6:0] LEGUP_F_main_BB_shift64RightJammingexit9ii_29 = 7'd29;
parameter [6:0] LEGUP_F_main_BB_shift64RightJammingexit9ii_30 = 7'd30;
parameter [6:0] LEGUP_F_main_BB_shift64RightJammingexit9ii_31 = 7'd31;
parameter [6:0] LEGUP_F_main_BB__101_32 = 7'd32;
parameter [6:0] LEGUP_F_main_BB__101_34 = 7'd34;
parameter [6:0] LEGUP_F_main_BB__103_35 = 7'd35;
parameter [6:0] LEGUP_F_main_BB__109_36 = 7'd36;
parameter [6:0] LEGUP_F_main_BB__111_37 = 7'd37;
parameter [6:0] LEGUP_F_main_BB__112_38 = 7'd38;
parameter [6:0] LEGUP_F_main_BB_float64_is_signaling_nanexit1i11ii_39 = 7'd39;
parameter [6:0] LEGUP_F_main_BB_float64_is_signaling_nanexit1i11ii_40 = 7'd40;
parameter [6:0] LEGUP_F_main_BB__117_41 = 7'd41;
parameter [6:0] LEGUP_F_main_BB__117_42 = 7'd42;
parameter [6:0] LEGUP_F_main_BB__117_43 = 7'd43;
parameter [6:0] LEGUP_F_main_BB__117_44 = 7'd44;
parameter [6:0] LEGUP_F_main_BB__120_45 = 7'd45;
parameter [6:0] LEGUP_F_main_BB__121_46 = 7'd46;
parameter [6:0] LEGUP_F_main_BB__123_47 = 7'd47;
parameter [6:0] LEGUP_F_main_BB__125_48 = 7'd48;
parameter [6:0] LEGUP_F_main_BB__127_49 = 7'd49;
parameter [6:0] LEGUP_F_main_BB_float64_is_signaling_nanexit1i4ii_50 = 7'd50;
parameter [6:0] LEGUP_F_main_BB_float64_is_signaling_nanexit1i4ii_51 = 7'd51;
parameter [6:0] LEGUP_F_main_BB__131_52 = 7'd52;
parameter [6:0] LEGUP_F_main_BB__136_53 = 7'd53;
parameter [6:0] LEGUP_F_main_BB__143_54 = 7'd54;
parameter [6:0] LEGUP_F_main_BB__145_55 = 7'd55;
parameter [6:0] LEGUP_F_main_BB__154_56 = 7'd56;
parameter [6:0] LEGUP_F_main_BB_shift64RightJammingexit3ii_57 = 7'd57;
parameter [6:0] LEGUP_F_main_BB__158_58 = 7'd58;
parameter [6:0] LEGUP_F_main_BB__163_59 = 7'd59;
parameter [6:0] LEGUP_F_main_BB__165_60 = 7'd60;
parameter [6:0] LEGUP_F_main_BB_float64_is_signaling_nanexit1iii_61 = 7'd61;
parameter [6:0] LEGUP_F_main_BB_float64_is_signaling_nanexit1iii_62 = 7'd62;
parameter [6:0] LEGUP_F_main_BB__169_63 = 7'd63;
parameter [6:0] LEGUP_F_main_BB__175_64 = 7'd64;
parameter [6:0] LEGUP_F_main_BB__177_65 = 7'd65;
parameter [6:0] LEGUP_F_main_BB__187_66 = 7'd66;
parameter [6:0] LEGUP_F_main_BB_shift64RightJammingexitii_67 = 7'd67;
parameter [6:0] LEGUP_F_main_BB__191_68 = 7'd68;
parameter [6:0] LEGUP_F_main_BB__195_69 = 7'd69;
parameter [6:0] LEGUP_F_main_BB__195_70 = 7'd70;
parameter [6:0] LEGUP_F_main_BB__202_71 = 7'd71;
parameter [6:0] LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_72 = 7'd72;
parameter [6:0] LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_73 = 7'd73;
parameter [6:0] LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_74 = 7'd74;
parameter [6:0] LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_76 = 7'd76;
parameter [6:0] LEGUP_F_main_BB_float64_addexit_77 = 7'd77;
parameter [6:0] LEGUP_F_main_BB_float64_addexit_78 = 7'd78;
parameter [6:0] LEGUP_F_main_BB_float64_addexit_79 = 7'd79;
parameter [6:0] LEGUP_F_main_BB__221_80 = 7'd80;
parameter [6:0] LEGUP_F_main_BB__224_81 = 7'd81;
parameter [6:0] LEGUP_F_main_BB__226_82 = 7'd82;
parameter [6:0] LEGUP_F_main_BB__228_83 = 7'd83;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};
parameter [6:0] LEGUP_function_call_33 = 7'd33;
parameter [6:0] LEGUP_function_call_75 = 7'd75;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [31:0] return_val;
reg [6:0] cur_state;
reg [6:0] next_state;
reg [31:0] main_1_main_result02;
reg [31:0] main_1_main_result02_reg;
reg [31:0] main_1_2;
reg [31:0] main_1_2_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep3;
reg [63:0] main_1_3;
reg [63:0] main_1_3_reg;
reg [63:0] main_1_4;
reg [63:0] main_1_4_reg;
reg [63:0] main_1_5;
reg [63:0] main_1_5_reg;
reg [31:0] main_1_6;
reg [31:0] main_1_6_reg;
reg [63:0] main_1_7;
reg [31:0] main_1_8;
reg  main_1_9;
reg [63:0] main_1_10;
reg [31:0] main_1_trii1i;
reg [31:0] main_1_11;
reg [31:0] main_1_11_reg;
reg [63:0] main_1_12;
reg [31:0] main_1_tri17ii;
reg [31:0] main_1_13;
reg [31:0] main_1_13_reg;
reg [31:0] main_1_14;
reg [31:0] main_1_14_reg;
reg [63:0] main_15_16;
reg [63:0] main_15_17;
reg [63:0] main_15_17_reg;
reg [63:0] main_15_18;
reg [63:0] main_15_19;
reg [63:0] main_15_19_reg;
reg  main_15_20;
reg  main_21_22;
reg  main_23_24;
reg [62:0] main_float64_is_signaling_nanexit1i10ii_25;
reg  main_float64_is_signaling_nanexit1i10ii_26;
reg  main_float64_is_signaling_nanexit1i10ii_26_reg;
reg [63:0] main_float64_is_signaling_nanexit1i10ii_mux2vi14ii;
reg [63:0] main_float64_is_signaling_nanexit1i10ii_mux2i15ii;
reg  main_27_28;
reg [63:0] main_27_29;
reg [63:0] main_27_30;
reg [63:0] main_27_30_reg;
reg [31:0] main_27_31;
reg [31:0] main_27_expDiff0i2i;
reg [31:0] main_27_expDiff0i2i_reg;
reg  main_27_32;
reg  main_33_34;
reg [63:0] main_35_36;
reg [63:0] main_35_37;
reg [31:0] main_35_38;
reg [31:0] main_35_39;
reg [63:0] main_35_40;
reg [63:0] main_35_41;
reg  main_35_42;
reg [63:0] main_35_43;
reg [63:0] main_35_44;
reg  main_45_46;
reg [63:0] main_45_47;
reg  main_48_49;
reg  main_50_51;
reg  main_52_53;
reg [62:0] main_float64_is_signaling_nanexit1i1ii_54;
reg  main_float64_is_signaling_nanexit1i1ii_55;
reg  main_float64_is_signaling_nanexit1i1ii_55_reg;
reg [63:0] main_float64_is_signaling_nanexit1i1ii_mux2vi5ii;
reg [63:0] main_float64_is_signaling_nanexit1i1ii_mux2i6ii;
reg [63:0] main_56_57;
reg [63:0] main_56_58;
reg  main_59_60;
reg [63:0] main_59_61;
reg [63:0] main_59_62;
reg [63:0] main_59_62_reg;
reg [31:0] main_59_63;
reg [31:0] main_59_expDiff1i3i;
reg [31:0] main_59_expDiff1i3i_reg;
reg [31:0] main_59_64;
reg [31:0] main_59_64_reg;
reg  main_59_65;
reg  main_66_67;
reg [63:0] main_68_69;
reg [63:0] main_68_70;
reg [31:0] main_68_71;
reg [63:0] main_68_72;
reg [63:0] main_68_73;
reg  main_68_74;
reg [63:0] main_68_75;
reg [63:0] main_68_76;
reg  main_77_78;
reg [63:0] main_77_79;
reg [63:0] main_81_82;
reg  main_81_83;
reg [62:0] main_float64_is_signaling_nanexit1ii4i_84;
reg  main_float64_is_signaling_nanexit1ii4i_85;
reg  main_float64_is_signaling_nanexit1ii4i_85_reg;
reg [63:0] main_float64_is_signaling_nanexit1ii4i_mux2vii8i;
reg [63:0] main_float64_is_signaling_nanexit1ii4i_mux2ii9i;
reg [63:0] main_86_87;
reg [63:0] main_86_88;
reg [63:0] main_86_89;
reg [63:0] main_86_90;
reg [63:0] main_91_92;
reg [63:0] main_91_93;
reg [63:0] main_shift64RightJammingexit9ii_94;
reg [63:0] main_shift64RightJammingexit9ii_94_reg;
reg [63:0] main_shift64RightJammingexit9ii_95;
reg [63:0] main_shift64RightJammingexit9ii_95_reg;
reg [31:0] main_shift64RightJammingexit9ii_zExp0i11i;
reg [31:0] main_shift64RightJammingexit9ii_zExp0i11i_reg;
reg [63:0] main_shift64RightJammingexit9ii_96;
reg [63:0] main_shift64RightJammingexit9ii_97;
reg [63:0] main_shift64RightJammingexit9ii_98;
reg  main_shift64RightJammingexit9ii_99;
reg  main_shift64RightJammingexit9ii_99_reg;
reg  main_shift64RightJammingexit9ii_notii;
reg [31:0] main_shift64RightJammingexit9ii_100;
reg [31:0] main_shift64RightJammingexit9ii_100_reg;
reg [31:0] main_shift64RightJammingexit9ii_zExp0ii;
reg [63:0] main_shift64RightJammingexit9ii_ii;
reg [63:0] main_shift64RightJammingexit9ii_ii_reg;
reg [31:0] main_101_zExp1ii;
reg [31:0] main_101_zExp1ii_reg;
reg [63:0] main_101_zSig0i12i;
reg [63:0] main_101_zSig0i12i_reg;
reg [63:0] main_101_102;
reg [63:0] main_101_102_reg;
reg [63:0] main_103_104;
reg [63:0] main_103_105;
reg [63:0] main_103_105_reg;
reg [63:0] main_103_106;
reg [63:0] main_103_107;
reg [63:0] main_103_107_reg;
reg  main_103_108;
reg  main_109_110;
reg [63:0] main_112_113;
reg  main_112_114;
reg [62:0] main_float64_is_signaling_nanexit1i11ii_115;
reg  main_float64_is_signaling_nanexit1i11ii_116;
reg  main_float64_is_signaling_nanexit1i11ii_116_reg;
reg [63:0] main_float64_is_signaling_nanexit1i11ii_mux2vi15ii;
reg [63:0] main_float64_is_signaling_nanexit1i11ii_mux2i16ii;
reg [31:0] main_117_118;
reg [31:0] main_117_119;
reg [31:0] main_121_aExp0ii;
reg [31:0] main_121_aExp0ii_reg;
reg [31:0] main_121_bExp0ii;
reg [31:0] main_121_bExp0ii_reg;
reg  main_121_122;
reg  main_123_124;
reg  main_125_126;
reg  main_127_128;
reg [62:0] main_float64_is_signaling_nanexit1i4ii_129;
reg  main_float64_is_signaling_nanexit1i4ii_130;
reg  main_float64_is_signaling_nanexit1i4ii_130_reg;
reg [63:0] main_float64_is_signaling_nanexit1i4ii_mux2vi8ii;
reg [63:0] main_float64_is_signaling_nanexit1i4ii_mux2i9ii;
reg [31:0] main_131_132;
reg [63:0] main_131_133;
reg [63:0] main_131_134;
reg [63:0] main_131_135;
reg  main_136_137;
reg [63:0] main_136_138;
reg [63:0] main_136_139;
reg [63:0] main_136_139_reg;
reg [31:0] main_136_140;
reg [31:0] main_136_expDiff0ii;
reg [31:0] main_136_expDiff0ii_reg;
reg [31:0] main_136_141;
reg [31:0] main_136_141_reg;
reg  main_136_142;
reg  main_143_144;
reg [63:0] main_145_146;
reg [63:0] main_145_147;
reg [31:0] main_145_148;
reg [63:0] main_145_149;
reg [63:0] main_145_150;
reg  main_145_151;
reg [63:0] main_145_152;
reg [63:0] main_145_153;
reg  main_154_155;
reg [63:0] main_154_156;
reg [63:0] main_shift64RightJammingexit3ii_z0i2ii;
reg [63:0] main_shift64RightJammingexit3ii_z0i2ii_reg;
reg [63:0] main_shift64RightJammingexit3ii_157;
reg [63:0] main_158_159;
reg [63:0] main_158_159_reg;
reg [63:0] main_158_160;
reg [63:0] main_158_160_reg;
reg [31:0] main_158_bExp1ii;
reg [31:0] main_158_bExp1ii_reg;
reg [63:0] main_158_161;
reg [31:0] main_158_162;
reg  main_163_164;
reg  main_165_166;
reg [62:0] main_float64_is_signaling_nanexit1iii_167;
reg  main_float64_is_signaling_nanexit1iii_168;
reg  main_float64_is_signaling_nanexit1iii_168_reg;
reg [63:0] main_float64_is_signaling_nanexit1iii_mux2viii;
reg [63:0] main_float64_is_signaling_nanexit1iii_mux2iii;
reg  main_169_170;
reg [63:0] main_169_171;
reg [63:0] main_169_172;
reg [63:0] main_169_172_reg;
reg [31:0] main_169_173;
reg [31:0] main_169_expDiff1ii;
reg [31:0] main_169_expDiff1ii_reg;
reg  main_169_174;
reg  main_175_176;
reg [63:0] main_177_178;
reg [63:0] main_177_179;
reg [31:0] main_177_180;
reg [31:0] main_177_181;
reg [63:0] main_177_182;
reg [63:0] main_177_183;
reg  main_177_184;
reg [63:0] main_177_185;
reg [63:0] main_177_186;
reg  main_187_188;
reg [63:0] main_187_189;
reg [63:0] main_shift64RightJammingexitii_z0iii;
reg [63:0] main_shift64RightJammingexitii_z0iii_reg;
reg [63:0] main_shift64RightJammingexitii_190;
reg [63:0] main_191_192;
reg [63:0] main_191_192_reg;
reg [63:0] main_191_193;
reg [63:0] main_191_193_reg;
reg [31:0] main_191_aExp1ii;
reg [31:0] main_191_aExp1ii_reg;
reg [63:0] main_191_194;
reg [31:0] main_195_0ii;
reg [31:0] main_195_0ii_reg;
reg [31:0] main_195_zExp0ii;
reg [31:0] main_195_zExp0ii_reg;
reg [63:0] main_195_zSig0ii;
reg [63:0] main_195_zSig0ii_reg;
reg [31:0] main_195_196;
reg [31:0] main_195_196_reg;
reg  main_195_197;
reg  main_195_197_reg;
reg [63:0] main_195_198;
reg [63:0] main_195_asinkiiii;
reg [31:0] main_195_extracttiiii;
reg [31:0] main_195_extracttiiii_reg;
reg  main_195_199;
reg  main_195_199_reg;
reg [31:0] main_195_200;
reg [31:0] main_195_200_reg;
reg [31:0] main_195_aiiiii;
reg [31:0] main_195_aiiiii_reg;
reg [31:0] main_195_iiiii;
reg [31:0] main_195_iiiii_reg;
reg  main_195_201;
reg [31:0] main_202_203;
reg [31:0] main_202_204;
reg [31:0] main_normalizeRoundAndPackFloat64exitii_1iiiii;
reg [31:0] main_normalizeRoundAndPackFloat64exitii_1iiiii_reg;
reg [31:0] main_normalizeRoundAndPackFloat64exitii_shiftCount1iiiii;
reg [31:0] main_normalizeRoundAndPackFloat64exitii_shiftCount1iiiii_reg;
reg [31:0] main_normalizeRoundAndPackFloat64exitii_205;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_normalizeRoundAndPackFloat64exitii_206;
reg [31:0] main_normalizeRoundAndPackFloat64exitii_207;
reg [31:0] main_normalizeRoundAndPackFloat64exitii_208;
reg [31:0] main_normalizeRoundAndPackFloat64exitii_209;
reg [31:0] main_normalizeRoundAndPackFloat64exitii_209_reg;
reg [31:0] main_normalizeRoundAndPackFloat64exitii_210;
reg [31:0] main_normalizeRoundAndPackFloat64exitii_211;
reg [63:0] main_normalizeRoundAndPackFloat64exitii_212;
reg [63:0] main_normalizeRoundAndPackFloat64exitii_213;
reg [63:0] main_normalizeRoundAndPackFloat64exitii_214;
reg [63:0] main_normalizeRoundAndPackFloat64exitii_214_reg;
reg [63:0] main_float64_addexit_0i;
reg [63:0] main_float64_addexit_0i_reg;
reg [63:0] main_float64_addexit_215;
reg  main_float64_addexit_216;
reg [31:0] main_float64_addexit_217;
reg [31:0] main_float64_addexit_218;
reg [31:0] main_float64_addexit_218_reg;
reg [31:0] main_float64_addexit_220;
reg [31:0] main_float64_addexit_220_reg;
reg  main_float64_addexit_exitcond1;
reg  main_float64_addexit_exitcond1_reg;
reg  main_221_223;
reg  roundAndPackFloat64_start;
reg [31:0] roundAndPackFloat64_arg_zSign;
reg [31:0] roundAndPackFloat64_arg_zExp;
reg [63:0] roundAndPackFloat64_arg_zSig;
wire  roundAndPackFloat64_memory_controller_enable_a;
wire  roundAndPackFloat64_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] roundAndPackFloat64_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] roundAndPackFloat64_memory_controller_in_a;
wire [1:0] roundAndPackFloat64_memory_controller_size_a;
wire  roundAndPackFloat64_memory_controller_enable_b;
wire  roundAndPackFloat64_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] roundAndPackFloat64_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] roundAndPackFloat64_memory_controller_in_b;
wire [1:0] roundAndPackFloat64_memory_controller_size_b;
reg  roundAndPackFloat64_finish_final;
reg  roundAndPackFloat64_finish_reg;
wire  roundAndPackFloat64_finish;
wire [63:0] roundAndPackFloat64_return_val;
reg [63:0] roundAndPackFloat64_return_val_reg;


roundAndPackFloat64 roundAndPackFloat64 (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (roundAndPackFloat64_memory_controller_enable_a),
	.memory_controller_address_a (roundAndPackFloat64_memory_controller_address_a),
	.memory_controller_write_enable_a (roundAndPackFloat64_memory_controller_write_enable_a),
	.memory_controller_in_a (roundAndPackFloat64_memory_controller_in_a),
	.memory_controller_size_a (roundAndPackFloat64_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (roundAndPackFloat64_memory_controller_enable_b),
	.memory_controller_address_b (roundAndPackFloat64_memory_controller_address_b),
	.memory_controller_write_enable_b (roundAndPackFloat64_memory_controller_write_enable_b),
	.memory_controller_in_b (roundAndPackFloat64_memory_controller_in_b),
	.memory_controller_size_b (roundAndPackFloat64_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (roundAndPackFloat64_start),
	.finish (roundAndPackFloat64_finish),
	.return_val (roundAndPackFloat64_return_val),
	.arg_zSign (roundAndPackFloat64_arg_zSign),
	.arg_zExp (roundAndPackFloat64_arg_zExp),
	.arg_zSig (roundAndPackFloat64_arg_zSig)
);

defparam
	roundAndPackFloat64.tag_offset = tag_offset;


/* Unsynthesizable Statements */
/* synthesis translate_off */
always @(posedge clk)
	if (!memory_controller_waitrequest) begin
	/* main: %float64_add.exit*/
	/*   %219 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([65 x i8]* @.str, i32 0, i32 0), i64 %3, i64 %4, i64 %215, i64 %.0.i) #1*/
	if ((cur_state == LEGUP_F_main_BB_float64_addexit_79)) begin
		$write("a_input=%0x b_input=%0x expected=%0x output=%0x\n", $signed(main_1_3_reg), $signed(main_1_4_reg), $signed(main_float64_addexit_215), $signed(main_float64_addexit_0i_reg));
	end
	/* main: %221*/
	/*   %222 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([12 x i8]* @.str1, i32 0, i32 0), i32 %218) #1*/
	if ((cur_state == LEGUP_F_main_BB__221_80)) begin
		$write("Result: %d\n", $signed(main_float64_addexit_218_reg));
	end
	/* main: %224*/
	/*   %225 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str2, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_main_BB__224_81)) begin
		$write("RESULT: PASS\n");
	end
	/* main: %226*/
	/*   %227 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str3, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_main_BB__226_82)) begin
		$write("RESULT: FAIL\n");
	end
end
/* synthesis translate_on */
always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_main_BB__1_1;
LEGUP_F_main_BB__101_32:
		next_state = LEGUP_function_call_33;
LEGUP_F_main_BB__101_34:
		next_state = LEGUP_F_main_BB_float64_addexit_77;
LEGUP_F_main_BB__103_35:
	if ((main_103_108 == 1'd1))
		next_state = LEGUP_F_main_BB__163_59;
	else if ((main_103_108 == 1'd0))
		next_state = LEGUP_F_main_BB__109_36;
LEGUP_F_main_BB__109_36:
	if ((main_109_110 == 1'd1))
		next_state = LEGUP_F_main_BB__125_48;
	else if ((main_109_110 == 1'd0))
		next_state = LEGUP_F_main_BB__111_37;
LEGUP_F_main_BB__111_37:
	if ((main_1_11_reg == 32'd2047))
		next_state = LEGUP_F_main_BB__112_38;
	else if ((main_1_11_reg == 32'd0))
		next_state = LEGUP_F_main_BB__120_45;
	else if ((main_1_11_reg != 32'd2047) && (main_1_11_reg != 32'd0))
		next_state = LEGUP_F_main_BB__121_46;
LEGUP_F_main_BB__112_38:
	if ((main_112_114 == 1'd1))
		next_state = LEGUP_F_main_BB__117_41;
	else if ((main_112_114 == 1'd0))
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexit1i11ii_39;
LEGUP_F_main_BB__117_41:
		next_state = LEGUP_F_main_BB__117_42;
LEGUP_F_main_BB__117_42:
		next_state = LEGUP_F_main_BB__117_43;
LEGUP_F_main_BB__117_43:
		next_state = LEGUP_F_main_BB__117_44;
LEGUP_F_main_BB__117_44:
		next_state = LEGUP_F_main_BB_float64_addexit_77;
LEGUP_F_main_BB__120_45:
		next_state = LEGUP_F_main_BB__121_46;
LEGUP_F_main_BB__121_46:
	if ((main_121_122 == 1'd1))
		next_state = LEGUP_F_main_BB__191_68;
	else if ((main_121_122 == 1'd0))
		next_state = LEGUP_F_main_BB__123_47;
LEGUP_F_main_BB__123_47:
	if ((main_123_124 == 1'd1))
		next_state = LEGUP_F_main_BB__158_58;
	else if ((main_123_124 == 1'd0))
		next_state = LEGUP_F_main_BB_float64_addexit_77;
LEGUP_F_main_BB__125_48:
	if ((main_125_126 == 1'd1))
		next_state = LEGUP_F_main_BB__127_49;
	else if ((main_125_126 == 1'd0))
		next_state = LEGUP_F_main_BB__136_53;
LEGUP_F_main_BB__127_49:
	if ((main_127_128 == 1'd1))
		next_state = LEGUP_F_main_BB__131_52;
	else if ((main_127_128 == 1'd0))
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexit1i4ii_50;
LEGUP_F_main_BB__131_52:
		next_state = LEGUP_F_main_BB_float64_addexit_77;
LEGUP_F_main_BB__136_53:
	if ((main_136_142 == 1'd1))
		next_state = LEGUP_F_main_BB_shift64RightJammingexit3ii_57;
	else if ((main_136_142 == 1'd0))
		next_state = LEGUP_F_main_BB__143_54;
LEGUP_F_main_BB__143_54:
	if ((main_143_144 == 1'd1))
		next_state = LEGUP_F_main_BB__145_55;
	else if ((main_143_144 == 1'd0))
		next_state = LEGUP_F_main_BB__154_56;
LEGUP_F_main_BB__145_55:
		next_state = LEGUP_F_main_BB_shift64RightJammingexit3ii_57;
LEGUP_F_main_BB__154_56:
		next_state = LEGUP_F_main_BB_shift64RightJammingexit3ii_57;
LEGUP_F_main_BB__158_58:
		next_state = LEGUP_F_main_BB__195_69;
LEGUP_F_main_BB__15_4:
	if ((main_15_20 == 1'd1))
		next_state = LEGUP_F_main_BB__21_5;
	else if ((main_15_20 == 1'd0))
		next_state = LEGUP_F_main_BB__48_13;
LEGUP_F_main_BB__163_59:
	if ((main_163_164 == 1'd1))
		next_state = LEGUP_F_main_BB__165_60;
	else if ((main_163_164 == 1'd0))
		next_state = LEGUP_F_main_BB__169_63;
LEGUP_F_main_BB__165_60:
	if ((main_165_166 == 1'd1))
		next_state = LEGUP_F_main_BB_float64_addexit_77;
	else if ((main_165_166 == 1'd0))
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexit1iii_61;
LEGUP_F_main_BB__169_63:
	if ((main_169_174 == 1'd1))
		next_state = LEGUP_F_main_BB_shift64RightJammingexitii_67;
	else if ((main_169_174 == 1'd0))
		next_state = LEGUP_F_main_BB__175_64;
LEGUP_F_main_BB__175_64:
	if ((main_175_176 == 1'd1))
		next_state = LEGUP_F_main_BB__177_65;
	else if ((main_175_176 == 1'd0))
		next_state = LEGUP_F_main_BB__187_66;
LEGUP_F_main_BB__177_65:
		next_state = LEGUP_F_main_BB_shift64RightJammingexitii_67;
LEGUP_F_main_BB__187_66:
		next_state = LEGUP_F_main_BB_shift64RightJammingexitii_67;
LEGUP_F_main_BB__191_68:
		next_state = LEGUP_F_main_BB__195_69;
LEGUP_F_main_BB__195_69:
		next_state = LEGUP_F_main_BB__195_70;
LEGUP_F_main_BB__195_70:
	if ((main_195_201 == 1'd1))
		next_state = LEGUP_F_main_BB__202_71;
	else if ((main_195_201 == 1'd0))
		next_state = LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_72;
LEGUP_F_main_BB__1_1:
		next_state = LEGUP_F_main_BB__1_2;
LEGUP_F_main_BB__1_2:
		next_state = LEGUP_F_main_BB__1_3;
LEGUP_F_main_BB__1_3:
	if ((main_1_9 == 1'd1))
		next_state = LEGUP_F_main_BB__15_4;
	else if ((main_1_9 == 1'd0))
		next_state = LEGUP_F_main_BB__103_35;
LEGUP_F_main_BB__202_71:
		next_state = LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_72;
LEGUP_F_main_BB__21_5:
	if ((main_21_22 == 1'd1))
		next_state = LEGUP_F_main_BB__23_6;
	else if ((main_21_22 == 1'd0))
		next_state = LEGUP_F_main_BB__27_9;
LEGUP_F_main_BB__221_80:
	if ((main_221_223 == 1'd1))
		next_state = LEGUP_F_main_BB__224_81;
	else if ((main_221_223 == 1'd0))
		next_state = LEGUP_F_main_BB__226_82;
LEGUP_F_main_BB__224_81:
		next_state = LEGUP_F_main_BB__228_83;
LEGUP_F_main_BB__226_82:
		next_state = LEGUP_F_main_BB__228_83;
LEGUP_F_main_BB__228_83:
		next_state = LEGUP_0;
LEGUP_F_main_BB__23_6:
	if ((main_23_24 == 1'd1))
		next_state = LEGUP_F_main_BB_float64_addexit_77;
	else if ((main_23_24 == 1'd0))
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexit1i10ii_7;
LEGUP_F_main_BB__27_9:
	if ((main_27_32 == 1'd1))
		next_state = LEGUP_F_main_BB_shift64RightJammingexit9ii_29;
	else if ((main_27_32 == 1'd0))
		next_state = LEGUP_F_main_BB__33_10;
LEGUP_F_main_BB__33_10:
	if ((main_33_34 == 1'd1))
		next_state = LEGUP_F_main_BB__35_11;
	else if ((main_33_34 == 1'd0))
		next_state = LEGUP_F_main_BB__45_12;
LEGUP_F_main_BB__35_11:
		next_state = LEGUP_F_main_BB_shift64RightJammingexit9ii_29;
LEGUP_F_main_BB__45_12:
		next_state = LEGUP_F_main_BB_shift64RightJammingexit9ii_29;
LEGUP_F_main_BB__48_13:
	if ((main_48_49 == 1'd1))
		next_state = LEGUP_F_main_BB__50_14;
	else if ((main_48_49 == 1'd0))
		next_state = LEGUP_F_main_BB__80_23;
LEGUP_F_main_BB__50_14:
	if ((main_50_51 == 1'd1))
		next_state = LEGUP_F_main_BB__52_15;
	else if ((main_50_51 == 1'd0))
		next_state = LEGUP_F_main_BB__59_19;
LEGUP_F_main_BB__52_15:
	if ((main_52_53 == 1'd1))
		next_state = LEGUP_F_main_BB__56_18;
	else if ((main_52_53 == 1'd0))
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexit1i1ii_16;
LEGUP_F_main_BB__56_18:
		next_state = LEGUP_F_main_BB_float64_addexit_77;
LEGUP_F_main_BB__59_19:
	if ((main_59_65 == 1'd1))
		next_state = LEGUP_F_main_BB_shift64RightJammingexit9ii_29;
	else if ((main_59_65 == 1'd0))
		next_state = LEGUP_F_main_BB__66_20;
LEGUP_F_main_BB__66_20:
	if ((main_66_67 == 1'd1))
		next_state = LEGUP_F_main_BB__68_21;
	else if ((main_66_67 == 1'd0))
		next_state = LEGUP_F_main_BB__77_22;
LEGUP_F_main_BB__68_21:
		next_state = LEGUP_F_main_BB_shift64RightJammingexit9ii_29;
LEGUP_F_main_BB__77_22:
		next_state = LEGUP_F_main_BB_shift64RightJammingexit9ii_29;
LEGUP_F_main_BB__80_23:
	if ((main_1_11_reg == 32'd2047))
		next_state = LEGUP_F_main_BB__81_24;
	else if ((main_1_11_reg == 32'd0))
		next_state = LEGUP_F_main_BB__86_27;
	else if ((main_1_11_reg != 32'd2047) && (main_1_11_reg != 32'd0))
		next_state = LEGUP_F_main_BB__91_28;
LEGUP_F_main_BB__81_24:
	if ((main_81_83 == 1'd1))
		next_state = LEGUP_F_main_BB_float64_addexit_77;
	else if ((main_81_83 == 1'd0))
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexit1ii4i_25;
LEGUP_F_main_BB__86_27:
		next_state = LEGUP_F_main_BB_float64_addexit_77;
LEGUP_F_main_BB__91_28:
		next_state = LEGUP_F_main_BB__101_32;
LEGUP_F_main_BB_float64_addexit_77:
		next_state = LEGUP_F_main_BB_float64_addexit_78;
LEGUP_F_main_BB_float64_addexit_78:
		next_state = LEGUP_F_main_BB_float64_addexit_79;
LEGUP_F_main_BB_float64_addexit_79:
	if ((main_float64_addexit_exitcond1_reg == 1'd1))
		next_state = LEGUP_F_main_BB__221_80;
	else if ((main_float64_addexit_exitcond1_reg == 1'd0))
		next_state = LEGUP_F_main_BB__1_1;
LEGUP_F_main_BB_float64_is_signaling_nanexit1i10ii_7:
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexit1i10ii_8;
LEGUP_F_main_BB_float64_is_signaling_nanexit1i10ii_8:
		next_state = LEGUP_F_main_BB_float64_addexit_77;
LEGUP_F_main_BB_float64_is_signaling_nanexit1i11ii_39:
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexit1i11ii_40;
LEGUP_F_main_BB_float64_is_signaling_nanexit1i11ii_40:
		next_state = LEGUP_F_main_BB_float64_addexit_77;
LEGUP_F_main_BB_float64_is_signaling_nanexit1i1ii_16:
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexit1i1ii_17;
LEGUP_F_main_BB_float64_is_signaling_nanexit1i1ii_17:
		next_state = LEGUP_F_main_BB_float64_addexit_77;
LEGUP_F_main_BB_float64_is_signaling_nanexit1i4ii_50:
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexit1i4ii_51;
LEGUP_F_main_BB_float64_is_signaling_nanexit1i4ii_51:
		next_state = LEGUP_F_main_BB_float64_addexit_77;
LEGUP_F_main_BB_float64_is_signaling_nanexit1ii4i_25:
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexit1ii4i_26;
LEGUP_F_main_BB_float64_is_signaling_nanexit1ii4i_26:
		next_state = LEGUP_F_main_BB_float64_addexit_77;
LEGUP_F_main_BB_float64_is_signaling_nanexit1iii_61:
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexit1iii_62;
LEGUP_F_main_BB_float64_is_signaling_nanexit1iii_62:
		next_state = LEGUP_F_main_BB_float64_addexit_77;
LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_72:
		next_state = LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_73;
LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_73:
		next_state = LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_74;
LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_74:
		next_state = LEGUP_function_call_75;
LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_76:
		next_state = LEGUP_F_main_BB_float64_addexit_77;
LEGUP_F_main_BB_shift64RightJammingexit3ii_57:
		next_state = LEGUP_F_main_BB__158_58;
LEGUP_F_main_BB_shift64RightJammingexit9ii_29:
		next_state = LEGUP_F_main_BB_shift64RightJammingexit9ii_30;
LEGUP_F_main_BB_shift64RightJammingexit9ii_30:
		next_state = LEGUP_F_main_BB_shift64RightJammingexit9ii_31;
LEGUP_F_main_BB_shift64RightJammingexit9ii_31:
		next_state = LEGUP_F_main_BB__101_32;
LEGUP_F_main_BB_shift64RightJammingexitii_67:
		next_state = LEGUP_F_main_BB__191_68;
LEGUP_function_call_33:
	if ((roundAndPackFloat64_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB__101_34;
LEGUP_function_call_75:
	if ((roundAndPackFloat64_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_76;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* main: %1*/
	/*   %main_result.02 = phi i32 [ 0, %0 ], [ %218, %float64_add.exit ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_1_main_result02 = 32'd0;
	end
	/* main: %1*/
	/*   %main_result.02 = phi i32 [ 0, %0 ], [ %218, %float64_add.exit ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_float64_addexit_79) & (memory_controller_waitrequest == 1'd0)) & (main_float64_addexit_exitcond1_reg == 1'd0))) */ begin
		main_1_main_result02 = main_float64_addexit_218;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %main_result.02 = phi i32 [ 0, %0 ], [ %218, %float64_add.exit ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_1_main_result02_reg <= main_1_main_result02;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_1_main_result02) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_main_result02_reg"); $finish; end
		/* synthesis translate_on */
	end
	/* main: %1*/
	/*   %main_result.02 = phi i32 [ 0, %0 ], [ %218, %float64_add.exit ]*/
	if ((((cur_state == LEGUP_F_main_BB_float64_addexit_79) & (memory_controller_waitrequest == 1'd0)) & (main_float64_addexit_exitcond1_reg == 1'd0))) begin
		main_1_main_result02_reg <= main_1_main_result02;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_1_main_result02) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_main_result02_reg"); $finish; end
		/* synthesis translate_on */
	end
end
always @(*) begin
	/* main: %1*/
	/*   %2 = phi i32 [ 0, %0 ], [ %220, %float64_add.exit ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_1_2 = 32'd0;
	end
	/* main: %1*/
	/*   %2 = phi i32 [ 0, %0 ], [ %220, %float64_add.exit ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_float64_addexit_79) & (memory_controller_waitrequest == 1'd0)) & (main_float64_addexit_exitcond1_reg == 1'd0))) */ begin
		main_1_2 = main_float64_addexit_220_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %2 = phi i32 [ 0, %0 ], [ %220, %float64_add.exit ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_1_2_reg <= main_1_2;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_2_reg"); $finish; end
		/* synthesis translate_on */
	end
	/* main: %1*/
	/*   %2 = phi i32 [ 0, %0 ], [ %220, %float64_add.exit ]*/
	if ((((cur_state == LEGUP_F_main_BB_float64_addexit_79) & (memory_controller_waitrequest == 1'd0)) & (main_float64_addexit_exitcond1_reg == 1'd0))) begin
		main_1_2_reg <= main_1_2;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_2_reg"); $finish; end
		/* synthesis translate_on */
	end
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep = getelementptr [46 x i64]* @z_output, i32 0, i32 %2*/
		main_1_scevgep = (`TAG_g_z_output_a + (8 * main_1_2_reg));
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %scevgep = getelementptr [46 x i64]* @z_output, i32 0, i32 %2*/
	if ((cur_state == LEGUP_F_main_BB__1_1)) begin
		main_1_scevgep_reg <= main_1_scevgep;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_1_scevgep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep_reg"); $finish; end
		/* synthesis translate_on */
	end
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep2 = getelementptr [46 x i64]* @b_input, i32 0, i32 %2*/
		main_1_scevgep2 = (`TAG_g_b_input_a + (8 * main_1_2_reg));
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep3 = getelementptr [46 x i64]* @a_input, i32 0, i32 %2*/
		main_1_scevgep3 = (`TAG_g_a_input_a + (8 * main_1_2_reg));
end
always @(*) begin
	/* main: %1*/
	/*   %3 = load i64* %scevgep3, align 8, !tbaa !1*/
		main_1_3 = memory_controller_out_a[63:0];
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %3 = load i64* %scevgep3, align 8, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		main_1_3_reg <= main_1_3;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_1_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_3_reg"); $finish; end
		/* synthesis translate_on */
	end
end
always @(*) begin
	/* main: %1*/
	/*   %4 = load i64* %scevgep2, align 8, !tbaa !1*/
		main_1_4 = memory_controller_out_b[63:0];
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %4 = load i64* %scevgep2, align 8, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		main_1_4_reg <= main_1_4;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_1_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_4_reg"); $finish; end
		/* synthesis translate_on */
	end
end
always @(*) begin
	/* main: %1*/
	/*   %5 = lshr i64 %3, 63*/
		main_1_5 = (main_1_3 >>> (64'd63 % 64'd64));
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %5 = lshr i64 %3, 63*/
	if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		main_1_5_reg <= main_1_5;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_1_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_5_reg"); $finish; end
		/* synthesis translate_on */
	end
end
always @(*) begin
	/* main: %1*/
	/*   %6 = trunc i64 %5 to i32*/
		main_1_6 = main_1_5[31:0];
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %6 = trunc i64 %5 to i32*/
	if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		main_1_6_reg <= main_1_6;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_1_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_6_reg"); $finish; end
		/* synthesis translate_on */
	end
end
always @(*) begin
	/* main: %1*/
	/*   %7 = lshr i64 %4, 63*/
		main_1_7 = (main_1_4 >>> (64'd63 % 64'd64));
end
always @(*) begin
	/* main: %1*/
	/*   %8 = trunc i64 %7 to i32*/
		main_1_8 = main_1_7[31:0];
end
always @(*) begin
	/* main: %1*/
	/*   %9 = icmp eq i32 %6, %8*/
		main_1_9 = (main_1_6 == main_1_8);
end
always @(*) begin
	/* main: %1*/
	/*   %10 = lshr i64 %3, 52*/
		main_1_10 = (main_1_3 >>> (64'd52 % 64'd64));
end
always @(*) begin
	/* main: %1*/
	/*   %.tr.i.i1.i = trunc i64 %10 to i32*/
		main_1_trii1i = main_1_10[31:0];
end
always @(*) begin
	/* main: %1*/
	/*   %11 = and i32 %.tr.i.i1.i, 2047*/
		main_1_11 = (main_1_trii1i & 32'd2047);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %11 = and i32 %.tr.i.i1.i, 2047*/
	if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		main_1_11_reg <= main_1_11;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_1_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_11_reg"); $finish; end
		/* synthesis translate_on */
	end
end
always @(*) begin
	/* main: %1*/
	/*   %12 = lshr i64 %4, 52*/
		main_1_12 = (main_1_4 >>> (64'd52 % 64'd64));
end
always @(*) begin
	/* main: %1*/
	/*   %.tr.i17.i.i = trunc i64 %12 to i32*/
		main_1_tri17ii = main_1_12[31:0];
end
always @(*) begin
	/* main: %1*/
	/*   %13 = and i32 %.tr.i17.i.i, 2047*/
		main_1_13 = (main_1_tri17ii & 32'd2047);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %13 = and i32 %.tr.i17.i.i, 2047*/
	if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		main_1_13_reg <= main_1_13;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_1_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_13_reg"); $finish; end
		/* synthesis translate_on */
	end
end
always @(*) begin
	/* main: %1*/
	/*   %14 = sub nsw i32 %11, %13*/
		main_1_14 = (main_1_11 - main_1_13);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %14 = sub nsw i32 %11, %13*/
	if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		main_1_14_reg <= main_1_14;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_1_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_14_reg"); $finish; end
		/* synthesis translate_on */
	end
end
always @(*) begin
	/* main: %15*/
	/*   %16 = shl i64 %3, 9*/
		main_15_16 = (main_1_3_reg <<< (64'd9 % 64'd64));
end
always @(*) begin
	/* main: %15*/
	/*   %17 = and i64 %16, 2305843009213693440*/
		main_15_17 = (main_15_16 & 64'd2305843009213693440);
end
always @(posedge clk) begin
	/* main: %15*/
	/*   %17 = and i64 %16, 2305843009213693440*/
	if ((cur_state == LEGUP_F_main_BB__15_4)) begin
		main_15_17_reg <= main_15_17;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_15_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_15_17_reg"); $finish; end
		/* synthesis translate_on */
	end
end
always @(*) begin
	/* main: %15*/
	/*   %18 = shl i64 %4, 9*/
		main_15_18 = (main_1_4_reg <<< (64'd9 % 64'd64));
end
always @(*) begin
	/* main: %15*/
	/*   %19 = and i64 %18, 2305843009213693440*/
		main_15_19 = (main_15_18 & 64'd2305843009213693440);
end
always @(posedge clk) begin
	/* main: %15*/
	/*   %19 = and i64 %18, 2305843009213693440*/
	if ((cur_state == LEGUP_F_main_BB__15_4)) begin
		main_15_19_reg <= main_15_19;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_15_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_15_19_reg"); $finish; end
		/* synthesis translate_on */
	end
end
always @(*) begin
	/* main: %15*/
	/*   %20 = icmp sgt i32 %14, 0*/
		main_15_20 = ($signed(main_1_14_reg) > $signed(32'd0));
end
always @(*) begin
	/* main: %21*/
	/*   %22 = icmp eq i32 %11, 2047*/
		main_21_22 = (main_1_11_reg == 32'd2047);
end
always @(*) begin
	/* main: %23*/
	/*   %24 = icmp eq i64 %17, 0*/
		main_23_24 = (main_15_17_reg == 64'd0);
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i10.i.i*/
	/*   %25 = trunc i64 %4 to i63*/
		main_float64_is_signaling_nanexit1i10ii_25 = main_1_4_reg[62:0];
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i10.i.i*/
	/*   %26 = icmp ugt i63 %25, -4503599627370496*/
		main_float64_is_signaling_nanexit1i10ii_26 = (main_float64_is_signaling_nanexit1i10ii_25 > -63'd4503599627370496);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i10.i.i*/
	/*   %26 = icmp ugt i63 %25, -4503599627370496*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i10ii_7)) begin
		main_float64_is_signaling_nanexit1i10ii_26_reg <= main_float64_is_signaling_nanexit1i10ii_26;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i10ii_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i10ii_26_reg"); $finish; end
		/* synthesis translate_on */
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i10.i.i*/
	/*   %.mux2.v.i14.i.i = select i1 %26, i64 %4, i64 %3*/
		main_float64_is_signaling_nanexit1i10ii_mux2vi14ii = (main_float64_is_signaling_nanexit1i10ii_26_reg ? main_1_4_reg : main_1_3_reg);
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i10.i.i*/
	/*   %.mux2.i15.i.i = or i64 %.mux2.v.i14.i.i, 2251799813685248*/
		main_float64_is_signaling_nanexit1i10ii_mux2i15ii = (main_float64_is_signaling_nanexit1i10ii_mux2vi14ii | 64'd2251799813685248);
end
always @(*) begin
	/* main: %27*/
	/*   %28 = icmp eq i32 %13, 0*/
		main_27_28 = (main_1_13_reg == 32'd0);
end
always @(*) begin
	/* main: %27*/
	/*   %29 = or i64 %19, 2305843009213693952*/
		main_27_29 = (main_15_19_reg | 64'd2305843009213693952);
end
always @(*) begin
	/* main: %27*/
	/*   %30 = select i1 %28, i64 %19, i64 %29*/
		main_27_30 = (main_27_28 ? main_15_19_reg : main_27_29);
end
always @(posedge clk) begin
	/* main: %27*/
	/*   %30 = select i1 %28, i64 %19, i64 %29*/
	if ((cur_state == LEGUP_F_main_BB__27_9)) begin
		main_27_30_reg <= main_27_30;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_27_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_27_30_reg"); $finish; end
		/* synthesis translate_on */
	end
end
always @(*) begin
	/* main: %27*/
	/*   %31 = sext i1 %28 to i32*/
		main_27_31 = $signed(main_27_28);
end
always @(*) begin
	/* main: %27*/
	/*   %expDiff.0.i2.i = add nsw i32 %31, %14*/
		main_27_expDiff0i2i = (main_27_31 + main_1_14_reg);
end
always @(posedge clk) begin
	/* main: %27*/
	/*   %expDiff.0.i2.i = add nsw i32 %31, %14*/
	if ((cur_state == LEGUP_F_main_BB__27_9)) begin
		main_27_expDiff0i2i_reg <= main_27_expDiff0i2i;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_27_expDiff0i2i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_27_expDiff0i2i_reg"); $finish; end
		/* synthesis translate_on */
	end
end
always @(*) begin
	/* main: %27*/
	/*   %32 = icmp eq i32 %expDiff.0.i2.i, 0*/
		main_27_32 = (main_27_expDiff0i2i == 32'd0);
end
always @(*) begin
	/* main: %33*/
	/*   %34 = icmp slt i32 %expDiff.0.i2.i, 64*/
		main_33_34 = ($signed(main_27_expDiff0i2i_reg) < $signed(32'd64));
end
always @(*) begin
	/* main: %35*/
	/*   %36 = zext i32 %expDiff.0.i2.i to i64*/
		main_35_36 = main_27_expDiff0i2i_reg;
end
always @(*) begin
	/* main: %35*/
	/*   %37 = lshr i64 %30, %36*/
		main_35_37 = (main_27_30_reg >>> (main_35_36 % 64'd64));
end
always @(*) begin
	/* main: %35*/
	/*   %38 = sub nsw i32 0, %expDiff.0.i2.i*/
		main_35_38 = (32'd0 - main_27_expDiff0i2i_reg);
end
always @(*) begin
	/* main: %35*/
	/*   %39 = and i32 %38, 63*/
		main_35_39 = (main_35_38 & 32'd63);
end
always @(*) begin
	/* main: %35*/
	/*   %40 = zext i32 %39 to i64*/
		main_35_40 = main_35_39;
end
always @(*) begin
	/* main: %35*/
	/*   %41 = shl i64 %30, %40*/
		main_35_41 = (main_27_30_reg <<< (main_35_40 % 64'd64));
end
always @(*) begin
	/* main: %35*/
	/*   %42 = icmp ne i64 %41, 0*/
		main_35_42 = (main_35_41 != 64'd0);
end
always @(*) begin
	/* main: %35*/
	/*   %43 = zext i1 %42 to i64*/
		main_35_43 = main_35_42;
end
always @(*) begin
	/* main: %35*/
	/*   %44 = or i64 %43, %37*/
		main_35_44 = (main_35_43 | main_35_37);
end
always @(*) begin
	/* main: %45*/
	/*   %46 = icmp ne i64 %30, 0*/
		main_45_46 = (main_27_30_reg != 64'd0);
end
always @(*) begin
	/* main: %45*/
	/*   %47 = zext i1 %46 to i64*/
		main_45_47 = main_45_46;
end
always @(*) begin
	/* main: %48*/
	/*   %49 = icmp slt i32 %14, 0*/
		main_48_49 = ($signed(main_1_14_reg) < $signed(32'd0));
end
always @(*) begin
	/* main: %50*/
	/*   %51 = icmp eq i32 %13, 2047*/
		main_50_51 = (main_1_13_reg == 32'd2047);
end
always @(*) begin
	/* main: %52*/
	/*   %53 = icmp eq i64 %19, 0*/
		main_52_53 = (main_15_19_reg == 64'd0);
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i1.i.i*/
	/*   %54 = trunc i64 %4 to i63*/
		main_float64_is_signaling_nanexit1i1ii_54 = main_1_4_reg[62:0];
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i1.i.i*/
	/*   %55 = icmp ugt i63 %54, -4503599627370496*/
		main_float64_is_signaling_nanexit1i1ii_55 = (main_float64_is_signaling_nanexit1i1ii_54 > -63'd4503599627370496);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i1.i.i*/
	/*   %55 = icmp ugt i63 %54, -4503599627370496*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i1ii_16)) begin
		main_float64_is_signaling_nanexit1i1ii_55_reg <= main_float64_is_signaling_nanexit1i1ii_55;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i1ii_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i1ii_55_reg"); $finish; end
		/* synthesis translate_on */
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i1.i.i*/
	/*   %.mux2.v.i5.i.i = select i1 %55, i64 %4, i64 %3*/
		main_float64_is_signaling_nanexit1i1ii_mux2vi5ii = (main_float64_is_signaling_nanexit1i1ii_55_reg ? main_1_4_reg : main_1_3_reg);
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i1.i.i*/
	/*   %.mux2.i6.i.i = or i64 %.mux2.v.i5.i.i, 2251799813685248*/
		main_float64_is_signaling_nanexit1i1ii_mux2i6ii = (main_float64_is_signaling_nanexit1i1ii_mux2vi5ii | 64'd2251799813685248);
end
always @(*) begin
	/* main: %56*/
	/*   %57 = shl nuw i64 %5, 63*/
		main_56_57 = (main_1_5_reg <<< (64'd63 % 64'd64));
end
always @(*) begin
	/* main: %56*/
	/*   %58 = or i64 %57, 9218868437227405312*/
		main_56_58 = (main_56_57 | 64'd9218868437227405312);
end
always @(*) begin
	/* main: %59*/
	/*   %60 = icmp eq i32 %11, 0*/
		main_59_60 = (main_1_11_reg == 32'd0);
end
always @(*) begin
	/* main: %59*/
	/*   %61 = or i64 %17, 2305843009213693952*/
		main_59_61 = (main_15_17_reg | 64'd2305843009213693952);
end
always @(*) begin
	/* main: %59*/
	/*   %62 = select i1 %60, i64 %17, i64 %61*/
		main_59_62 = (main_59_60 ? main_15_17_reg : main_59_61);
end
always @(posedge clk) begin
	/* main: %59*/
	/*   %62 = select i1 %60, i64 %17, i64 %61*/
	if ((cur_state == LEGUP_F_main_BB__59_19)) begin
		main_59_62_reg <= main_59_62;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_59_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_59_62_reg"); $finish; end
		/* synthesis translate_on */
	end
end
always @(*) begin
	/* main: %59*/
	/*   %63 = zext i1 %60 to i32*/
		main_59_63 = main_59_60;
end
always @(*) begin
	/* main: %59*/
	/*   %expDiff.1.i3.i = add nsw i32 %14, %63*/
		main_59_expDiff1i3i = (main_1_14_reg + main_59_63);
end
always @(posedge clk) begin
	/* main: %59*/
	/*   %expDiff.1.i3.i = add nsw i32 %14, %63*/
	if ((cur_state == LEGUP_F_main_BB__59_19)) begin
		main_59_expDiff1i3i_reg <= main_59_expDiff1i3i;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_59_expDiff1i3i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_59_expDiff1i3i_reg"); $finish; end
		/* synthesis translate_on */
	end
end
always @(*) begin
	/* main: %59*/
	/*   %64 = sub nsw i32 0, %expDiff.1.i3.i*/
		main_59_64 = (32'd0 - main_59_expDiff1i3i);
end
always @(posedge clk) begin
	/* main: %59*/
	/*   %64 = sub nsw i32 0, %expDiff.1.i3.i*/
	if ((cur_state == LEGUP_F_main_BB__59_19)) begin
		main_59_64_reg <= main_59_64;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_59_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_59_64_reg"); $finish; end
		/* synthesis translate_on */
	end
end
always @(*) begin
	/* main: %59*/
	/*   %65 = icmp eq i32 %expDiff.1.i3.i, 0*/
		main_59_65 = (main_59_expDiff1i3i == 32'd0);
end
always @(*) begin
	/* main: %66*/
	/*   %67 = icmp sgt i32 %expDiff.1.i3.i, -64*/
		main_66_67 = ($signed(main_59_expDiff1i3i_reg) > $signed(-32'd64));
end
always @(*) begin
	/* main: %68*/
	/*   %69 = zext i32 %64 to i64*/
		main_68_69 = main_59_64_reg;
end
always @(*) begin
	/* main: %68*/
	/*   %70 = lshr i64 %62, %69*/
		main_68_70 = (main_59_62_reg >>> (main_68_69 % 64'd64));
end
always @(*) begin
	/* main: %68*/
	/*   %71 = and i32 %expDiff.1.i3.i, 63*/
		main_68_71 = (main_59_expDiff1i3i_reg & 32'd63);
end
always @(*) begin
	/* main: %68*/
	/*   %72 = zext i32 %71 to i64*/
		main_68_72 = main_68_71;
end
always @(*) begin
	/* main: %68*/
	/*   %73 = shl i64 %62, %72*/
		main_68_73 = (main_59_62_reg <<< (main_68_72 % 64'd64));
end
always @(*) begin
	/* main: %68*/
	/*   %74 = icmp ne i64 %73, 0*/
		main_68_74 = (main_68_73 != 64'd0);
end
always @(*) begin
	/* main: %68*/
	/*   %75 = zext i1 %74 to i64*/
		main_68_75 = main_68_74;
end
always @(*) begin
	/* main: %68*/
	/*   %76 = or i64 %75, %70*/
		main_68_76 = (main_68_75 | main_68_70);
end
always @(*) begin
	/* main: %77*/
	/*   %78 = icmp ne i64 %62, 0*/
		main_77_78 = (main_59_62_reg != 64'd0);
end
always @(*) begin
	/* main: %77*/
	/*   %79 = zext i1 %78 to i64*/
		main_77_79 = main_77_78;
end
always @(*) begin
	/* main: %81*/
	/*   %82 = or i64 %19, %17*/
		main_81_82 = (main_15_19_reg | main_15_17_reg);
end
always @(*) begin
	/* main: %81*/
	/*   %83 = icmp eq i64 %82, 0*/
		main_81_83 = (main_81_82 == 64'd0);
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i.i4.i*/
	/*   %84 = trunc i64 %4 to i63*/
		main_float64_is_signaling_nanexit1ii4i_84 = main_1_4_reg[62:0];
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i.i4.i*/
	/*   %85 = icmp ugt i63 %84, -4503599627370496*/
		main_float64_is_signaling_nanexit1ii4i_85 = (main_float64_is_signaling_nanexit1ii4i_84 > -63'd4503599627370496);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i.i4.i*/
	/*   %85 = icmp ugt i63 %84, -4503599627370496*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1ii4i_25)) begin
		main_float64_is_signaling_nanexit1ii4i_85_reg <= main_float64_is_signaling_nanexit1ii4i_85;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1ii4i_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1ii4i_85_reg"); $finish; end
		/* synthesis translate_on */
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i.i4.i*/
	/*   %.mux2.v.i.i8.i = select i1 %85, i64 %4, i64 %3*/
		main_float64_is_signaling_nanexit1ii4i_mux2vii8i = (main_float64_is_signaling_nanexit1ii4i_85_reg ? main_1_4_reg : main_1_3_reg);
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i.i4.i*/
	/*   %.mux2.i.i9.i = or i64 %.mux2.v.i.i8.i, 2251799813685248*/
		main_float64_is_signaling_nanexit1ii4i_mux2ii9i = (main_float64_is_signaling_nanexit1ii4i_mux2vii8i | 64'd2251799813685248);
end
always @(*) begin
	/* main: %86*/
	/*   %87 = add nuw nsw i64 %19, %17*/
		main_86_87 = (main_15_19_reg + main_15_17_reg);
end
always @(*) begin
	/* main: %86*/
	/*   %88 = lshr exact i64 %87, 9*/
		main_86_88 = (main_86_87 >>> (64'd9 % 64'd64));
end
always @(*) begin
	/* main: %86*/
	/*   %89 = shl nuw i64 %5, 63*/
		main_86_89 = (main_1_5_reg <<< (64'd63 % 64'd64));
end
always @(*) begin
	/* main: %86*/
	/*   %90 = or i64 %88, %89*/
		main_86_90 = (main_86_88 | main_86_89);
end
always @(*) begin
	/* main: %91*/
	/*   %92 = or i64 %17, 4611686018427387904*/
		main_91_92 = (main_15_17_reg | 64'd4611686018427387904);
end
always @(*) begin
	/* main: %91*/
	/*   %93 = add nuw i64 %92, %19*/
		main_91_93 = (main_91_92 + main_15_19_reg);
end
always @(*) begin
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %94 = phi i64 [ %17, %27 ], [ %17, %35 ], [ %17, %45 ], [ %76, %68 ], [ %79, %77 ], [ %62, %59 ]*/
	if ((((cur_state == LEGUP_F_main_BB__27_9) & (memory_controller_waitrequest == 1'd0)) & (main_27_32 == 1'd1))) begin
		main_shift64RightJammingexit9ii_94 = main_15_17_reg;
	end
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %94 = phi i64 [ %17, %27 ], [ %17, %35 ], [ %17, %45 ], [ %76, %68 ], [ %79, %77 ], [ %62, %59 ]*/
	else if (((cur_state == LEGUP_F_main_BB__35_11) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit9ii_94 = main_15_17_reg;
	end
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %94 = phi i64 [ %17, %27 ], [ %17, %35 ], [ %17, %45 ], [ %76, %68 ], [ %79, %77 ], [ %62, %59 ]*/
	else if (((cur_state == LEGUP_F_main_BB__45_12) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit9ii_94 = main_15_17_reg;
	end
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %94 = phi i64 [ %17, %27 ], [ %17, %35 ], [ %17, %45 ], [ %76, %68 ], [ %79, %77 ], [ %62, %59 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__59_19) & (memory_controller_waitrequest == 1'd0)) & (main_59_65 == 1'd1))) begin
		main_shift64RightJammingexit9ii_94 = main_59_62;
	end
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %94 = phi i64 [ %17, %27 ], [ %17, %35 ], [ %17, %45 ], [ %76, %68 ], [ %79, %77 ], [ %62, %59 ]*/
	else if (((cur_state == LEGUP_F_main_BB__68_21) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit9ii_94 = main_68_76;
	end
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %94 = phi i64 [ %17, %27 ], [ %17, %35 ], [ %17, %45 ], [ %76, %68 ], [ %79, %77 ], [ %62, %59 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__77_22) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_shift64RightJammingexit9ii_94 = main_77_79;
	end
end
always @(posedge clk) begin
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %94 = phi i64 [ %17, %27 ], [ %17, %35 ], [ %17, %45 ], [ %76, %68 ], [ %79, %77 ], [ %62, %59 ]*/
	if ((((cur_state == LEGUP_F_main_BB__27_9) & (memory_controller_waitrequest == 1'd0)) & (main_27_32 == 1'd1))) begin
		main_shift64RightJammingexit9ii_94_reg <= main_shift64RightJammingexit9ii_94;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_shift64RightJammingexit9ii_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9ii_94_reg"); $finish; end
		/* synthesis translate_on */
	end
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %94 = phi i64 [ %17, %27 ], [ %17, %35 ], [ %17, %45 ], [ %76, %68 ], [ %79, %77 ], [ %62, %59 ]*/
	if (((cur_state == LEGUP_F_main_BB__35_11) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit9ii_94_reg <= main_shift64RightJammingexit9ii_94;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_shift64RightJammingexit9ii_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9ii_94_reg"); $finish; end
		/* synthesis translate_on */
	end
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %94 = phi i64 [ %17, %27 ], [ %17, %35 ], [ %17, %45 ], [ %76, %68 ], [ %79, %77 ], [ %62, %59 ]*/
	if (((cur_state == LEGUP_F_main_BB__45_12) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit9ii_94_reg <= main_shift64RightJammingexit9ii_94;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_shift64RightJammingexit9ii_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9ii_94_reg"); $finish; end
		/* synthesis translate_on */
	end
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %94 = phi i64 [ %17, %27 ], [ %17, %35 ], [ %17, %45 ], [ %76, %68 ], [ %79, %77 ], [ %62, %59 ]*/
	if ((((cur_state == LEGUP_F_main_BB__59_19) & (memory_controller_waitrequest == 1'd0)) & (main_59_65 == 1'd1))) begin
		main_shift64RightJammingexit9ii_94_reg <= main_shift64RightJammingexit9ii_94;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_shift64RightJammingexit9ii_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9ii_94_reg"); $finish; end
		/* synthesis translate_on */
	end
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %94 = phi i64 [ %17, %27 ], [ %17, %35 ], [ %17, %45 ], [ %76, %68 ], [ %79, %77 ], [ %62, %59 ]*/
	if (((cur_state == LEGUP_F_main_BB__68_21) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit9ii_94_reg <= main_shift64RightJammingexit9ii_94;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_shift64RightJammingexit9ii_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9ii_94_reg"); $finish; end
		/* synthesis translate_on */
	end
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %94 = phi i64 [ %17, %27 ], [ %17, %35 ], [ %17, %45 ], [ %76, %68 ], [ %79, %77 ], [ %62, %59 ]*/
	if (((cur_state == LEGUP_F_main_BB__77_22) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit9ii_94_reg <= main_shift64RightJammingexit9ii_94;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_shift64RightJammingexit9ii_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9ii_94_reg"); $finish; end
		/* synthesis translate_on */
	end
end
always @(*) begin
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %95 = phi i64 [ %30, %27 ], [ %44, %35 ], [ %47, %45 ], [ %19, %68 ], [ %19, %77 ], [ %19, %59 ]*/
	if ((((cur_state == LEGUP_F_main_BB__27_9) & (memory_controller_waitrequest == 1'd0)) & (main_27_32 == 1'd1))) begin
		main_shift64RightJammingexit9ii_95 = main_27_30;
	end
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %95 = phi i64 [ %30, %27 ], [ %44, %35 ], [ %47, %45 ], [ %19, %68 ], [ %19, %77 ], [ %19, %59 ]*/
	else if (((cur_state == LEGUP_F_main_BB__35_11) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit9ii_95 = main_35_44;
	end
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %95 = phi i64 [ %30, %27 ], [ %44, %35 ], [ %47, %45 ], [ %19, %68 ], [ %19, %77 ], [ %19, %59 ]*/
	else if (((cur_state == LEGUP_F_main_BB__45_12) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit9ii_95 = main_45_47;
	end
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %95 = phi i64 [ %30, %27 ], [ %44, %35 ], [ %47, %45 ], [ %19, %68 ], [ %19, %77 ], [ %19, %59 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__59_19) & (memory_controller_waitrequest == 1'd0)) & (main_59_65 == 1'd1))) begin
		main_shift64RightJammingexit9ii_95 = main_15_19_reg;
	end
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %95 = phi i64 [ %30, %27 ], [ %44, %35 ], [ %47, %45 ], [ %19, %68 ], [ %19, %77 ], [ %19, %59 ]*/
	else if (((cur_state == LEGUP_F_main_BB__68_21) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit9ii_95 = main_15_19_reg;
	end
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %95 = phi i64 [ %30, %27 ], [ %44, %35 ], [ %47, %45 ], [ %19, %68 ], [ %19, %77 ], [ %19, %59 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__77_22) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_shift64RightJammingexit9ii_95 = main_15_19_reg;
	end
end
always @(posedge clk) begin
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %95 = phi i64 [ %30, %27 ], [ %44, %35 ], [ %47, %45 ], [ %19, %68 ], [ %19, %77 ], [ %19, %59 ]*/
	if ((((cur_state == LEGUP_F_main_BB__27_9) & (memory_controller_waitrequest == 1'd0)) & (main_27_32 == 1'd1))) begin
		main_shift64RightJammingexit9ii_95_reg <= main_shift64RightJammingexit9ii_95;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_shift64RightJammingexit9ii_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9ii_95_reg"); $finish; end
		/* synthesis translate_on */
	end
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %95 = phi i64 [ %30, %27 ], [ %44, %35 ], [ %47, %45 ], [ %19, %68 ], [ %19, %77 ], [ %19, %59 ]*/
	if (((cur_state == LEGUP_F_main_BB__35_11) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit9ii_95_reg <= main_shift64RightJammingexit9ii_95;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_shift64RightJammingexit9ii_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9ii_95_reg"); $finish; end
		/* synthesis translate_on */
	end
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %95 = phi i64 [ %30, %27 ], [ %44, %35 ], [ %47, %45 ], [ %19, %68 ], [ %19, %77 ], [ %19, %59 ]*/
	if (((cur_state == LEGUP_F_main_BB__45_12) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit9ii_95_reg <= main_shift64RightJammingexit9ii_95;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_shift64RightJammingexit9ii_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9ii_95_reg"); $finish; end
		/* synthesis translate_on */
	end
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %95 = phi i64 [ %30, %27 ], [ %44, %35 ], [ %47, %45 ], [ %19, %68 ], [ %19, %77 ], [ %19, %59 ]*/
	if ((((cur_state == LEGUP_F_main_BB__59_19) & (memory_controller_waitrequest == 1'd0)) & (main_59_65 == 1'd1))) begin
		main_shift64RightJammingexit9ii_95_reg <= main_shift64RightJammingexit9ii_95;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_shift64RightJammingexit9ii_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9ii_95_reg"); $finish; end
		/* synthesis translate_on */
	end
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %95 = phi i64 [ %30, %27 ], [ %44, %35 ], [ %47, %45 ], [ %19, %68 ], [ %19, %77 ], [ %19, %59 ]*/
	if (((cur_state == LEGUP_F_main_BB__68_21) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit9ii_95_reg <= main_shift64RightJammingexit9ii_95;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_shift64RightJammingexit9ii_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9ii_95_reg"); $finish; end
		/* synthesis translate_on */
	end
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %95 = phi i64 [ %30, %27 ], [ %44, %35 ], [ %47, %45 ], [ %19, %68 ], [ %19, %77 ], [ %19, %59 ]*/
	if (((cur_state == LEGUP_F_main_BB__77_22) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit9ii_95_reg <= main_shift64RightJammingexit9ii_95;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_shift64RightJammingexit9ii_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9ii_95_reg"); $finish; end
		/* synthesis translate_on */
	end
end
always @(*) begin
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %zExp.0.i11.i = phi i32 [ %11, %27 ], [ %11, %35 ], [ %11, %45 ], [ %13, %68 ], [ %13, %77 ], [ %13, %59 ]*/
	if ((((cur_state == LEGUP_F_main_BB__27_9) & (memory_controller_waitrequest == 1'd0)) & (main_27_32 == 1'd1))) begin
		main_shift64RightJammingexit9ii_zExp0i11i = main_1_11_reg;
	end
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %zExp.0.i11.i = phi i32 [ %11, %27 ], [ %11, %35 ], [ %11, %45 ], [ %13, %68 ], [ %13, %77 ], [ %13, %59 ]*/
	else if (((cur_state == LEGUP_F_main_BB__35_11) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit9ii_zExp0i11i = main_1_11_reg;
	end
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %zExp.0.i11.i = phi i32 [ %11, %27 ], [ %11, %35 ], [ %11, %45 ], [ %13, %68 ], [ %13, %77 ], [ %13, %59 ]*/
	else if (((cur_state == LEGUP_F_main_BB__45_12) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit9ii_zExp0i11i = main_1_11_reg;
	end
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %zExp.0.i11.i = phi i32 [ %11, %27 ], [ %11, %35 ], [ %11, %45 ], [ %13, %68 ], [ %13, %77 ], [ %13, %59 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__59_19) & (memory_controller_waitrequest == 1'd0)) & (main_59_65 == 1'd1))) begin
		main_shift64RightJammingexit9ii_zExp0i11i = main_1_13_reg;
	end
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %zExp.0.i11.i = phi i32 [ %11, %27 ], [ %11, %35 ], [ %11, %45 ], [ %13, %68 ], [ %13, %77 ], [ %13, %59 ]*/
	else if (((cur_state == LEGUP_F_main_BB__68_21) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit9ii_zExp0i11i = main_1_13_reg;
	end
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %zExp.0.i11.i = phi i32 [ %11, %27 ], [ %11, %35 ], [ %11, %45 ], [ %13, %68 ], [ %13, %77 ], [ %13, %59 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__77_22) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_shift64RightJammingexit9ii_zExp0i11i = main_1_13_reg;
	end
end
always @(posedge clk) begin
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %zExp.0.i11.i = phi i32 [ %11, %27 ], [ %11, %35 ], [ %11, %45 ], [ %13, %68 ], [ %13, %77 ], [ %13, %59 ]*/
	if ((((cur_state == LEGUP_F_main_BB__27_9) & (memory_controller_waitrequest == 1'd0)) & (main_27_32 == 1'd1))) begin
		main_shift64RightJammingexit9ii_zExp0i11i_reg <= main_shift64RightJammingexit9ii_zExp0i11i;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_shift64RightJammingexit9ii_zExp0i11i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9ii_zExp0i11i_reg"); $finish; end
		/* synthesis translate_on */
	end
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %zExp.0.i11.i = phi i32 [ %11, %27 ], [ %11, %35 ], [ %11, %45 ], [ %13, %68 ], [ %13, %77 ], [ %13, %59 ]*/
	if (((cur_state == LEGUP_F_main_BB__35_11) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit9ii_zExp0i11i_reg <= main_shift64RightJammingexit9ii_zExp0i11i;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_shift64RightJammingexit9ii_zExp0i11i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9ii_zExp0i11i_reg"); $finish; end
		/* synthesis translate_on */
	end
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %zExp.0.i11.i = phi i32 [ %11, %27 ], [ %11, %35 ], [ %11, %45 ], [ %13, %68 ], [ %13, %77 ], [ %13, %59 ]*/
	if (((cur_state == LEGUP_F_main_BB__45_12) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit9ii_zExp0i11i_reg <= main_shift64RightJammingexit9ii_zExp0i11i;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_shift64RightJammingexit9ii_zExp0i11i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9ii_zExp0i11i_reg"); $finish; end
		/* synthesis translate_on */
	end
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %zExp.0.i11.i = phi i32 [ %11, %27 ], [ %11, %35 ], [ %11, %45 ], [ %13, %68 ], [ %13, %77 ], [ %13, %59 ]*/
	if ((((cur_state == LEGUP_F_main_BB__59_19) & (memory_controller_waitrequest == 1'd0)) & (main_59_65 == 1'd1))) begin
		main_shift64RightJammingexit9ii_zExp0i11i_reg <= main_shift64RightJammingexit9ii_zExp0i11i;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_shift64RightJammingexit9ii_zExp0i11i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9ii_zExp0i11i_reg"); $finish; end
		/* synthesis translate_on */
	end
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %zExp.0.i11.i = phi i32 [ %11, %27 ], [ %11, %35 ], [ %11, %45 ], [ %13, %68 ], [ %13, %77 ], [ %13, %59 ]*/
	if (((cur_state == LEGUP_F_main_BB__68_21) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit9ii_zExp0i11i_reg <= main_shift64RightJammingexit9ii_zExp0i11i;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_shift64RightJammingexit9ii_zExp0i11i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9ii_zExp0i11i_reg"); $finish; end
		/* synthesis translate_on */
	end
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %zExp.0.i11.i = phi i32 [ %11, %27 ], [ %11, %35 ], [ %11, %45 ], [ %13, %68 ], [ %13, %77 ], [ %13, %59 ]*/
	if (((cur_state == LEGUP_F_main_BB__77_22) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit9ii_zExp0i11i_reg <= main_shift64RightJammingexit9ii_zExp0i11i;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_shift64RightJammingexit9ii_zExp0i11i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9ii_zExp0i11i_reg"); $finish; end
		/* synthesis translate_on */
	end
end
always @(*) begin
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %96 = or i64 %94, 2305843009213693952*/
		main_shift64RightJammingexit9ii_96 = (main_shift64RightJammingexit9ii_94_reg | 64'd2305843009213693952);
end
always @(*) begin
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %97 = add i64 %96, %95*/
		main_shift64RightJammingexit9ii_97 = (main_shift64RightJammingexit9ii_96 + main_shift64RightJammingexit9ii_95_reg);
end
always @(*) begin
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %98 = shl i64 %97, 1*/
		main_shift64RightJammingexit9ii_98 = (main_shift64RightJammingexit9ii_97 <<< (64'd1 % 64'd64));
end
always @(*) begin
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %99 = icmp slt i64 %98, 0*/
		main_shift64RightJammingexit9ii_99 = ($signed(main_shift64RightJammingexit9ii_98) < $signed(64'd0));
end
always @(posedge clk) begin
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %99 = icmp slt i64 %98, 0*/
	if ((cur_state == LEGUP_F_main_BB_shift64RightJammingexit9ii_29)) begin
		main_shift64RightJammingexit9ii_99_reg <= main_shift64RightJammingexit9ii_99;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_shift64RightJammingexit9ii_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9ii_99_reg"); $finish; end
		/* synthesis translate_on */
	end
end
always @(*) begin
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %not..i.i = xor i1 %99, true*/
		main_shift64RightJammingexit9ii_notii = (main_shift64RightJammingexit9ii_99_reg ^ 1'd1);
end
always @(*) begin
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %100 = sext i1 %not..i.i to i32*/
		main_shift64RightJammingexit9ii_100 = $signed(main_shift64RightJammingexit9ii_notii);
end
always @(posedge clk) begin
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %100 = sext i1 %not..i.i to i32*/
	if ((cur_state == LEGUP_F_main_BB_shift64RightJammingexit9ii_30)) begin
		main_shift64RightJammingexit9ii_100_reg <= main_shift64RightJammingexit9ii_100;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_shift64RightJammingexit9ii_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9ii_100_reg"); $finish; end
		/* synthesis translate_on */
	end
end
always @(*) begin
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %zExp.0..i.i = add nsw i32 %100, %zExp.0.i11.i*/
		main_shift64RightJammingexit9ii_zExp0ii = (main_shift64RightJammingexit9ii_100_reg + main_shift64RightJammingexit9ii_zExp0i11i_reg);
end
always @(*) begin
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %..i.i = select i1 %99, i64 %97, i64 %98*/
		main_shift64RightJammingexit9ii_ii = (main_shift64RightJammingexit9ii_99 ? main_shift64RightJammingexit9ii_97 : main_shift64RightJammingexit9ii_98);
end
always @(posedge clk) begin
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %..i.i = select i1 %99, i64 %97, i64 %98*/
	if ((cur_state == LEGUP_F_main_BB_shift64RightJammingexit9ii_29)) begin
		main_shift64RightJammingexit9ii_ii_reg <= main_shift64RightJammingexit9ii_ii;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_shift64RightJammingexit9ii_ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9ii_ii_reg"); $finish; end
		/* synthesis translate_on */
	end
end
always @(*) begin
	/* main: %101*/
	/*   %zExp.1.i.i = phi i32 [ %11, %91 ], [ %zExp.0..i.i, %shift64RightJamming.exit9.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__91_28) & (memory_controller_waitrequest == 1'd0))) begin
		main_101_zExp1ii = main_1_11_reg;
	end
	/* main: %101*/
	/*   %zExp.1.i.i = phi i32 [ %11, %91 ], [ %zExp.0..i.i, %shift64RightJamming.exit9.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_shift64RightJammingexit9ii_31) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_101_zExp1ii = main_shift64RightJammingexit9ii_zExp0ii;
	end
end
always @(posedge clk) begin
	/* main: %101*/
	/*   %zExp.1.i.i = phi i32 [ %11, %91 ], [ %zExp.0..i.i, %shift64RightJamming.exit9.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__91_28) & (memory_controller_waitrequest == 1'd0))) begin
		main_101_zExp1ii_reg <= main_101_zExp1ii;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_101_zExp1ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_101_zExp1ii_reg"); $finish; end
		/* synthesis translate_on */
	end
	/* main: %101*/
	/*   %zExp.1.i.i = phi i32 [ %11, %91 ], [ %zExp.0..i.i, %shift64RightJamming.exit9.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_shift64RightJammingexit9ii_31) & (memory_controller_waitrequest == 1'd0))) begin
		main_101_zExp1ii_reg <= main_101_zExp1ii;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_101_zExp1ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_101_zExp1ii_reg"); $finish; end
		/* synthesis translate_on */
	end
end
always @(*) begin
	/* main: %101*/
	/*   %zSig.0.i12.i = phi i64 [ %93, %91 ], [ %..i.i, %shift64RightJamming.exit9.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__91_28) & (memory_controller_waitrequest == 1'd0))) begin
		main_101_zSig0i12i = main_91_93;
	end
	/* main: %101*/
	/*   %zSig.0.i12.i = phi i64 [ %93, %91 ], [ %..i.i, %shift64RightJamming.exit9.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_shift64RightJammingexit9ii_31) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_101_zSig0i12i = main_shift64RightJammingexit9ii_ii_reg;
	end
end
always @(posedge clk) begin
	/* main: %101*/
	/*   %zSig.0.i12.i = phi i64 [ %93, %91 ], [ %..i.i, %shift64RightJamming.exit9.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__91_28) & (memory_controller_waitrequest == 1'd0))) begin
		main_101_zSig0i12i_reg <= main_101_zSig0i12i;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_101_zSig0i12i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_101_zSig0i12i_reg"); $finish; end
		/* synthesis translate_on */
	end
	/* main: %101*/
	/*   %zSig.0.i12.i = phi i64 [ %93, %91 ], [ %..i.i, %shift64RightJamming.exit9.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_shift64RightJammingexit9ii_31) & (memory_controller_waitrequest == 1'd0))) begin
		main_101_zSig0i12i_reg <= main_101_zSig0i12i;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_101_zSig0i12i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_101_zSig0i12i_reg"); $finish; end
		/* synthesis translate_on */
	end
end
always @(*) begin
	/* main: %101*/
	/*   %102 = tail call fastcc i64 @roundAndPackFloat64(i32 %6, i32 %zExp.1.i.i, i64 %zSig.0.i12.i) #1*/
		main_101_102 = roundAndPackFloat64_return_val_reg;
end
always @(posedge clk) begin
	/* main: %101*/
	/*   %102 = tail call fastcc i64 @roundAndPackFloat64(i32 %6, i32 %zExp.1.i.i, i64 %zSig.0.i12.i) #1*/
	if ((cur_state == LEGUP_function_call_33)) begin
		main_101_102_reg <= main_101_102;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_101_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_101_102_reg"); $finish; end
		/* synthesis translate_on */
	end
end
always @(*) begin
	/* main: %103*/
	/*   %104 = shl i64 %3, 10*/
		main_103_104 = (main_1_3_reg <<< (64'd10 % 64'd64));
end
always @(*) begin
	/* main: %103*/
	/*   %105 = and i64 %104, 4611686018427386880*/
		main_103_105 = (main_103_104 & 64'd4611686018427386880);
end
always @(posedge clk) begin
	/* main: %103*/
	/*   %105 = and i64 %104, 4611686018427386880*/
	if ((cur_state == LEGUP_F_main_BB__103_35)) begin
		main_103_105_reg <= main_103_105;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_103_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_103_105_reg"); $finish; end
		/* synthesis translate_on */
	end
end
always @(*) begin
	/* main: %103*/
	/*   %106 = shl i64 %4, 10*/
		main_103_106 = (main_1_4_reg <<< (64'd10 % 64'd64));
end
always @(*) begin
	/* main: %103*/
	/*   %107 = and i64 %106, 4611686018427386880*/
		main_103_107 = (main_103_106 & 64'd4611686018427386880);
end
always @(posedge clk) begin
	/* main: %103*/
	/*   %107 = and i64 %106, 4611686018427386880*/
	if ((cur_state == LEGUP_F_main_BB__103_35)) begin
		main_103_107_reg <= main_103_107;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_103_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_103_107_reg"); $finish; end
		/* synthesis translate_on */
	end
end
always @(*) begin
	/* main: %103*/
	/*   %108 = icmp sgt i32 %14, 0*/
		main_103_108 = ($signed(main_1_14_reg) > $signed(32'd0));
end
always @(*) begin
	/* main: %109*/
	/*   %110 = icmp slt i32 %14, 0*/
		main_109_110 = ($signed(main_1_14_reg) < $signed(32'd0));
end
always @(*) begin
	/* main: %112*/
	/*   %113 = or i64 %107, %105*/
		main_112_113 = (main_103_107_reg | main_103_105_reg);
end
always @(*) begin
	/* main: %112*/
	/*   %114 = icmp eq i64 %113, 0*/
		main_112_114 = (main_112_113 == 64'd0);
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i11.i.i*/
	/*   %115 = trunc i64 %4 to i63*/
		main_float64_is_signaling_nanexit1i11ii_115 = main_1_4_reg[62:0];
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i11.i.i*/
	/*   %116 = icmp ugt i63 %115, -4503599627370496*/
		main_float64_is_signaling_nanexit1i11ii_116 = (main_float64_is_signaling_nanexit1i11ii_115 > -63'd4503599627370496);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i11.i.i*/
	/*   %116 = icmp ugt i63 %115, -4503599627370496*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i11ii_39)) begin
		main_float64_is_signaling_nanexit1i11ii_116_reg <= main_float64_is_signaling_nanexit1i11ii_116;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i11ii_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i11ii_116_reg"); $finish; end
		/* synthesis translate_on */
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i11.i.i*/
	/*   %.mux2.v.i15.i.i = select i1 %116, i64 %4, i64 %3*/
		main_float64_is_signaling_nanexit1i11ii_mux2vi15ii = (main_float64_is_signaling_nanexit1i11ii_116_reg ? main_1_4_reg : main_1_3_reg);
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i11.i.i*/
	/*   %.mux2.i16.i.i = or i64 %.mux2.v.i15.i.i, 2251799813685248*/
		main_float64_is_signaling_nanexit1i11ii_mux2i16ii = (main_float64_is_signaling_nanexit1i11ii_mux2vi15ii | 64'd2251799813685248);
end
always @(*) begin
	/* main: %117*/
	/*   %118 = load i32* @float_exception_flags, align 4, !tbaa !5*/
		main_117_118 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %117*/
	/*   %119 = or i32 %118, 16*/
		main_117_119 = (main_117_118 | 32'd16);
end
always @(*) begin
	/* main: %121*/
	/*   %aExp.0.i.i = phi i32 [ 1, %120 ], [ %11, %111 ]*/
	if (((((cur_state == LEGUP_F_main_BB__111_37) & (memory_controller_waitrequest == 1'd0)) & (main_1_11_reg != 32'd2047)) & (main_1_11_reg != 32'd0))) begin
		main_121_aExp0ii = main_1_11_reg;
	end
	/* main: %121*/
	/*   %aExp.0.i.i = phi i32 [ 1, %120 ], [ %11, %111 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__120_45) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_121_aExp0ii = 32'd1;
	end
end
always @(posedge clk) begin
	/* main: %121*/
	/*   %aExp.0.i.i = phi i32 [ 1, %120 ], [ %11, %111 ]*/
	if (((((cur_state == LEGUP_F_main_BB__111_37) & (memory_controller_waitrequest == 1'd0)) & (main_1_11_reg != 32'd2047)) & (main_1_11_reg != 32'd0))) begin
		main_121_aExp0ii_reg <= main_121_aExp0ii;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_121_aExp0ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_121_aExp0ii_reg"); $finish; end
		/* synthesis translate_on */
	end
	/* main: %121*/
	/*   %aExp.0.i.i = phi i32 [ 1, %120 ], [ %11, %111 ]*/
	if (((cur_state == LEGUP_F_main_BB__120_45) & (memory_controller_waitrequest == 1'd0))) begin
		main_121_aExp0ii_reg <= main_121_aExp0ii;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_121_aExp0ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_121_aExp0ii_reg"); $finish; end
		/* synthesis translate_on */
	end
end
always @(*) begin
	/* main: %121*/
	/*   %bExp.0.i.i = phi i32 [ 1, %120 ], [ %13, %111 ]*/
	if (((((cur_state == LEGUP_F_main_BB__111_37) & (memory_controller_waitrequest == 1'd0)) & (main_1_11_reg != 32'd2047)) & (main_1_11_reg != 32'd0))) begin
		main_121_bExp0ii = main_1_13_reg;
	end
	/* main: %121*/
	/*   %bExp.0.i.i = phi i32 [ 1, %120 ], [ %13, %111 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__120_45) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_121_bExp0ii = 32'd1;
	end
end
always @(posedge clk) begin
	/* main: %121*/
	/*   %bExp.0.i.i = phi i32 [ 1, %120 ], [ %13, %111 ]*/
	if (((((cur_state == LEGUP_F_main_BB__111_37) & (memory_controller_waitrequest == 1'd0)) & (main_1_11_reg != 32'd2047)) & (main_1_11_reg != 32'd0))) begin
		main_121_bExp0ii_reg <= main_121_bExp0ii;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_121_bExp0ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_121_bExp0ii_reg"); $finish; end
		/* synthesis translate_on */
	end
	/* main: %121*/
	/*   %bExp.0.i.i = phi i32 [ 1, %120 ], [ %13, %111 ]*/
	if (((cur_state == LEGUP_F_main_BB__120_45) & (memory_controller_waitrequest == 1'd0))) begin
		main_121_bExp0ii_reg <= main_121_bExp0ii;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_121_bExp0ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_121_bExp0ii_reg"); $finish; end
		/* synthesis translate_on */
	end
end
always @(*) begin
	/* main: %121*/
	/*   %122 = icmp ult i64 %107, %105*/
		main_121_122 = (main_103_107_reg < main_103_105_reg);
end
always @(*) begin
	/* main: %123*/
	/*   %124 = icmp ult i64 %105, %107*/
		main_123_124 = (main_103_105_reg < main_103_107_reg);
end
always @(*) begin
	/* main: %125*/
	/*   %126 = icmp eq i32 %13, 2047*/
		main_125_126 = (main_1_13_reg == 32'd2047);
end
always @(*) begin
	/* main: %127*/
	/*   %128 = icmp eq i64 %107, 0*/
		main_127_128 = (main_103_107_reg == 64'd0);
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i4.i.i*/
	/*   %129 = trunc i64 %4 to i63*/
		main_float64_is_signaling_nanexit1i4ii_129 = main_1_4_reg[62:0];
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i4.i.i*/
	/*   %130 = icmp ugt i63 %129, -4503599627370496*/
		main_float64_is_signaling_nanexit1i4ii_130 = (main_float64_is_signaling_nanexit1i4ii_129 > -63'd4503599627370496);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i4.i.i*/
	/*   %130 = icmp ugt i63 %129, -4503599627370496*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i4ii_50)) begin
		main_float64_is_signaling_nanexit1i4ii_130_reg <= main_float64_is_signaling_nanexit1i4ii_130;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i4ii_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i4ii_130_reg"); $finish; end
		/* synthesis translate_on */
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i4.i.i*/
	/*   %.mux2.v.i8.i.i = select i1 %130, i64 %4, i64 %3*/
		main_float64_is_signaling_nanexit1i4ii_mux2vi8ii = (main_float64_is_signaling_nanexit1i4ii_130_reg ? main_1_4_reg : main_1_3_reg);
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i4.i.i*/
	/*   %.mux2.i9.i.i = or i64 %.mux2.v.i8.i.i, 2251799813685248*/
		main_float64_is_signaling_nanexit1i4ii_mux2i9ii = (main_float64_is_signaling_nanexit1i4ii_mux2vi8ii | 64'd2251799813685248);
end
always @(*) begin
	/* main: %131*/
	/*   %132 = xor i32 %6, 1*/
		main_131_132 = (main_1_6_reg ^ 32'd1);
end
always @(*) begin
	/* main: %131*/
	/*   %133 = zext i32 %132 to i64*/
		main_131_133 = main_131_132;
end
always @(*) begin
	/* main: %131*/
	/*   %134 = shl nuw i64 %133, 63*/
		main_131_134 = (main_131_133 <<< (64'd63 % 64'd64));
end
always @(*) begin
	/* main: %131*/
	/*   %135 = or i64 %134, 9218868437227405312*/
		main_131_135 = (main_131_134 | 64'd9218868437227405312);
end
always @(*) begin
	/* main: %136*/
	/*   %137 = icmp eq i32 %11, 0*/
		main_136_137 = (main_1_11_reg == 32'd0);
end
always @(*) begin
	/* main: %136*/
	/*   %138 = or i64 %105, 4611686018427387904*/
		main_136_138 = (main_103_105_reg | 64'd4611686018427387904);
end
always @(*) begin
	/* main: %136*/
	/*   %139 = select i1 %137, i64 %105, i64 %138*/
		main_136_139 = (main_136_137 ? main_103_105_reg : main_136_138);
end
always @(posedge clk) begin
	/* main: %136*/
	/*   %139 = select i1 %137, i64 %105, i64 %138*/
	if ((cur_state == LEGUP_F_main_BB__136_53)) begin
		main_136_139_reg <= main_136_139;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_136_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_136_139_reg"); $finish; end
		/* synthesis translate_on */
	end
end
always @(*) begin
	/* main: %136*/
	/*   %140 = zext i1 %137 to i32*/
		main_136_140 = main_136_137;
end
always @(*) begin
	/* main: %136*/
	/*   %expDiff.0.i.i = add nsw i32 %14, %140*/
		main_136_expDiff0ii = (main_1_14_reg + main_136_140);
end
always @(posedge clk) begin
	/* main: %136*/
	/*   %expDiff.0.i.i = add nsw i32 %14, %140*/
	if ((cur_state == LEGUP_F_main_BB__136_53)) begin
		main_136_expDiff0ii_reg <= main_136_expDiff0ii;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_136_expDiff0ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_136_expDiff0ii_reg"); $finish; end
		/* synthesis translate_on */
	end
end
always @(*) begin
	/* main: %136*/
	/*   %141 = sub nsw i32 0, %expDiff.0.i.i*/
		main_136_141 = (32'd0 - main_136_expDiff0ii);
end
always @(posedge clk) begin
	/* main: %136*/
	/*   %141 = sub nsw i32 0, %expDiff.0.i.i*/
	if ((cur_state == LEGUP_F_main_BB__136_53)) begin
		main_136_141_reg <= main_136_141;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_136_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_136_141_reg"); $finish; end
		/* synthesis translate_on */
	end
end
always @(*) begin
	/* main: %136*/
	/*   %142 = icmp eq i32 %expDiff.0.i.i, 0*/
		main_136_142 = (main_136_expDiff0ii == 32'd0);
end
always @(*) begin
	/* main: %143*/
	/*   %144 = icmp sgt i32 %expDiff.0.i.i, -64*/
		main_143_144 = ($signed(main_136_expDiff0ii_reg) > $signed(-32'd64));
end
always @(*) begin
	/* main: %145*/
	/*   %146 = zext i32 %141 to i64*/
		main_145_146 = main_136_141_reg;
end
always @(*) begin
	/* main: %145*/
	/*   %147 = lshr i64 %139, %146*/
		main_145_147 = (main_136_139_reg >>> (main_145_146 % 64'd64));
end
always @(*) begin
	/* main: %145*/
	/*   %148 = and i32 %expDiff.0.i.i, 63*/
		main_145_148 = (main_136_expDiff0ii_reg & 32'd63);
end
always @(*) begin
	/* main: %145*/
	/*   %149 = zext i32 %148 to i64*/
		main_145_149 = main_145_148;
end
always @(*) begin
	/* main: %145*/
	/*   %150 = shl i64 %139, %149*/
		main_145_150 = (main_136_139_reg <<< (main_145_149 % 64'd64));
end
always @(*) begin
	/* main: %145*/
	/*   %151 = icmp ne i64 %150, 0*/
		main_145_151 = (main_145_150 != 64'd0);
end
always @(*) begin
	/* main: %145*/
	/*   %152 = zext i1 %151 to i64*/
		main_145_152 = main_145_151;
end
always @(*) begin
	/* main: %145*/
	/*   %153 = or i64 %152, %147*/
		main_145_153 = (main_145_152 | main_145_147);
end
always @(*) begin
	/* main: %154*/
	/*   %155 = icmp ne i64 %139, 0*/
		main_154_155 = (main_136_139_reg != 64'd0);
end
always @(*) begin
	/* main: %154*/
	/*   %156 = zext i1 %155 to i64*/
		main_154_156 = main_154_155;
end
always @(*) begin
	/* main: %shift64RightJamming.exit3.i.i*/
	/*   %z.0.i2.i.i = phi i64 [ %153, %145 ], [ %156, %154 ], [ %139, %136 ]*/
	if ((((cur_state == LEGUP_F_main_BB__136_53) & (memory_controller_waitrequest == 1'd0)) & (main_136_142 == 1'd1))) begin
		main_shift64RightJammingexit3ii_z0i2ii = main_136_139;
	end
	/* main: %shift64RightJamming.exit3.i.i*/
	/*   %z.0.i2.i.i = phi i64 [ %153, %145 ], [ %156, %154 ], [ %139, %136 ]*/
	else if (((cur_state == LEGUP_F_main_BB__145_55) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit3ii_z0i2ii = main_145_153;
	end
	/* main: %shift64RightJamming.exit3.i.i*/
	/*   %z.0.i2.i.i = phi i64 [ %153, %145 ], [ %156, %154 ], [ %139, %136 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__154_56) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_shift64RightJammingexit3ii_z0i2ii = main_154_156;
	end
end
always @(posedge clk) begin
	/* main: %shift64RightJamming.exit3.i.i*/
	/*   %z.0.i2.i.i = phi i64 [ %153, %145 ], [ %156, %154 ], [ %139, %136 ]*/
	if ((((cur_state == LEGUP_F_main_BB__136_53) & (memory_controller_waitrequest == 1'd0)) & (main_136_142 == 1'd1))) begin
		main_shift64RightJammingexit3ii_z0i2ii_reg <= main_shift64RightJammingexit3ii_z0i2ii;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_shift64RightJammingexit3ii_z0i2ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit3ii_z0i2ii_reg"); $finish; end
		/* synthesis translate_on */
	end
	/* main: %shift64RightJamming.exit3.i.i*/
	/*   %z.0.i2.i.i = phi i64 [ %153, %145 ], [ %156, %154 ], [ %139, %136 ]*/
	if (((cur_state == LEGUP_F_main_BB__145_55) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit3ii_z0i2ii_reg <= main_shift64RightJammingexit3ii_z0i2ii;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_shift64RightJammingexit3ii_z0i2ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit3ii_z0i2ii_reg"); $finish; end
		/* synthesis translate_on */
	end
	/* main: %shift64RightJamming.exit3.i.i*/
	/*   %z.0.i2.i.i = phi i64 [ %153, %145 ], [ %156, %154 ], [ %139, %136 ]*/
	if (((cur_state == LEGUP_F_main_BB__154_56) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit3ii_z0i2ii_reg <= main_shift64RightJammingexit3ii_z0i2ii;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_shift64RightJammingexit3ii_z0i2ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit3ii_z0i2ii_reg"); $finish; end
		/* synthesis translate_on */
	end
end
always @(*) begin
	/* main: %shift64RightJamming.exit3.i.i*/
	/*   %157 = or i64 %107, 4611686018427387904*/
		main_shift64RightJammingexit3ii_157 = (main_103_107_reg | 64'd4611686018427387904);
end
always @(*) begin
	/* main: %158*/
	/*   %159 = phi i64 [ %z.0.i2.i.i, %shift64RightJamming.exit3.i.i ], [ %105, %123 ]*/
	if ((((cur_state == LEGUP_F_main_BB__123_47) & (memory_controller_waitrequest == 1'd0)) & (main_123_124 == 1'd1))) begin
		main_158_159 = main_103_105_reg;
	end
	/* main: %158*/
	/*   %159 = phi i64 [ %z.0.i2.i.i, %shift64RightJamming.exit3.i.i ], [ %105, %123 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_shift64RightJammingexit3ii_57) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_158_159 = main_shift64RightJammingexit3ii_z0i2ii_reg;
	end
end
always @(posedge clk) begin
	/* main: %158*/
	/*   %159 = phi i64 [ %z.0.i2.i.i, %shift64RightJamming.exit3.i.i ], [ %105, %123 ]*/
	if ((((cur_state == LEGUP_F_main_BB__123_47) & (memory_controller_waitrequest == 1'd0)) & (main_123_124 == 1'd1))) begin
		main_158_159_reg <= main_158_159;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_158_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_158_159_reg"); $finish; end
		/* synthesis translate_on */
	end
	/* main: %158*/
	/*   %159 = phi i64 [ %z.0.i2.i.i, %shift64RightJamming.exit3.i.i ], [ %105, %123 ]*/
	if (((cur_state == LEGUP_F_main_BB_shift64RightJammingexit3ii_57) & (memory_controller_waitrequest == 1'd0))) begin
		main_158_159_reg <= main_158_159;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_158_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_158_159_reg"); $finish; end
		/* synthesis translate_on */
	end
end
always @(*) begin
	/* main: %158*/
	/*   %160 = phi i64 [ %157, %shift64RightJamming.exit3.i.i ], [ %107, %123 ]*/
	if ((((cur_state == LEGUP_F_main_BB__123_47) & (memory_controller_waitrequest == 1'd0)) & (main_123_124 == 1'd1))) begin
		main_158_160 = main_103_107_reg;
	end
	/* main: %158*/
	/*   %160 = phi i64 [ %157, %shift64RightJamming.exit3.i.i ], [ %107, %123 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_shift64RightJammingexit3ii_57) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_158_160 = main_shift64RightJammingexit3ii_157;
	end
end
always @(posedge clk) begin
	/* main: %158*/
	/*   %160 = phi i64 [ %157, %shift64RightJamming.exit3.i.i ], [ %107, %123 ]*/
	if ((((cur_state == LEGUP_F_main_BB__123_47) & (memory_controller_waitrequest == 1'd0)) & (main_123_124 == 1'd1))) begin
		main_158_160_reg <= main_158_160;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_158_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_158_160_reg"); $finish; end
		/* synthesis translate_on */
	end
	/* main: %158*/
	/*   %160 = phi i64 [ %157, %shift64RightJamming.exit3.i.i ], [ %107, %123 ]*/
	if (((cur_state == LEGUP_F_main_BB_shift64RightJammingexit3ii_57) & (memory_controller_waitrequest == 1'd0))) begin
		main_158_160_reg <= main_158_160;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_158_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_158_160_reg"); $finish; end
		/* synthesis translate_on */
	end
end
always @(*) begin
	/* main: %158*/
	/*   %bExp.1.i.i = phi i32 [ %13, %shift64RightJamming.exit3.i.i ], [ %bExp.0.i.i, %123 ]*/
	if ((((cur_state == LEGUP_F_main_BB__123_47) & (memory_controller_waitrequest == 1'd0)) & (main_123_124 == 1'd1))) begin
		main_158_bExp1ii = main_121_bExp0ii_reg;
	end
	/* main: %158*/
	/*   %bExp.1.i.i = phi i32 [ %13, %shift64RightJamming.exit3.i.i ], [ %bExp.0.i.i, %123 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_shift64RightJammingexit3ii_57) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_158_bExp1ii = main_1_13_reg;
	end
end
always @(posedge clk) begin
	/* main: %158*/
	/*   %bExp.1.i.i = phi i32 [ %13, %shift64RightJamming.exit3.i.i ], [ %bExp.0.i.i, %123 ]*/
	if ((((cur_state == LEGUP_F_main_BB__123_47) & (memory_controller_waitrequest == 1'd0)) & (main_123_124 == 1'd1))) begin
		main_158_bExp1ii_reg <= main_158_bExp1ii;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_158_bExp1ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_158_bExp1ii_reg"); $finish; end
		/* synthesis translate_on */
	end
	/* main: %158*/
	/*   %bExp.1.i.i = phi i32 [ %13, %shift64RightJamming.exit3.i.i ], [ %bExp.0.i.i, %123 ]*/
	if (((cur_state == LEGUP_F_main_BB_shift64RightJammingexit3ii_57) & (memory_controller_waitrequest == 1'd0))) begin
		main_158_bExp1ii_reg <= main_158_bExp1ii;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_158_bExp1ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_158_bExp1ii_reg"); $finish; end
		/* synthesis translate_on */
	end
end
always @(*) begin
	/* main: %158*/
	/*   %161 = sub i64 %160, %159*/
		main_158_161 = (main_158_160_reg - main_158_159_reg);
end
always @(*) begin
	/* main: %158*/
	/*   %162 = xor i32 %6, 1*/
		main_158_162 = (main_1_6_reg ^ 32'd1);
end
always @(*) begin
	/* main: %163*/
	/*   %164 = icmp eq i32 %11, 2047*/
		main_163_164 = (main_1_11_reg == 32'd2047);
end
always @(*) begin
	/* main: %165*/
	/*   %166 = icmp eq i64 %105, 0*/
		main_165_166 = (main_103_105_reg == 64'd0);
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i.i.i*/
	/*   %167 = trunc i64 %4 to i63*/
		main_float64_is_signaling_nanexit1iii_167 = main_1_4_reg[62:0];
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i.i.i*/
	/*   %168 = icmp ugt i63 %167, -4503599627370496*/
		main_float64_is_signaling_nanexit1iii_168 = (main_float64_is_signaling_nanexit1iii_167 > -63'd4503599627370496);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i.i.i*/
	/*   %168 = icmp ugt i63 %167, -4503599627370496*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1iii_61)) begin
		main_float64_is_signaling_nanexit1iii_168_reg <= main_float64_is_signaling_nanexit1iii_168;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1iii_168) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1iii_168_reg"); $finish; end
		/* synthesis translate_on */
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i.i.i*/
	/*   %.mux2.v.i.i.i = select i1 %168, i64 %4, i64 %3*/
		main_float64_is_signaling_nanexit1iii_mux2viii = (main_float64_is_signaling_nanexit1iii_168_reg ? main_1_4_reg : main_1_3_reg);
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i.i.i*/
	/*   %.mux2.i.i.i = or i64 %.mux2.v.i.i.i, 2251799813685248*/
		main_float64_is_signaling_nanexit1iii_mux2iii = (main_float64_is_signaling_nanexit1iii_mux2viii | 64'd2251799813685248);
end
always @(*) begin
	/* main: %169*/
	/*   %170 = icmp eq i32 %13, 0*/
		main_169_170 = (main_1_13_reg == 32'd0);
end
always @(*) begin
	/* main: %169*/
	/*   %171 = or i64 %107, 4611686018427387904*/
		main_169_171 = (main_103_107_reg | 64'd4611686018427387904);
end
always @(*) begin
	/* main: %169*/
	/*   %172 = select i1 %170, i64 %107, i64 %171*/
		main_169_172 = (main_169_170 ? main_103_107_reg : main_169_171);
end
always @(posedge clk) begin
	/* main: %169*/
	/*   %172 = select i1 %170, i64 %107, i64 %171*/
	if ((cur_state == LEGUP_F_main_BB__169_63)) begin
		main_169_172_reg <= main_169_172;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_169_172) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_169_172_reg"); $finish; end
		/* synthesis translate_on */
	end
end
always @(*) begin
	/* main: %169*/
	/*   %173 = sext i1 %170 to i32*/
		main_169_173 = $signed(main_169_170);
end
always @(*) begin
	/* main: %169*/
	/*   %expDiff.1.i.i = add nsw i32 %173, %14*/
		main_169_expDiff1ii = (main_169_173 + main_1_14_reg);
end
always @(posedge clk) begin
	/* main: %169*/
	/*   %expDiff.1.i.i = add nsw i32 %173, %14*/
	if ((cur_state == LEGUP_F_main_BB__169_63)) begin
		main_169_expDiff1ii_reg <= main_169_expDiff1ii;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_169_expDiff1ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_169_expDiff1ii_reg"); $finish; end
		/* synthesis translate_on */
	end
end
always @(*) begin
	/* main: %169*/
	/*   %174 = icmp eq i32 %expDiff.1.i.i, 0*/
		main_169_174 = (main_169_expDiff1ii == 32'd0);
end
always @(*) begin
	/* main: %175*/
	/*   %176 = icmp slt i32 %expDiff.1.i.i, 64*/
		main_175_176 = ($signed(main_169_expDiff1ii_reg) < $signed(32'd64));
end
always @(*) begin
	/* main: %177*/
	/*   %178 = zext i32 %expDiff.1.i.i to i64*/
		main_177_178 = main_169_expDiff1ii_reg;
end
always @(*) begin
	/* main: %177*/
	/*   %179 = lshr i64 %172, %178*/
		main_177_179 = (main_169_172_reg >>> (main_177_178 % 64'd64));
end
always @(*) begin
	/* main: %177*/
	/*   %180 = sub nsw i32 0, %expDiff.1.i.i*/
		main_177_180 = (32'd0 - main_169_expDiff1ii_reg);
end
always @(*) begin
	/* main: %177*/
	/*   %181 = and i32 %180, 63*/
		main_177_181 = (main_177_180 & 32'd63);
end
always @(*) begin
	/* main: %177*/
	/*   %182 = zext i32 %181 to i64*/
		main_177_182 = main_177_181;
end
always @(*) begin
	/* main: %177*/
	/*   %183 = shl i64 %172, %182*/
		main_177_183 = (main_169_172_reg <<< (main_177_182 % 64'd64));
end
always @(*) begin
	/* main: %177*/
	/*   %184 = icmp ne i64 %183, 0*/
		main_177_184 = (main_177_183 != 64'd0);
end
always @(*) begin
	/* main: %177*/
	/*   %185 = zext i1 %184 to i64*/
		main_177_185 = main_177_184;
end
always @(*) begin
	/* main: %177*/
	/*   %186 = or i64 %185, %179*/
		main_177_186 = (main_177_185 | main_177_179);
end
always @(*) begin
	/* main: %187*/
	/*   %188 = icmp ne i64 %172, 0*/
		main_187_188 = (main_169_172_reg != 64'd0);
end
always @(*) begin
	/* main: %187*/
	/*   %189 = zext i1 %188 to i64*/
		main_187_189 = main_187_188;
end
always @(*) begin
	/* main: %shift64RightJamming.exit.i.i*/
	/*   %z.0.i.i.i = phi i64 [ %186, %177 ], [ %189, %187 ], [ %172, %169 ]*/
	if ((((cur_state == LEGUP_F_main_BB__169_63) & (memory_controller_waitrequest == 1'd0)) & (main_169_174 == 1'd1))) begin
		main_shift64RightJammingexitii_z0iii = main_169_172;
	end
	/* main: %shift64RightJamming.exit.i.i*/
	/*   %z.0.i.i.i = phi i64 [ %186, %177 ], [ %189, %187 ], [ %172, %169 ]*/
	else if (((cur_state == LEGUP_F_main_BB__177_65) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexitii_z0iii = main_177_186;
	end
	/* main: %shift64RightJamming.exit.i.i*/
	/*   %z.0.i.i.i = phi i64 [ %186, %177 ], [ %189, %187 ], [ %172, %169 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__187_66) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_shift64RightJammingexitii_z0iii = main_187_189;
	end
end
always @(posedge clk) begin
	/* main: %shift64RightJamming.exit.i.i*/
	/*   %z.0.i.i.i = phi i64 [ %186, %177 ], [ %189, %187 ], [ %172, %169 ]*/
	if ((((cur_state == LEGUP_F_main_BB__169_63) & (memory_controller_waitrequest == 1'd0)) & (main_169_174 == 1'd1))) begin
		main_shift64RightJammingexitii_z0iii_reg <= main_shift64RightJammingexitii_z0iii;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_shift64RightJammingexitii_z0iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexitii_z0iii_reg"); $finish; end
		/* synthesis translate_on */
	end
	/* main: %shift64RightJamming.exit.i.i*/
	/*   %z.0.i.i.i = phi i64 [ %186, %177 ], [ %189, %187 ], [ %172, %169 ]*/
	if (((cur_state == LEGUP_F_main_BB__177_65) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexitii_z0iii_reg <= main_shift64RightJammingexitii_z0iii;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_shift64RightJammingexitii_z0iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexitii_z0iii_reg"); $finish; end
		/* synthesis translate_on */
	end
	/* main: %shift64RightJamming.exit.i.i*/
	/*   %z.0.i.i.i = phi i64 [ %186, %177 ], [ %189, %187 ], [ %172, %169 ]*/
	if (((cur_state == LEGUP_F_main_BB__187_66) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexitii_z0iii_reg <= main_shift64RightJammingexitii_z0iii;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_shift64RightJammingexitii_z0iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexitii_z0iii_reg"); $finish; end
		/* synthesis translate_on */
	end
end
always @(*) begin
	/* main: %shift64RightJamming.exit.i.i*/
	/*   %190 = or i64 %105, 4611686018427387904*/
		main_shift64RightJammingexitii_190 = (main_103_105_reg | 64'd4611686018427387904);
end
always @(*) begin
	/* main: %191*/
	/*   %192 = phi i64 [ %190, %shift64RightJamming.exit.i.i ], [ %105, %121 ]*/
	if ((((cur_state == LEGUP_F_main_BB__121_46) & (memory_controller_waitrequest == 1'd0)) & (main_121_122 == 1'd1))) begin
		main_191_192 = main_103_105_reg;
	end
	/* main: %191*/
	/*   %192 = phi i64 [ %190, %shift64RightJamming.exit.i.i ], [ %105, %121 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_shift64RightJammingexitii_67) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_191_192 = main_shift64RightJammingexitii_190;
	end
end
always @(posedge clk) begin
	/* main: %191*/
	/*   %192 = phi i64 [ %190, %shift64RightJamming.exit.i.i ], [ %105, %121 ]*/
	if ((((cur_state == LEGUP_F_main_BB__121_46) & (memory_controller_waitrequest == 1'd0)) & (main_121_122 == 1'd1))) begin
		main_191_192_reg <= main_191_192;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_191_192) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_191_192_reg"); $finish; end
		/* synthesis translate_on */
	end
	/* main: %191*/
	/*   %192 = phi i64 [ %190, %shift64RightJamming.exit.i.i ], [ %105, %121 ]*/
	if (((cur_state == LEGUP_F_main_BB_shift64RightJammingexitii_67) & (memory_controller_waitrequest == 1'd0))) begin
		main_191_192_reg <= main_191_192;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_191_192) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_191_192_reg"); $finish; end
		/* synthesis translate_on */
	end
end
always @(*) begin
	/* main: %191*/
	/*   %193 = phi i64 [ %z.0.i.i.i, %shift64RightJamming.exit.i.i ], [ %107, %121 ]*/
	if ((((cur_state == LEGUP_F_main_BB__121_46) & (memory_controller_waitrequest == 1'd0)) & (main_121_122 == 1'd1))) begin
		main_191_193 = main_103_107_reg;
	end
	/* main: %191*/
	/*   %193 = phi i64 [ %z.0.i.i.i, %shift64RightJamming.exit.i.i ], [ %107, %121 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_shift64RightJammingexitii_67) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_191_193 = main_shift64RightJammingexitii_z0iii_reg;
	end
end
always @(posedge clk) begin
	/* main: %191*/
	/*   %193 = phi i64 [ %z.0.i.i.i, %shift64RightJamming.exit.i.i ], [ %107, %121 ]*/
	if ((((cur_state == LEGUP_F_main_BB__121_46) & (memory_controller_waitrequest == 1'd0)) & (main_121_122 == 1'd1))) begin
		main_191_193_reg <= main_191_193;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_191_193) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_191_193_reg"); $finish; end
		/* synthesis translate_on */
	end
	/* main: %191*/
	/*   %193 = phi i64 [ %z.0.i.i.i, %shift64RightJamming.exit.i.i ], [ %107, %121 ]*/
	if (((cur_state == LEGUP_F_main_BB_shift64RightJammingexitii_67) & (memory_controller_waitrequest == 1'd0))) begin
		main_191_193_reg <= main_191_193;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_191_193) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_191_193_reg"); $finish; end
		/* synthesis translate_on */
	end
end
always @(*) begin
	/* main: %191*/
	/*   %aExp.1.i.i = phi i32 [ %11, %shift64RightJamming.exit.i.i ], [ %aExp.0.i.i, %121 ]*/
	if ((((cur_state == LEGUP_F_main_BB__121_46) & (memory_controller_waitrequest == 1'd0)) & (main_121_122 == 1'd1))) begin
		main_191_aExp1ii = main_121_aExp0ii_reg;
	end
	/* main: %191*/
	/*   %aExp.1.i.i = phi i32 [ %11, %shift64RightJamming.exit.i.i ], [ %aExp.0.i.i, %121 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_shift64RightJammingexitii_67) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_191_aExp1ii = main_1_11_reg;
	end
end
always @(posedge clk) begin
	/* main: %191*/
	/*   %aExp.1.i.i = phi i32 [ %11, %shift64RightJamming.exit.i.i ], [ %aExp.0.i.i, %121 ]*/
	if ((((cur_state == LEGUP_F_main_BB__121_46) & (memory_controller_waitrequest == 1'd0)) & (main_121_122 == 1'd1))) begin
		main_191_aExp1ii_reg <= main_191_aExp1ii;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_191_aExp1ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_191_aExp1ii_reg"); $finish; end
		/* synthesis translate_on */
	end
	/* main: %191*/
	/*   %aExp.1.i.i = phi i32 [ %11, %shift64RightJamming.exit.i.i ], [ %aExp.0.i.i, %121 ]*/
	if (((cur_state == LEGUP_F_main_BB_shift64RightJammingexitii_67) & (memory_controller_waitrequest == 1'd0))) begin
		main_191_aExp1ii_reg <= main_191_aExp1ii;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_191_aExp1ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_191_aExp1ii_reg"); $finish; end
		/* synthesis translate_on */
	end
end
always @(*) begin
	/* main: %191*/
	/*   %194 = sub i64 %192, %193*/
		main_191_194 = (main_191_192_reg - main_191_193_reg);
end
always @(*) begin
	/* main: %195*/
	/*   %.0.i.i = phi i32 [ %6, %191 ], [ %162, %158 ]*/
	if (((cur_state == LEGUP_F_main_BB__158_58) & (memory_controller_waitrequest == 1'd0))) begin
		main_195_0ii = main_158_162;
	end
	/* main: %195*/
	/*   %.0.i.i = phi i32 [ %6, %191 ], [ %162, %158 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__191_68) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_195_0ii = main_1_6_reg;
	end
end
always @(posedge clk) begin
	/* main: %195*/
	/*   %.0.i.i = phi i32 [ %6, %191 ], [ %162, %158 ]*/
	if (((cur_state == LEGUP_F_main_BB__158_58) & (memory_controller_waitrequest == 1'd0))) begin
		main_195_0ii_reg <= main_195_0ii;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_195_0ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_195_0ii_reg"); $finish; end
		/* synthesis translate_on */
	end
	/* main: %195*/
	/*   %.0.i.i = phi i32 [ %6, %191 ], [ %162, %158 ]*/
	if (((cur_state == LEGUP_F_main_BB__191_68) & (memory_controller_waitrequest == 1'd0))) begin
		main_195_0ii_reg <= main_195_0ii;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_195_0ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_195_0ii_reg"); $finish; end
		/* synthesis translate_on */
	end
end
always @(*) begin
	/* main: %195*/
	/*   %zExp.0.i.i = phi i32 [ %aExp.1.i.i, %191 ], [ %bExp.1.i.i, %158 ]*/
	if (((cur_state == LEGUP_F_main_BB__158_58) & (memory_controller_waitrequest == 1'd0))) begin
		main_195_zExp0ii = main_158_bExp1ii_reg;
	end
	/* main: %195*/
	/*   %zExp.0.i.i = phi i32 [ %aExp.1.i.i, %191 ], [ %bExp.1.i.i, %158 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__191_68) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_195_zExp0ii = main_191_aExp1ii_reg;
	end
end
always @(posedge clk) begin
	/* main: %195*/
	/*   %zExp.0.i.i = phi i32 [ %aExp.1.i.i, %191 ], [ %bExp.1.i.i, %158 ]*/
	if (((cur_state == LEGUP_F_main_BB__158_58) & (memory_controller_waitrequest == 1'd0))) begin
		main_195_zExp0ii_reg <= main_195_zExp0ii;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_195_zExp0ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_195_zExp0ii_reg"); $finish; end
		/* synthesis translate_on */
	end
	/* main: %195*/
	/*   %zExp.0.i.i = phi i32 [ %aExp.1.i.i, %191 ], [ %bExp.1.i.i, %158 ]*/
	if (((cur_state == LEGUP_F_main_BB__191_68) & (memory_controller_waitrequest == 1'd0))) begin
		main_195_zExp0ii_reg <= main_195_zExp0ii;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_195_zExp0ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_195_zExp0ii_reg"); $finish; end
		/* synthesis translate_on */
	end
end
always @(*) begin
	/* main: %195*/
	/*   %zSig.0.i.i = phi i64 [ %194, %191 ], [ %161, %158 ]*/
	if (((cur_state == LEGUP_F_main_BB__158_58) & (memory_controller_waitrequest == 1'd0))) begin
		main_195_zSig0ii = main_158_161;
	end
	/* main: %195*/
	/*   %zSig.0.i.i = phi i64 [ %194, %191 ], [ %161, %158 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__191_68) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_195_zSig0ii = main_191_194;
	end
end
always @(posedge clk) begin
	/* main: %195*/
	/*   %zSig.0.i.i = phi i64 [ %194, %191 ], [ %161, %158 ]*/
	if (((cur_state == LEGUP_F_main_BB__158_58) & (memory_controller_waitrequest == 1'd0))) begin
		main_195_zSig0ii_reg <= main_195_zSig0ii;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_195_zSig0ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_195_zSig0ii_reg"); $finish; end
		/* synthesis translate_on */
	end
	/* main: %195*/
	/*   %zSig.0.i.i = phi i64 [ %194, %191 ], [ %161, %158 ]*/
	if (((cur_state == LEGUP_F_main_BB__191_68) & (memory_controller_waitrequest == 1'd0))) begin
		main_195_zSig0ii_reg <= main_195_zSig0ii;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_195_zSig0ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_195_zSig0ii_reg"); $finish; end
		/* synthesis translate_on */
	end
end
always @(*) begin
	/* main: %195*/
	/*   %196 = add nsw i32 %zExp.0.i.i, -1*/
		main_195_196 = (main_195_zExp0ii_reg + -32'd1);
end
always @(posedge clk) begin
	/* main: %195*/
	/*   %196 = add nsw i32 %zExp.0.i.i, -1*/
	if ((cur_state == LEGUP_F_main_BB__195_69)) begin
		main_195_196_reg <= main_195_196;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_195_196) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_195_196_reg"); $finish; end
		/* synthesis translate_on */
	end
end
always @(*) begin
	/* main: %195*/
	/*   %197 = icmp ult i64 %zSig.0.i.i, 4294967296*/
		main_195_197 = (main_195_zSig0ii_reg < 64'd4294967296);
end
always @(posedge clk) begin
	/* main: %195*/
	/*   %197 = icmp ult i64 %zSig.0.i.i, 4294967296*/
	if ((cur_state == LEGUP_F_main_BB__195_69)) begin
		main_195_197_reg <= main_195_197;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_195_197) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_195_197_reg"); $finish; end
		/* synthesis translate_on */
	end
end
always @(*) begin
	/* main: %195*/
	/*   %198 = lshr i64 %zSig.0.i.i, 32*/
		main_195_198 = (main_195_zSig0ii_reg >>> (64'd32 % 64'd64));
end
always @(*) begin
	/* main: %195*/
	/*   %a.sink.i.i.i.i = select i1 %197, i64 %zSig.0.i.i, i64 %198*/
		main_195_asinkiiii = (main_195_197 ? main_195_zSig0ii_reg : main_195_198);
end
always @(*) begin
	/* main: %195*/
	/*   %extract.t.i.i.i.i = trunc i64 %a.sink.i.i.i.i to i32*/
		main_195_extracttiiii = main_195_asinkiiii[31:0];
end
always @(posedge clk) begin
	/* main: %195*/
	/*   %extract.t.i.i.i.i = trunc i64 %a.sink.i.i.i.i to i32*/
	if ((cur_state == LEGUP_F_main_BB__195_69)) begin
		main_195_extracttiiii_reg <= main_195_extracttiiii;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_195_extracttiiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_195_extracttiiii_reg"); $finish; end
		/* synthesis translate_on */
	end
end
always @(*) begin
	/* main: %195*/
	/*   %199 = icmp ult i32 %extract.t.i.i.i.i, 65536*/
		main_195_199 = (main_195_extracttiiii < 32'd65536);
end
always @(posedge clk) begin
	/* main: %195*/
	/*   %199 = icmp ult i32 %extract.t.i.i.i.i, 65536*/
	if ((cur_state == LEGUP_F_main_BB__195_69)) begin
		main_195_199_reg <= main_195_199;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_195_199) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_195_199_reg"); $finish; end
		/* synthesis translate_on */
	end
end
always @(*) begin
	/* main: %195*/
	/*   %200 = shl i32 %extract.t.i.i.i.i, 16*/
		main_195_200 = (main_195_extracttiiii <<< (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %195*/
	/*   %200 = shl i32 %extract.t.i.i.i.i, 16*/
	if ((cur_state == LEGUP_F_main_BB__195_69)) begin
		main_195_200_reg <= main_195_200;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_195_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_195_200_reg"); $finish; end
		/* synthesis translate_on */
	end
end
always @(*) begin
	/* main: %195*/
	/*   %.a.i.i.i.i.i = select i1 %199, i32 %200, i32 %extract.t.i.i.i.i*/
		main_195_aiiiii = (main_195_199_reg ? main_195_200_reg : main_195_extracttiiii_reg);
end
always @(posedge clk) begin
	/* main: %195*/
	/*   %.a.i.i.i.i.i = select i1 %199, i32 %200, i32 %extract.t.i.i.i.i*/
	if ((cur_state == LEGUP_F_main_BB__195_70)) begin
		main_195_aiiiii_reg <= main_195_aiiiii;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_195_aiiiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_195_aiiiii_reg"); $finish; end
		/* synthesis translate_on */
	end
end
always @(*) begin
	/* main: %195*/
	/*   %..i.i.i.i.i = select i1 %199, i32 16, i32 0*/
		main_195_iiiii = (main_195_199_reg ? 32'd16 : 32'd0);
end
always @(posedge clk) begin
	/* main: %195*/
	/*   %..i.i.i.i.i = select i1 %199, i32 16, i32 0*/
	if ((cur_state == LEGUP_F_main_BB__195_70)) begin
		main_195_iiiii_reg <= main_195_iiiii;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_195_iiiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_195_iiiii_reg"); $finish; end
		/* synthesis translate_on */
	end
end
always @(*) begin
	/* main: %195*/
	/*   %201 = icmp ult i32 %.a.i.i.i.i.i, 16777216*/
		main_195_201 = (main_195_aiiiii < 32'd16777216);
end
always @(*) begin
	/* main: %202*/
	/*   %203 = or i32 %..i.i.i.i.i, 8*/
		main_202_203 = (main_195_iiiii_reg | 32'd8);
end
always @(*) begin
	/* main: %202*/
	/*   %204 = shl i32 %.a.i.i.i.i.i, 8*/
		main_202_204 = (main_195_aiiiii_reg <<< (32'd8 % 32));
end
always @(*) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %.1.i.i.i.i.i = phi i32 [ %204, %202 ], [ %.a.i.i.i.i.i, %195 ]*/
	if ((((cur_state == LEGUP_F_main_BB__195_70) & (memory_controller_waitrequest == 1'd0)) & (main_195_201 == 1'd0))) begin
		main_normalizeRoundAndPackFloat64exitii_1iiiii = main_195_aiiiii;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %.1.i.i.i.i.i = phi i32 [ %204, %202 ], [ %.a.i.i.i.i.i, %195 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__202_71) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_normalizeRoundAndPackFloat64exitii_1iiiii = main_202_204;
	end
end
always @(posedge clk) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %.1.i.i.i.i.i = phi i32 [ %204, %202 ], [ %.a.i.i.i.i.i, %195 ]*/
	if ((((cur_state == LEGUP_F_main_BB__195_70) & (memory_controller_waitrequest == 1'd0)) & (main_195_201 == 1'd0))) begin
		main_normalizeRoundAndPackFloat64exitii_1iiiii_reg <= main_normalizeRoundAndPackFloat64exitii_1iiiii;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_normalizeRoundAndPackFloat64exitii_1iiiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeRoundAndPackFloat64exitii_1iiiii_reg"); $finish; end
		/* synthesis translate_on */
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %.1.i.i.i.i.i = phi i32 [ %204, %202 ], [ %.a.i.i.i.i.i, %195 ]*/
	if (((cur_state == LEGUP_F_main_BB__202_71) & (memory_controller_waitrequest == 1'd0))) begin
		main_normalizeRoundAndPackFloat64exitii_1iiiii_reg <= main_normalizeRoundAndPackFloat64exitii_1iiiii;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_normalizeRoundAndPackFloat64exitii_1iiiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeRoundAndPackFloat64exitii_1iiiii_reg"); $finish; end
		/* synthesis translate_on */
	end
end
always @(*) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %shiftCount.1.i.i.i.i.i = phi i32 [ %203, %202 ], [ %..i.i.i.i.i, %195 ]*/
	if ((((cur_state == LEGUP_F_main_BB__195_70) & (memory_controller_waitrequest == 1'd0)) & (main_195_201 == 1'd0))) begin
		main_normalizeRoundAndPackFloat64exitii_shiftCount1iiiii = main_195_iiiii;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %shiftCount.1.i.i.i.i.i = phi i32 [ %203, %202 ], [ %..i.i.i.i.i, %195 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__202_71) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_normalizeRoundAndPackFloat64exitii_shiftCount1iiiii = main_202_203;
	end
end
always @(posedge clk) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %shiftCount.1.i.i.i.i.i = phi i32 [ %203, %202 ], [ %..i.i.i.i.i, %195 ]*/
	if ((((cur_state == LEGUP_F_main_BB__195_70) & (memory_controller_waitrequest == 1'd0)) & (main_195_201 == 1'd0))) begin
		main_normalizeRoundAndPackFloat64exitii_shiftCount1iiiii_reg <= main_normalizeRoundAndPackFloat64exitii_shiftCount1iiiii;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_normalizeRoundAndPackFloat64exitii_shiftCount1iiiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeRoundAndPackFloat64exitii_shiftCount1iiiii_reg"); $finish; end
		/* synthesis translate_on */
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %shiftCount.1.i.i.i.i.i = phi i32 [ %203, %202 ], [ %..i.i.i.i.i, %195 ]*/
	if (((cur_state == LEGUP_F_main_BB__202_71) & (memory_controller_waitrequest == 1'd0))) begin
		main_normalizeRoundAndPackFloat64exitii_shiftCount1iiiii_reg <= main_normalizeRoundAndPackFloat64exitii_shiftCount1iiiii;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_normalizeRoundAndPackFloat64exitii_shiftCount1iiiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeRoundAndPackFloat64exitii_shiftCount1iiiii_reg"); $finish; end
		/* synthesis translate_on */
	end
end
always @(*) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %205 = lshr i32 %.1.i.i.i.i.i, 24*/
		main_normalizeRoundAndPackFloat64exitii_205 = (main_normalizeRoundAndPackFloat64exitii_1iiiii_reg >>> (32'd24 % 32));
end
always @(*) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %206 = getelementptr inbounds [256 x i32]* @countLeadingZeros32.countLeadingZerosHigh, i32 0, i32 %205*/
		main_normalizeRoundAndPackFloat64exitii_206 = (`TAG_g_countLeadingZeros32countLeadingZerosHigh_a + (4 * main_normalizeRoundAndPackFloat64exitii_205));
end
always @(*) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %207 = load i32* %206, align 4, !tbaa !5*/
		main_normalizeRoundAndPackFloat64exitii_207 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %208 = select i1 %197, i32 31, i32 -1*/
		main_normalizeRoundAndPackFloat64exitii_208 = (main_195_197_reg ? 32'd31 : -32'd1);
end
always @(*) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %209 = add nsw i32 %shiftCount.1.i.i.i.i.i, %208*/
		main_normalizeRoundAndPackFloat64exitii_209 = (main_normalizeRoundAndPackFloat64exitii_shiftCount1iiiii_reg + main_normalizeRoundAndPackFloat64exitii_208);
end
always @(posedge clk) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %209 = add nsw i32 %shiftCount.1.i.i.i.i.i, %208*/
	if ((cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_72)) begin
		main_normalizeRoundAndPackFloat64exitii_209_reg <= main_normalizeRoundAndPackFloat64exitii_209;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_normalizeRoundAndPackFloat64exitii_209) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeRoundAndPackFloat64exitii_209_reg"); $finish; end
		/* synthesis translate_on */
	end
end
always @(*) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %210 = add i32 %209, %207*/
		main_normalizeRoundAndPackFloat64exitii_210 = (main_normalizeRoundAndPackFloat64exitii_209_reg + main_normalizeRoundAndPackFloat64exitii_207);
end
always @(*) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %211 = sub i32 %196, %210*/
		main_normalizeRoundAndPackFloat64exitii_211 = (main_195_196_reg - main_normalizeRoundAndPackFloat64exitii_210);
end
always @(*) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %212 = zext i32 %210 to i64*/
		main_normalizeRoundAndPackFloat64exitii_212 = main_normalizeRoundAndPackFloat64exitii_210;
end
always @(*) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %213 = shl i64 %zSig.0.i.i, %212*/
		main_normalizeRoundAndPackFloat64exitii_213 = (main_195_zSig0ii_reg <<< (main_normalizeRoundAndPackFloat64exitii_212 % 64'd64));
end
always @(*) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %214 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i.i, i32 %211, i64 %213) #1*/
		main_normalizeRoundAndPackFloat64exitii_214 = roundAndPackFloat64_return_val_reg;
end
always @(posedge clk) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %214 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i.i, i32 %211, i64 %213) #1*/
	if ((cur_state == LEGUP_function_call_75)) begin
		main_normalizeRoundAndPackFloat64exitii_214_reg <= main_normalizeRoundAndPackFloat64exitii_214;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_normalizeRoundAndPackFloat64exitii_214) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeRoundAndPackFloat64exitii_214_reg"); $finish; end
		/* synthesis translate_on */
	end
end
always @(*) begin
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i.i, %float64_is_signaling_nan.exit1.i10.i.i ], [ %102, %101 ], [ %.mux2.i6.i.i, %float64_is_signaling_nan.exit1.i1.i.i ], [ %58, %56 ], [ %.mux2.i.i9.i, %float64_is_signaling_nan.exit1.i.i4.i ], [ %90, %86 ], [ %3, %23 ], [ %3, %81 ], [ %.mux2.i.i.i, %float64_is_signaling_nan.exit1.i.i.i ], [ %214, %normalizeRoundAndPackFloat64.exit.i.i ], [ %.mux2.i9.i.i, %float64_is_signaling_nan.exit1.i4.i.i ], [ %135, %131 ], [ %.mux2.i16.i.i, %float64_is_signaling_nan.exit1.i11.i.i ], [ 9223372036854775807, %117 ], [ %3, %165 ], [ 0, %123 ]*/
	if ((((cur_state == LEGUP_F_main_BB__23_6) & (memory_controller_waitrequest == 1'd0)) & (main_23_24 == 1'd1))) begin
		main_float64_addexit_0i = main_1_3_reg;
	end
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i.i, %float64_is_signaling_nan.exit1.i10.i.i ], [ %102, %101 ], [ %.mux2.i6.i.i, %float64_is_signaling_nan.exit1.i1.i.i ], [ %58, %56 ], [ %.mux2.i.i9.i, %float64_is_signaling_nan.exit1.i.i4.i ], [ %90, %86 ], [ %3, %23 ], [ %3, %81 ], [ %.mux2.i.i.i, %float64_is_signaling_nan.exit1.i.i.i ], [ %214, %normalizeRoundAndPackFloat64.exit.i.i ], [ %.mux2.i9.i.i, %float64_is_signaling_nan.exit1.i4.i.i ], [ %135, %131 ], [ %.mux2.i16.i.i, %float64_is_signaling_nan.exit1.i11.i.i ], [ 9223372036854775807, %117 ], [ %3, %165 ], [ 0, %123 ]*/
	else if (((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i10ii_8) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_addexit_0i = main_float64_is_signaling_nanexit1i10ii_mux2i15ii;
	end
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i.i, %float64_is_signaling_nan.exit1.i10.i.i ], [ %102, %101 ], [ %.mux2.i6.i.i, %float64_is_signaling_nan.exit1.i1.i.i ], [ %58, %56 ], [ %.mux2.i.i9.i, %float64_is_signaling_nan.exit1.i.i4.i ], [ %90, %86 ], [ %3, %23 ], [ %3, %81 ], [ %.mux2.i.i.i, %float64_is_signaling_nan.exit1.i.i.i ], [ %214, %normalizeRoundAndPackFloat64.exit.i.i ], [ %.mux2.i9.i.i, %float64_is_signaling_nan.exit1.i4.i.i ], [ %135, %131 ], [ %.mux2.i16.i.i, %float64_is_signaling_nan.exit1.i11.i.i ], [ 9223372036854775807, %117 ], [ %3, %165 ], [ 0, %123 ]*/
	else if (((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i1ii_17) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_addexit_0i = main_float64_is_signaling_nanexit1i1ii_mux2i6ii;
	end
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i.i, %float64_is_signaling_nan.exit1.i10.i.i ], [ %102, %101 ], [ %.mux2.i6.i.i, %float64_is_signaling_nan.exit1.i1.i.i ], [ %58, %56 ], [ %.mux2.i.i9.i, %float64_is_signaling_nan.exit1.i.i4.i ], [ %90, %86 ], [ %3, %23 ], [ %3, %81 ], [ %.mux2.i.i.i, %float64_is_signaling_nan.exit1.i.i.i ], [ %214, %normalizeRoundAndPackFloat64.exit.i.i ], [ %.mux2.i9.i.i, %float64_is_signaling_nan.exit1.i4.i.i ], [ %135, %131 ], [ %.mux2.i16.i.i, %float64_is_signaling_nan.exit1.i11.i.i ], [ 9223372036854775807, %117 ], [ %3, %165 ], [ 0, %123 ]*/
	else if (((cur_state == LEGUP_F_main_BB__56_18) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_addexit_0i = main_56_58;
	end
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i.i, %float64_is_signaling_nan.exit1.i10.i.i ], [ %102, %101 ], [ %.mux2.i6.i.i, %float64_is_signaling_nan.exit1.i1.i.i ], [ %58, %56 ], [ %.mux2.i.i9.i, %float64_is_signaling_nan.exit1.i.i4.i ], [ %90, %86 ], [ %3, %23 ], [ %3, %81 ], [ %.mux2.i.i.i, %float64_is_signaling_nan.exit1.i.i.i ], [ %214, %normalizeRoundAndPackFloat64.exit.i.i ], [ %.mux2.i9.i.i, %float64_is_signaling_nan.exit1.i4.i.i ], [ %135, %131 ], [ %.mux2.i16.i.i, %float64_is_signaling_nan.exit1.i11.i.i ], [ 9223372036854775807, %117 ], [ %3, %165 ], [ 0, %123 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__81_24) & (memory_controller_waitrequest == 1'd0)) & (main_81_83 == 1'd1))) begin
		main_float64_addexit_0i = main_1_3_reg;
	end
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i.i, %float64_is_signaling_nan.exit1.i10.i.i ], [ %102, %101 ], [ %.mux2.i6.i.i, %float64_is_signaling_nan.exit1.i1.i.i ], [ %58, %56 ], [ %.mux2.i.i9.i, %float64_is_signaling_nan.exit1.i.i4.i ], [ %90, %86 ], [ %3, %23 ], [ %3, %81 ], [ %.mux2.i.i.i, %float64_is_signaling_nan.exit1.i.i.i ], [ %214, %normalizeRoundAndPackFloat64.exit.i.i ], [ %.mux2.i9.i.i, %float64_is_signaling_nan.exit1.i4.i.i ], [ %135, %131 ], [ %.mux2.i16.i.i, %float64_is_signaling_nan.exit1.i11.i.i ], [ 9223372036854775807, %117 ], [ %3, %165 ], [ 0, %123 ]*/
	else if (((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1ii4i_26) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_addexit_0i = main_float64_is_signaling_nanexit1ii4i_mux2ii9i;
	end
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i.i, %float64_is_signaling_nan.exit1.i10.i.i ], [ %102, %101 ], [ %.mux2.i6.i.i, %float64_is_signaling_nan.exit1.i1.i.i ], [ %58, %56 ], [ %.mux2.i.i9.i, %float64_is_signaling_nan.exit1.i.i4.i ], [ %90, %86 ], [ %3, %23 ], [ %3, %81 ], [ %.mux2.i.i.i, %float64_is_signaling_nan.exit1.i.i.i ], [ %214, %normalizeRoundAndPackFloat64.exit.i.i ], [ %.mux2.i9.i.i, %float64_is_signaling_nan.exit1.i4.i.i ], [ %135, %131 ], [ %.mux2.i16.i.i, %float64_is_signaling_nan.exit1.i11.i.i ], [ 9223372036854775807, %117 ], [ %3, %165 ], [ 0, %123 ]*/
	else if (((cur_state == LEGUP_F_main_BB__86_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_addexit_0i = main_86_90;
	end
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i.i, %float64_is_signaling_nan.exit1.i10.i.i ], [ %102, %101 ], [ %.mux2.i6.i.i, %float64_is_signaling_nan.exit1.i1.i.i ], [ %58, %56 ], [ %.mux2.i.i9.i, %float64_is_signaling_nan.exit1.i.i4.i ], [ %90, %86 ], [ %3, %23 ], [ %3, %81 ], [ %.mux2.i.i.i, %float64_is_signaling_nan.exit1.i.i.i ], [ %214, %normalizeRoundAndPackFloat64.exit.i.i ], [ %.mux2.i9.i.i, %float64_is_signaling_nan.exit1.i4.i.i ], [ %135, %131 ], [ %.mux2.i16.i.i, %float64_is_signaling_nan.exit1.i11.i.i ], [ 9223372036854775807, %117 ], [ %3, %165 ], [ 0, %123 ]*/
	else if (((cur_state == LEGUP_F_main_BB__101_34) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_addexit_0i = main_101_102_reg;
	end
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i.i, %float64_is_signaling_nan.exit1.i10.i.i ], [ %102, %101 ], [ %.mux2.i6.i.i, %float64_is_signaling_nan.exit1.i1.i.i ], [ %58, %56 ], [ %.mux2.i.i9.i, %float64_is_signaling_nan.exit1.i.i4.i ], [ %90, %86 ], [ %3, %23 ], [ %3, %81 ], [ %.mux2.i.i.i, %float64_is_signaling_nan.exit1.i.i.i ], [ %214, %normalizeRoundAndPackFloat64.exit.i.i ], [ %.mux2.i9.i.i, %float64_is_signaling_nan.exit1.i4.i.i ], [ %135, %131 ], [ %.mux2.i16.i.i, %float64_is_signaling_nan.exit1.i11.i.i ], [ 9223372036854775807, %117 ], [ %3, %165 ], [ 0, %123 ]*/
	else if (((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i11ii_40) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_addexit_0i = main_float64_is_signaling_nanexit1i11ii_mux2i16ii;
	end
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i.i, %float64_is_signaling_nan.exit1.i10.i.i ], [ %102, %101 ], [ %.mux2.i6.i.i, %float64_is_signaling_nan.exit1.i1.i.i ], [ %58, %56 ], [ %.mux2.i.i9.i, %float64_is_signaling_nan.exit1.i.i4.i ], [ %90, %86 ], [ %3, %23 ], [ %3, %81 ], [ %.mux2.i.i.i, %float64_is_signaling_nan.exit1.i.i.i ], [ %214, %normalizeRoundAndPackFloat64.exit.i.i ], [ %.mux2.i9.i.i, %float64_is_signaling_nan.exit1.i4.i.i ], [ %135, %131 ], [ %.mux2.i16.i.i, %float64_is_signaling_nan.exit1.i11.i.i ], [ 9223372036854775807, %117 ], [ %3, %165 ], [ 0, %123 ]*/
	else if (((cur_state == LEGUP_F_main_BB__117_44) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_addexit_0i = 64'd9223372036854775807;
	end
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i.i, %float64_is_signaling_nan.exit1.i10.i.i ], [ %102, %101 ], [ %.mux2.i6.i.i, %float64_is_signaling_nan.exit1.i1.i.i ], [ %58, %56 ], [ %.mux2.i.i9.i, %float64_is_signaling_nan.exit1.i.i4.i ], [ %90, %86 ], [ %3, %23 ], [ %3, %81 ], [ %.mux2.i.i.i, %float64_is_signaling_nan.exit1.i.i.i ], [ %214, %normalizeRoundAndPackFloat64.exit.i.i ], [ %.mux2.i9.i.i, %float64_is_signaling_nan.exit1.i4.i.i ], [ %135, %131 ], [ %.mux2.i16.i.i, %float64_is_signaling_nan.exit1.i11.i.i ], [ 9223372036854775807, %117 ], [ %3, %165 ], [ 0, %123 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__123_47) & (memory_controller_waitrequest == 1'd0)) & (main_123_124 == 1'd0))) begin
		main_float64_addexit_0i = 64'd0;
	end
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i.i, %float64_is_signaling_nan.exit1.i10.i.i ], [ %102, %101 ], [ %.mux2.i6.i.i, %float64_is_signaling_nan.exit1.i1.i.i ], [ %58, %56 ], [ %.mux2.i.i9.i, %float64_is_signaling_nan.exit1.i.i4.i ], [ %90, %86 ], [ %3, %23 ], [ %3, %81 ], [ %.mux2.i.i.i, %float64_is_signaling_nan.exit1.i.i.i ], [ %214, %normalizeRoundAndPackFloat64.exit.i.i ], [ %.mux2.i9.i.i, %float64_is_signaling_nan.exit1.i4.i.i ], [ %135, %131 ], [ %.mux2.i16.i.i, %float64_is_signaling_nan.exit1.i11.i.i ], [ 9223372036854775807, %117 ], [ %3, %165 ], [ 0, %123 ]*/
	else if (((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i4ii_51) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_addexit_0i = main_float64_is_signaling_nanexit1i4ii_mux2i9ii;
	end
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i.i, %float64_is_signaling_nan.exit1.i10.i.i ], [ %102, %101 ], [ %.mux2.i6.i.i, %float64_is_signaling_nan.exit1.i1.i.i ], [ %58, %56 ], [ %.mux2.i.i9.i, %float64_is_signaling_nan.exit1.i.i4.i ], [ %90, %86 ], [ %3, %23 ], [ %3, %81 ], [ %.mux2.i.i.i, %float64_is_signaling_nan.exit1.i.i.i ], [ %214, %normalizeRoundAndPackFloat64.exit.i.i ], [ %.mux2.i9.i.i, %float64_is_signaling_nan.exit1.i4.i.i ], [ %135, %131 ], [ %.mux2.i16.i.i, %float64_is_signaling_nan.exit1.i11.i.i ], [ 9223372036854775807, %117 ], [ %3, %165 ], [ 0, %123 ]*/
	else if (((cur_state == LEGUP_F_main_BB__131_52) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_addexit_0i = main_131_135;
	end
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i.i, %float64_is_signaling_nan.exit1.i10.i.i ], [ %102, %101 ], [ %.mux2.i6.i.i, %float64_is_signaling_nan.exit1.i1.i.i ], [ %58, %56 ], [ %.mux2.i.i9.i, %float64_is_signaling_nan.exit1.i.i4.i ], [ %90, %86 ], [ %3, %23 ], [ %3, %81 ], [ %.mux2.i.i.i, %float64_is_signaling_nan.exit1.i.i.i ], [ %214, %normalizeRoundAndPackFloat64.exit.i.i ], [ %.mux2.i9.i.i, %float64_is_signaling_nan.exit1.i4.i.i ], [ %135, %131 ], [ %.mux2.i16.i.i, %float64_is_signaling_nan.exit1.i11.i.i ], [ 9223372036854775807, %117 ], [ %3, %165 ], [ 0, %123 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__165_60) & (memory_controller_waitrequest == 1'd0)) & (main_165_166 == 1'd1))) begin
		main_float64_addexit_0i = main_1_3_reg;
	end
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i.i, %float64_is_signaling_nan.exit1.i10.i.i ], [ %102, %101 ], [ %.mux2.i6.i.i, %float64_is_signaling_nan.exit1.i1.i.i ], [ %58, %56 ], [ %.mux2.i.i9.i, %float64_is_signaling_nan.exit1.i.i4.i ], [ %90, %86 ], [ %3, %23 ], [ %3, %81 ], [ %.mux2.i.i.i, %float64_is_signaling_nan.exit1.i.i.i ], [ %214, %normalizeRoundAndPackFloat64.exit.i.i ], [ %.mux2.i9.i.i, %float64_is_signaling_nan.exit1.i4.i.i ], [ %135, %131 ], [ %.mux2.i16.i.i, %float64_is_signaling_nan.exit1.i11.i.i ], [ 9223372036854775807, %117 ], [ %3, %165 ], [ 0, %123 ]*/
	else if (((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1iii_62) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_addexit_0i = main_float64_is_signaling_nanexit1iii_mux2iii;
	end
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i.i, %float64_is_signaling_nan.exit1.i10.i.i ], [ %102, %101 ], [ %.mux2.i6.i.i, %float64_is_signaling_nan.exit1.i1.i.i ], [ %58, %56 ], [ %.mux2.i.i9.i, %float64_is_signaling_nan.exit1.i.i4.i ], [ %90, %86 ], [ %3, %23 ], [ %3, %81 ], [ %.mux2.i.i.i, %float64_is_signaling_nan.exit1.i.i.i ], [ %214, %normalizeRoundAndPackFloat64.exit.i.i ], [ %.mux2.i9.i.i, %float64_is_signaling_nan.exit1.i4.i.i ], [ %135, %131 ], [ %.mux2.i16.i.i, %float64_is_signaling_nan.exit1.i11.i.i ], [ 9223372036854775807, %117 ], [ %3, %165 ], [ 0, %123 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_76) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_float64_addexit_0i = main_normalizeRoundAndPackFloat64exitii_214_reg;
	end
end
always @(posedge clk) begin
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i.i, %float64_is_signaling_nan.exit1.i10.i.i ], [ %102, %101 ], [ %.mux2.i6.i.i, %float64_is_signaling_nan.exit1.i1.i.i ], [ %58, %56 ], [ %.mux2.i.i9.i, %float64_is_signaling_nan.exit1.i.i4.i ], [ %90, %86 ], [ %3, %23 ], [ %3, %81 ], [ %.mux2.i.i.i, %float64_is_signaling_nan.exit1.i.i.i ], [ %214, %normalizeRoundAndPackFloat64.exit.i.i ], [ %.mux2.i9.i.i, %float64_is_signaling_nan.exit1.i4.i.i ], [ %135, %131 ], [ %.mux2.i16.i.i, %float64_is_signaling_nan.exit1.i11.i.i ], [ 9223372036854775807, %117 ], [ %3, %165 ], [ 0, %123 ]*/
	if ((((cur_state == LEGUP_F_main_BB__23_6) & (memory_controller_waitrequest == 1'd0)) & (main_23_24 == 1'd1))) begin
		main_float64_addexit_0i_reg <= main_float64_addexit_0i;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_float64_addexit_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_addexit_0i_reg"); $finish; end
		/* synthesis translate_on */
	end
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i.i, %float64_is_signaling_nan.exit1.i10.i.i ], [ %102, %101 ], [ %.mux2.i6.i.i, %float64_is_signaling_nan.exit1.i1.i.i ], [ %58, %56 ], [ %.mux2.i.i9.i, %float64_is_signaling_nan.exit1.i.i4.i ], [ %90, %86 ], [ %3, %23 ], [ %3, %81 ], [ %.mux2.i.i.i, %float64_is_signaling_nan.exit1.i.i.i ], [ %214, %normalizeRoundAndPackFloat64.exit.i.i ], [ %.mux2.i9.i.i, %float64_is_signaling_nan.exit1.i4.i.i ], [ %135, %131 ], [ %.mux2.i16.i.i, %float64_is_signaling_nan.exit1.i11.i.i ], [ 9223372036854775807, %117 ], [ %3, %165 ], [ 0, %123 ]*/
	if (((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i10ii_8) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_addexit_0i_reg <= main_float64_addexit_0i;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_float64_addexit_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_addexit_0i_reg"); $finish; end
		/* synthesis translate_on */
	end
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i.i, %float64_is_signaling_nan.exit1.i10.i.i ], [ %102, %101 ], [ %.mux2.i6.i.i, %float64_is_signaling_nan.exit1.i1.i.i ], [ %58, %56 ], [ %.mux2.i.i9.i, %float64_is_signaling_nan.exit1.i.i4.i ], [ %90, %86 ], [ %3, %23 ], [ %3, %81 ], [ %.mux2.i.i.i, %float64_is_signaling_nan.exit1.i.i.i ], [ %214, %normalizeRoundAndPackFloat64.exit.i.i ], [ %.mux2.i9.i.i, %float64_is_signaling_nan.exit1.i4.i.i ], [ %135, %131 ], [ %.mux2.i16.i.i, %float64_is_signaling_nan.exit1.i11.i.i ], [ 9223372036854775807, %117 ], [ %3, %165 ], [ 0, %123 ]*/
	if (((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i1ii_17) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_addexit_0i_reg <= main_float64_addexit_0i;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_float64_addexit_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_addexit_0i_reg"); $finish; end
		/* synthesis translate_on */
	end
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i.i, %float64_is_signaling_nan.exit1.i10.i.i ], [ %102, %101 ], [ %.mux2.i6.i.i, %float64_is_signaling_nan.exit1.i1.i.i ], [ %58, %56 ], [ %.mux2.i.i9.i, %float64_is_signaling_nan.exit1.i.i4.i ], [ %90, %86 ], [ %3, %23 ], [ %3, %81 ], [ %.mux2.i.i.i, %float64_is_signaling_nan.exit1.i.i.i ], [ %214, %normalizeRoundAndPackFloat64.exit.i.i ], [ %.mux2.i9.i.i, %float64_is_signaling_nan.exit1.i4.i.i ], [ %135, %131 ], [ %.mux2.i16.i.i, %float64_is_signaling_nan.exit1.i11.i.i ], [ 9223372036854775807, %117 ], [ %3, %165 ], [ 0, %123 ]*/
	if (((cur_state == LEGUP_F_main_BB__56_18) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_addexit_0i_reg <= main_float64_addexit_0i;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_float64_addexit_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_addexit_0i_reg"); $finish; end
		/* synthesis translate_on */
	end
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i.i, %float64_is_signaling_nan.exit1.i10.i.i ], [ %102, %101 ], [ %.mux2.i6.i.i, %float64_is_signaling_nan.exit1.i1.i.i ], [ %58, %56 ], [ %.mux2.i.i9.i, %float64_is_signaling_nan.exit1.i.i4.i ], [ %90, %86 ], [ %3, %23 ], [ %3, %81 ], [ %.mux2.i.i.i, %float64_is_signaling_nan.exit1.i.i.i ], [ %214, %normalizeRoundAndPackFloat64.exit.i.i ], [ %.mux2.i9.i.i, %float64_is_signaling_nan.exit1.i4.i.i ], [ %135, %131 ], [ %.mux2.i16.i.i, %float64_is_signaling_nan.exit1.i11.i.i ], [ 9223372036854775807, %117 ], [ %3, %165 ], [ 0, %123 ]*/
	if ((((cur_state == LEGUP_F_main_BB__81_24) & (memory_controller_waitrequest == 1'd0)) & (main_81_83 == 1'd1))) begin
		main_float64_addexit_0i_reg <= main_float64_addexit_0i;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_float64_addexit_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_addexit_0i_reg"); $finish; end
		/* synthesis translate_on */
	end
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i.i, %float64_is_signaling_nan.exit1.i10.i.i ], [ %102, %101 ], [ %.mux2.i6.i.i, %float64_is_signaling_nan.exit1.i1.i.i ], [ %58, %56 ], [ %.mux2.i.i9.i, %float64_is_signaling_nan.exit1.i.i4.i ], [ %90, %86 ], [ %3, %23 ], [ %3, %81 ], [ %.mux2.i.i.i, %float64_is_signaling_nan.exit1.i.i.i ], [ %214, %normalizeRoundAndPackFloat64.exit.i.i ], [ %.mux2.i9.i.i, %float64_is_signaling_nan.exit1.i4.i.i ], [ %135, %131 ], [ %.mux2.i16.i.i, %float64_is_signaling_nan.exit1.i11.i.i ], [ 9223372036854775807, %117 ], [ %3, %165 ], [ 0, %123 ]*/
	if (((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1ii4i_26) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_addexit_0i_reg <= main_float64_addexit_0i;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_float64_addexit_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_addexit_0i_reg"); $finish; end
		/* synthesis translate_on */
	end
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i.i, %float64_is_signaling_nan.exit1.i10.i.i ], [ %102, %101 ], [ %.mux2.i6.i.i, %float64_is_signaling_nan.exit1.i1.i.i ], [ %58, %56 ], [ %.mux2.i.i9.i, %float64_is_signaling_nan.exit1.i.i4.i ], [ %90, %86 ], [ %3, %23 ], [ %3, %81 ], [ %.mux2.i.i.i, %float64_is_signaling_nan.exit1.i.i.i ], [ %214, %normalizeRoundAndPackFloat64.exit.i.i ], [ %.mux2.i9.i.i, %float64_is_signaling_nan.exit1.i4.i.i ], [ %135, %131 ], [ %.mux2.i16.i.i, %float64_is_signaling_nan.exit1.i11.i.i ], [ 9223372036854775807, %117 ], [ %3, %165 ], [ 0, %123 ]*/
	if (((cur_state == LEGUP_F_main_BB__86_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_addexit_0i_reg <= main_float64_addexit_0i;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_float64_addexit_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_addexit_0i_reg"); $finish; end
		/* synthesis translate_on */
	end
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i.i, %float64_is_signaling_nan.exit1.i10.i.i ], [ %102, %101 ], [ %.mux2.i6.i.i, %float64_is_signaling_nan.exit1.i1.i.i ], [ %58, %56 ], [ %.mux2.i.i9.i, %float64_is_signaling_nan.exit1.i.i4.i ], [ %90, %86 ], [ %3, %23 ], [ %3, %81 ], [ %.mux2.i.i.i, %float64_is_signaling_nan.exit1.i.i.i ], [ %214, %normalizeRoundAndPackFloat64.exit.i.i ], [ %.mux2.i9.i.i, %float64_is_signaling_nan.exit1.i4.i.i ], [ %135, %131 ], [ %.mux2.i16.i.i, %float64_is_signaling_nan.exit1.i11.i.i ], [ 9223372036854775807, %117 ], [ %3, %165 ], [ 0, %123 ]*/
	if (((cur_state == LEGUP_F_main_BB__101_34) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_addexit_0i_reg <= main_float64_addexit_0i;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_float64_addexit_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_addexit_0i_reg"); $finish; end
		/* synthesis translate_on */
	end
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i.i, %float64_is_signaling_nan.exit1.i10.i.i ], [ %102, %101 ], [ %.mux2.i6.i.i, %float64_is_signaling_nan.exit1.i1.i.i ], [ %58, %56 ], [ %.mux2.i.i9.i, %float64_is_signaling_nan.exit1.i.i4.i ], [ %90, %86 ], [ %3, %23 ], [ %3, %81 ], [ %.mux2.i.i.i, %float64_is_signaling_nan.exit1.i.i.i ], [ %214, %normalizeRoundAndPackFloat64.exit.i.i ], [ %.mux2.i9.i.i, %float64_is_signaling_nan.exit1.i4.i.i ], [ %135, %131 ], [ %.mux2.i16.i.i, %float64_is_signaling_nan.exit1.i11.i.i ], [ 9223372036854775807, %117 ], [ %3, %165 ], [ 0, %123 ]*/
	if (((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i11ii_40) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_addexit_0i_reg <= main_float64_addexit_0i;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_float64_addexit_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_addexit_0i_reg"); $finish; end
		/* synthesis translate_on */
	end
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i.i, %float64_is_signaling_nan.exit1.i10.i.i ], [ %102, %101 ], [ %.mux2.i6.i.i, %float64_is_signaling_nan.exit1.i1.i.i ], [ %58, %56 ], [ %.mux2.i.i9.i, %float64_is_signaling_nan.exit1.i.i4.i ], [ %90, %86 ], [ %3, %23 ], [ %3, %81 ], [ %.mux2.i.i.i, %float64_is_signaling_nan.exit1.i.i.i ], [ %214, %normalizeRoundAndPackFloat64.exit.i.i ], [ %.mux2.i9.i.i, %float64_is_signaling_nan.exit1.i4.i.i ], [ %135, %131 ], [ %.mux2.i16.i.i, %float64_is_signaling_nan.exit1.i11.i.i ], [ 9223372036854775807, %117 ], [ %3, %165 ], [ 0, %123 ]*/
	if (((cur_state == LEGUP_F_main_BB__117_44) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_addexit_0i_reg <= main_float64_addexit_0i;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_float64_addexit_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_addexit_0i_reg"); $finish; end
		/* synthesis translate_on */
	end
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i.i, %float64_is_signaling_nan.exit1.i10.i.i ], [ %102, %101 ], [ %.mux2.i6.i.i, %float64_is_signaling_nan.exit1.i1.i.i ], [ %58, %56 ], [ %.mux2.i.i9.i, %float64_is_signaling_nan.exit1.i.i4.i ], [ %90, %86 ], [ %3, %23 ], [ %3, %81 ], [ %.mux2.i.i.i, %float64_is_signaling_nan.exit1.i.i.i ], [ %214, %normalizeRoundAndPackFloat64.exit.i.i ], [ %.mux2.i9.i.i, %float64_is_signaling_nan.exit1.i4.i.i ], [ %135, %131 ], [ %.mux2.i16.i.i, %float64_is_signaling_nan.exit1.i11.i.i ], [ 9223372036854775807, %117 ], [ %3, %165 ], [ 0, %123 ]*/
	if ((((cur_state == LEGUP_F_main_BB__123_47) & (memory_controller_waitrequest == 1'd0)) & (main_123_124 == 1'd0))) begin
		main_float64_addexit_0i_reg <= main_float64_addexit_0i;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_float64_addexit_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_addexit_0i_reg"); $finish; end
		/* synthesis translate_on */
	end
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i.i, %float64_is_signaling_nan.exit1.i10.i.i ], [ %102, %101 ], [ %.mux2.i6.i.i, %float64_is_signaling_nan.exit1.i1.i.i ], [ %58, %56 ], [ %.mux2.i.i9.i, %float64_is_signaling_nan.exit1.i.i4.i ], [ %90, %86 ], [ %3, %23 ], [ %3, %81 ], [ %.mux2.i.i.i, %float64_is_signaling_nan.exit1.i.i.i ], [ %214, %normalizeRoundAndPackFloat64.exit.i.i ], [ %.mux2.i9.i.i, %float64_is_signaling_nan.exit1.i4.i.i ], [ %135, %131 ], [ %.mux2.i16.i.i, %float64_is_signaling_nan.exit1.i11.i.i ], [ 9223372036854775807, %117 ], [ %3, %165 ], [ 0, %123 ]*/
	if (((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i4ii_51) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_addexit_0i_reg <= main_float64_addexit_0i;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_float64_addexit_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_addexit_0i_reg"); $finish; end
		/* synthesis translate_on */
	end
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i.i, %float64_is_signaling_nan.exit1.i10.i.i ], [ %102, %101 ], [ %.mux2.i6.i.i, %float64_is_signaling_nan.exit1.i1.i.i ], [ %58, %56 ], [ %.mux2.i.i9.i, %float64_is_signaling_nan.exit1.i.i4.i ], [ %90, %86 ], [ %3, %23 ], [ %3, %81 ], [ %.mux2.i.i.i, %float64_is_signaling_nan.exit1.i.i.i ], [ %214, %normalizeRoundAndPackFloat64.exit.i.i ], [ %.mux2.i9.i.i, %float64_is_signaling_nan.exit1.i4.i.i ], [ %135, %131 ], [ %.mux2.i16.i.i, %float64_is_signaling_nan.exit1.i11.i.i ], [ 9223372036854775807, %117 ], [ %3, %165 ], [ 0, %123 ]*/
	if (((cur_state == LEGUP_F_main_BB__131_52) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_addexit_0i_reg <= main_float64_addexit_0i;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_float64_addexit_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_addexit_0i_reg"); $finish; end
		/* synthesis translate_on */
	end
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i.i, %float64_is_signaling_nan.exit1.i10.i.i ], [ %102, %101 ], [ %.mux2.i6.i.i, %float64_is_signaling_nan.exit1.i1.i.i ], [ %58, %56 ], [ %.mux2.i.i9.i, %float64_is_signaling_nan.exit1.i.i4.i ], [ %90, %86 ], [ %3, %23 ], [ %3, %81 ], [ %.mux2.i.i.i, %float64_is_signaling_nan.exit1.i.i.i ], [ %214, %normalizeRoundAndPackFloat64.exit.i.i ], [ %.mux2.i9.i.i, %float64_is_signaling_nan.exit1.i4.i.i ], [ %135, %131 ], [ %.mux2.i16.i.i, %float64_is_signaling_nan.exit1.i11.i.i ], [ 9223372036854775807, %117 ], [ %3, %165 ], [ 0, %123 ]*/
	if ((((cur_state == LEGUP_F_main_BB__165_60) & (memory_controller_waitrequest == 1'd0)) & (main_165_166 == 1'd1))) begin
		main_float64_addexit_0i_reg <= main_float64_addexit_0i;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_float64_addexit_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_addexit_0i_reg"); $finish; end
		/* synthesis translate_on */
	end
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i.i, %float64_is_signaling_nan.exit1.i10.i.i ], [ %102, %101 ], [ %.mux2.i6.i.i, %float64_is_signaling_nan.exit1.i1.i.i ], [ %58, %56 ], [ %.mux2.i.i9.i, %float64_is_signaling_nan.exit1.i.i4.i ], [ %90, %86 ], [ %3, %23 ], [ %3, %81 ], [ %.mux2.i.i.i, %float64_is_signaling_nan.exit1.i.i.i ], [ %214, %normalizeRoundAndPackFloat64.exit.i.i ], [ %.mux2.i9.i.i, %float64_is_signaling_nan.exit1.i4.i.i ], [ %135, %131 ], [ %.mux2.i16.i.i, %float64_is_signaling_nan.exit1.i11.i.i ], [ 9223372036854775807, %117 ], [ %3, %165 ], [ 0, %123 ]*/
	if (((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1iii_62) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_addexit_0i_reg <= main_float64_addexit_0i;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_float64_addexit_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_addexit_0i_reg"); $finish; end
		/* synthesis translate_on */
	end
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i.i, %float64_is_signaling_nan.exit1.i10.i.i ], [ %102, %101 ], [ %.mux2.i6.i.i, %float64_is_signaling_nan.exit1.i1.i.i ], [ %58, %56 ], [ %.mux2.i.i9.i, %float64_is_signaling_nan.exit1.i.i4.i ], [ %90, %86 ], [ %3, %23 ], [ %3, %81 ], [ %.mux2.i.i.i, %float64_is_signaling_nan.exit1.i.i.i ], [ %214, %normalizeRoundAndPackFloat64.exit.i.i ], [ %.mux2.i9.i.i, %float64_is_signaling_nan.exit1.i4.i.i ], [ %135, %131 ], [ %.mux2.i16.i.i, %float64_is_signaling_nan.exit1.i11.i.i ], [ 9223372036854775807, %117 ], [ %3, %165 ], [ 0, %123 ]*/
	if (((cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_76) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_addexit_0i_reg <= main_float64_addexit_0i;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_float64_addexit_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_addexit_0i_reg"); $finish; end
		/* synthesis translate_on */
	end
end
always @(*) begin
	/* main: %float64_add.exit*/
	/*   %215 = load i64* %scevgep, align 8, !tbaa !1*/
		main_float64_addexit_215 = memory_controller_out_a[63:0];
end
always @(*) begin
	/* main: %float64_add.exit*/
	/*   %216 = icmp eq i64 %.0.i, %215*/
		main_float64_addexit_216 = (main_float64_addexit_0i_reg == main_float64_addexit_215);
end
always @(*) begin
	/* main: %float64_add.exit*/
	/*   %217 = zext i1 %216 to i32*/
		main_float64_addexit_217 = main_float64_addexit_216;
end
always @(*) begin
	/* main: %float64_add.exit*/
	/*   %218 = add nsw i32 %217, %main_result.02*/
		main_float64_addexit_218 = (main_float64_addexit_217 + main_1_main_result02_reg);
end
always @(posedge clk) begin
	/* main: %float64_add.exit*/
	/*   %218 = add nsw i32 %217, %main_result.02*/
	if ((cur_state == LEGUP_F_main_BB_float64_addexit_79)) begin
		main_float64_addexit_218_reg <= main_float64_addexit_218;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_float64_addexit_218) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_addexit_218_reg"); $finish; end
		/* synthesis translate_on */
	end
end
always @(*) begin
	/* main: %float64_add.exit*/
	/*   %220 = add nsw i32 %2, 1*/
		main_float64_addexit_220 = (main_1_2_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %float64_add.exit*/
	/*   %220 = add nsw i32 %2, 1*/
	if ((cur_state == LEGUP_F_main_BB_float64_addexit_77)) begin
		main_float64_addexit_220_reg <= main_float64_addexit_220;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_float64_addexit_220) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_addexit_220_reg"); $finish; end
		/* synthesis translate_on */
	end
end
always @(*) begin
	/* main: %float64_add.exit*/
	/*   %exitcond1 = icmp eq i32 %220, 46*/
		main_float64_addexit_exitcond1 = (main_float64_addexit_220 == 32'd46);
end
always @(posedge clk) begin
	/* main: %float64_add.exit*/
	/*   %exitcond1 = icmp eq i32 %220, 46*/
	if ((cur_state == LEGUP_F_main_BB_float64_addexit_77)) begin
		main_float64_addexit_exitcond1_reg <= main_float64_addexit_exitcond1;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_float64_addexit_exitcond1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_addexit_exitcond1_reg"); $finish; end
		/* synthesis translate_on */
	end
end
always @(*) begin
	/* main: %221*/
	/*   %223 = icmp eq i32 %218, 46*/
		main_221_223 = (main_float64_addexit_218_reg == 32'd46);
end
always @(posedge clk) begin
	/* main: %101*/
	/*   %102 = tail call fastcc i64 @roundAndPackFloat64(i32 %6, i32 %zExp.1.i.i, i64 %zSig.0.i12.i) #1*/
	if ((cur_state == LEGUP_F_main_BB__101_32)) begin
		roundAndPackFloat64_start <= 1'd1;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_start"); $finish; end
		/* synthesis translate_on */
	end
	if ((cur_state == LEGUP_function_call_33)) begin
		roundAndPackFloat64_start <= 1'd0;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_start"); $finish; end
		/* synthesis translate_on */
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %214 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i.i, i32 %211, i64 %213) #1*/
	if ((cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_74)) begin
		roundAndPackFloat64_start <= 1'd1;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_start"); $finish; end
		/* synthesis translate_on */
	end
	if ((cur_state == LEGUP_function_call_75)) begin
		roundAndPackFloat64_start <= 1'd0;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_start"); $finish; end
		/* synthesis translate_on */
	end
end
always @(posedge clk) begin
	/* main: %101*/
	/*   %102 = tail call fastcc i64 @roundAndPackFloat64(i32 %6, i32 %zExp.1.i.i, i64 %zSig.0.i12.i) #1*/
	if ((cur_state == LEGUP_F_main_BB__101_32)) begin
		roundAndPackFloat64_arg_zSign <= main_1_6_reg;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_1_6_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_arg_zSign"); $finish; end
		/* synthesis translate_on */
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %214 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i.i, i32 %211, i64 %213) #1*/
	if ((cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_74)) begin
		roundAndPackFloat64_arg_zSign <= main_195_0ii_reg;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_195_0ii_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_arg_zSign"); $finish; end
		/* synthesis translate_on */
	end
end
always @(posedge clk) begin
	/* main: %101*/
	/*   %102 = tail call fastcc i64 @roundAndPackFloat64(i32 %6, i32 %zExp.1.i.i, i64 %zSig.0.i12.i) #1*/
	if ((cur_state == LEGUP_F_main_BB__101_32)) begin
		roundAndPackFloat64_arg_zExp <= main_101_zExp1ii_reg;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_101_zExp1ii_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_arg_zExp"); $finish; end
		/* synthesis translate_on */
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %214 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i.i, i32 %211, i64 %213) #1*/
	if ((cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_74)) begin
		roundAndPackFloat64_arg_zExp <= main_normalizeRoundAndPackFloat64exitii_211;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_normalizeRoundAndPackFloat64exitii_211) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_arg_zExp"); $finish; end
		/* synthesis translate_on */
	end
end
always @(posedge clk) begin
	/* main: %101*/
	/*   %102 = tail call fastcc i64 @roundAndPackFloat64(i32 %6, i32 %zExp.1.i.i, i64 %zSig.0.i12.i) #1*/
	if ((cur_state == LEGUP_F_main_BB__101_32)) begin
		roundAndPackFloat64_arg_zSig <= main_101_zSig0i12i_reg;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_101_zSig0i12i_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_arg_zSig"); $finish; end
		/* synthesis translate_on */
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %214 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i.i, i32 %211, i64 %213) #1*/
	if ((cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_74)) begin
		roundAndPackFloat64_arg_zSig <= main_normalizeRoundAndPackFloat64exitii_213;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_normalizeRoundAndPackFloat64exitii_213) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_arg_zSig"); $finish; end
		/* synthesis translate_on */
	end
end
always @(*) begin
	roundAndPackFloat64_finish_final = roundAndPackFloat64_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB__101_32))) begin
		roundAndPackFloat64_finish_reg <= 1'd0;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_finish_reg"); $finish; end
		/* synthesis translate_on */
	end
	if (roundAndPackFloat64_finish) begin
		roundAndPackFloat64_finish_reg <= 1'd1;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_finish_reg"); $finish; end
		/* synthesis translate_on */
	end
	if ((reset | (cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_74))) begin
		roundAndPackFloat64_finish_reg <= 1'd0;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_finish_reg"); $finish; end
		/* synthesis translate_on */
	end
	if (roundAndPackFloat64_finish) begin
		roundAndPackFloat64_finish_reg <= 1'd1;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_finish_reg"); $finish; end
		/* synthesis translate_on */
	end
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB__101_32))) begin
		roundAndPackFloat64_return_val_reg <= 64'd0;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(64'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_return_val_reg"); $finish; end
		/* synthesis translate_on */
	end
	if (roundAndPackFloat64_finish) begin
		roundAndPackFloat64_return_val_reg <= roundAndPackFloat64_return_val;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(roundAndPackFloat64_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_return_val_reg"); $finish; end
		/* synthesis translate_on */
	end
	if ((reset | (cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_74))) begin
		roundAndPackFloat64_return_val_reg <= 64'd0;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(64'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_return_val_reg"); $finish; end
		/* synthesis translate_on */
	end
	if (roundAndPackFloat64_finish) begin
		roundAndPackFloat64_return_val_reg <= roundAndPackFloat64_return_val;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(roundAndPackFloat64_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_return_val_reg"); $finish; end
		/* synthesis translate_on */
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
		/* synthesis translate_on */
	end
	/* main: %228*/
	/*   ret i32 %218*/
	if ((cur_state == LEGUP_F_main_BB__228_83)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		/* synthesis translate_off */
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
		/* synthesis translate_on */
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	/* main: %101*/
	/*   %102 = tail call fastcc i64 @roundAndPackFloat64(i32 %6, i32 %zExp.1.i.i, i64 %zSig.0.i12.i) #1*/
	if ((cur_state == LEGUP_function_call_33)) begin
		memory_controller_enable_a = roundAndPackFloat64_memory_controller_enable_a;
	end
	/* main: %101*/
	/*   %102 = tail call fastcc i64 @roundAndPackFloat64(i32 %6, i32 %zExp.1.i.i, i64 %zSig.0.i12.i) #1*/
	if ((cur_state == LEGUP_function_call_33)) begin
		memory_controller_enable_a = roundAndPackFloat64_memory_controller_enable_a;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %214 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i.i, i32 %211, i64 %213) #1*/
	if ((cur_state == LEGUP_function_call_75)) begin
		memory_controller_enable_a = roundAndPackFloat64_memory_controller_enable_a;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %214 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i.i, i32 %211, i64 %213) #1*/
	if ((cur_state == LEGUP_function_call_75)) begin
		memory_controller_enable_a = roundAndPackFloat64_memory_controller_enable_a;
	end
	/* main: %1*/
	/*   %3 = load i64* %scevgep3, align 8, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_1)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %117*/
	/*   %118 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__117_41)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %117*/
	/*   store i32 %119, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__117_43)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %207 = load i32* %206, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_72)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %float64_add.exit*/
	/*   %215 = load i64* %scevgep, align 8, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_float64_addexit_77)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	/* main: %101*/
	/*   %102 = tail call fastcc i64 @roundAndPackFloat64(i32 %6, i32 %zExp.1.i.i, i64 %zSig.0.i12.i) #1*/
	if ((cur_state == LEGUP_function_call_33)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = roundAndPackFloat64_memory_controller_address_a;
	end
	/* main: %101*/
	/*   %102 = tail call fastcc i64 @roundAndPackFloat64(i32 %6, i32 %zExp.1.i.i, i64 %zSig.0.i12.i) #1*/
	if ((cur_state == LEGUP_function_call_33)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = roundAndPackFloat64_memory_controller_address_a;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %214 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i.i, i32 %211, i64 %213) #1*/
	if ((cur_state == LEGUP_function_call_75)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = roundAndPackFloat64_memory_controller_address_a;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %214 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i.i, i32 %211, i64 %213) #1*/
	if ((cur_state == LEGUP_function_call_75)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = roundAndPackFloat64_memory_controller_address_a;
	end
	/* main: %1*/
	/*   %3 = load i64* %scevgep3, align 8, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_1)) begin
		memory_controller_address_a = main_1_scevgep3;
	end
	/* main: %117*/
	/*   %118 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__117_41)) begin
		memory_controller_address_a = `TAG_g_float_exception_flags_a;
	end
	/* main: %117*/
	/*   store i32 %119, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__117_43)) begin
		memory_controller_address_a = `TAG_g_float_exception_flags_a;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %207 = load i32* %206, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_72)) begin
		memory_controller_address_a = main_normalizeRoundAndPackFloat64exitii_206;
	end
	/* main: %float64_add.exit*/
	/*   %215 = load i64* %scevgep, align 8, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_float64_addexit_77)) begin
		memory_controller_address_a = main_1_scevgep_reg;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	/* main: %101*/
	/*   %102 = tail call fastcc i64 @roundAndPackFloat64(i32 %6, i32 %zExp.1.i.i, i64 %zSig.0.i12.i) #1*/
	if ((cur_state == LEGUP_function_call_33)) begin
		memory_controller_write_enable_a = roundAndPackFloat64_memory_controller_write_enable_a;
	end
	/* main: %101*/
	/*   %102 = tail call fastcc i64 @roundAndPackFloat64(i32 %6, i32 %zExp.1.i.i, i64 %zSig.0.i12.i) #1*/
	if ((cur_state == LEGUP_function_call_33)) begin
		memory_controller_write_enable_a = roundAndPackFloat64_memory_controller_write_enable_a;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %214 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i.i, i32 %211, i64 %213) #1*/
	if ((cur_state == LEGUP_function_call_75)) begin
		memory_controller_write_enable_a = roundAndPackFloat64_memory_controller_write_enable_a;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %214 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i.i, i32 %211, i64 %213) #1*/
	if ((cur_state == LEGUP_function_call_75)) begin
		memory_controller_write_enable_a = roundAndPackFloat64_memory_controller_write_enable_a;
	end
	/* main: %1*/
	/*   %3 = load i64* %scevgep3, align 8, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_1)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %117*/
	/*   %118 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__117_41)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %117*/
	/*   store i32 %119, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__117_43)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %207 = load i32* %206, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_72)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %float64_add.exit*/
	/*   %215 = load i64* %scevgep, align 8, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_float64_addexit_77)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	/* main: %101*/
	/*   %102 = tail call fastcc i64 @roundAndPackFloat64(i32 %6, i32 %zExp.1.i.i, i64 %zSig.0.i12.i) #1*/
	if ((cur_state == LEGUP_function_call_33)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = roundAndPackFloat64_memory_controller_in_a;
	end
	/* main: %101*/
	/*   %102 = tail call fastcc i64 @roundAndPackFloat64(i32 %6, i32 %zExp.1.i.i, i64 %zSig.0.i12.i) #1*/
	if ((cur_state == LEGUP_function_call_33)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = roundAndPackFloat64_memory_controller_in_a;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %214 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i.i, i32 %211, i64 %213) #1*/
	if ((cur_state == LEGUP_function_call_75)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = roundAndPackFloat64_memory_controller_in_a;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %214 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i.i, i32 %211, i64 %213) #1*/
	if ((cur_state == LEGUP_function_call_75)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = roundAndPackFloat64_memory_controller_in_a;
	end
	/* main: %117*/
	/*   store i32 %119, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__117_43)) begin
		memory_controller_in_a = main_117_119;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_function_call_33)) begin
		memory_controller_size_a[1:0] = roundAndPackFloat64_memory_controller_size_a;
	end
	/* main: %101*/
	/*   %102 = tail call fastcc i64 @roundAndPackFloat64(i32 %6, i32 %zExp.1.i.i, i64 %zSig.0.i12.i) #1*/
	if ((cur_state == LEGUP_function_call_33)) begin
		memory_controller_size_a[1:0] = roundAndPackFloat64_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_75)) begin
		memory_controller_size_a[1:0] = roundAndPackFloat64_memory_controller_size_a;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %214 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i.i, i32 %211, i64 %213) #1*/
	if ((cur_state == LEGUP_function_call_75)) begin
		memory_controller_size_a[1:0] = roundAndPackFloat64_memory_controller_size_a;
	end
	/* main: %1*/
	/*   %3 = load i64* %scevgep3, align 8, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_1)) begin
		memory_controller_size_a = 2'd3;
	end
	/* main: %117*/
	/*   %118 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__117_41)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %117*/
	/*   store i32 %119, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__117_43)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %207 = load i32* %206, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_72)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %float64_add.exit*/
	/*   %215 = load i64* %scevgep, align 8, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_float64_addexit_77)) begin
		memory_controller_size_a = 2'd3;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	/* main: %101*/
	/*   %102 = tail call fastcc i64 @roundAndPackFloat64(i32 %6, i32 %zExp.1.i.i, i64 %zSig.0.i12.i) #1*/
	if ((cur_state == LEGUP_function_call_33)) begin
		memory_controller_enable_b = roundAndPackFloat64_memory_controller_enable_b;
	end
	/* main: %101*/
	/*   %102 = tail call fastcc i64 @roundAndPackFloat64(i32 %6, i32 %zExp.1.i.i, i64 %zSig.0.i12.i) #1*/
	if ((cur_state == LEGUP_function_call_33)) begin
		memory_controller_enable_b = roundAndPackFloat64_memory_controller_enable_b;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %214 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i.i, i32 %211, i64 %213) #1*/
	if ((cur_state == LEGUP_function_call_75)) begin
		memory_controller_enable_b = roundAndPackFloat64_memory_controller_enable_b;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %214 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i.i, i32 %211, i64 %213) #1*/
	if ((cur_state == LEGUP_function_call_75)) begin
		memory_controller_enable_b = roundAndPackFloat64_memory_controller_enable_b;
	end
	/* main: %1*/
	/*   %4 = load i64* %scevgep2, align 8, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_1)) begin
		memory_controller_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	/* main: %101*/
	/*   %102 = tail call fastcc i64 @roundAndPackFloat64(i32 %6, i32 %zExp.1.i.i, i64 %zSig.0.i12.i) #1*/
	if ((cur_state == LEGUP_function_call_33)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = roundAndPackFloat64_memory_controller_address_b;
	end
	/* main: %101*/
	/*   %102 = tail call fastcc i64 @roundAndPackFloat64(i32 %6, i32 %zExp.1.i.i, i64 %zSig.0.i12.i) #1*/
	if ((cur_state == LEGUP_function_call_33)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = roundAndPackFloat64_memory_controller_address_b;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %214 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i.i, i32 %211, i64 %213) #1*/
	if ((cur_state == LEGUP_function_call_75)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = roundAndPackFloat64_memory_controller_address_b;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %214 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i.i, i32 %211, i64 %213) #1*/
	if ((cur_state == LEGUP_function_call_75)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = roundAndPackFloat64_memory_controller_address_b;
	end
	/* main: %1*/
	/*   %4 = load i64* %scevgep2, align 8, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_1)) begin
		memory_controller_address_b = main_1_scevgep2;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	/* main: %101*/
	/*   %102 = tail call fastcc i64 @roundAndPackFloat64(i32 %6, i32 %zExp.1.i.i, i64 %zSig.0.i12.i) #1*/
	if ((cur_state == LEGUP_function_call_33)) begin
		memory_controller_write_enable_b = roundAndPackFloat64_memory_controller_write_enable_b;
	end
	/* main: %101*/
	/*   %102 = tail call fastcc i64 @roundAndPackFloat64(i32 %6, i32 %zExp.1.i.i, i64 %zSig.0.i12.i) #1*/
	if ((cur_state == LEGUP_function_call_33)) begin
		memory_controller_write_enable_b = roundAndPackFloat64_memory_controller_write_enable_b;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %214 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i.i, i32 %211, i64 %213) #1*/
	if ((cur_state == LEGUP_function_call_75)) begin
		memory_controller_write_enable_b = roundAndPackFloat64_memory_controller_write_enable_b;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %214 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i.i, i32 %211, i64 %213) #1*/
	if ((cur_state == LEGUP_function_call_75)) begin
		memory_controller_write_enable_b = roundAndPackFloat64_memory_controller_write_enable_b;
	end
	/* main: %1*/
	/*   %4 = load i64* %scevgep2, align 8, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_1)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	/* main: %101*/
	/*   %102 = tail call fastcc i64 @roundAndPackFloat64(i32 %6, i32 %zExp.1.i.i, i64 %zSig.0.i12.i) #1*/
	if ((cur_state == LEGUP_function_call_33)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = roundAndPackFloat64_memory_controller_in_b;
	end
	/* main: %101*/
	/*   %102 = tail call fastcc i64 @roundAndPackFloat64(i32 %6, i32 %zExp.1.i.i, i64 %zSig.0.i12.i) #1*/
	if ((cur_state == LEGUP_function_call_33)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = roundAndPackFloat64_memory_controller_in_b;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %214 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i.i, i32 %211, i64 %213) #1*/
	if ((cur_state == LEGUP_function_call_75)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = roundAndPackFloat64_memory_controller_in_b;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %214 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i.i, i32 %211, i64 %213) #1*/
	if ((cur_state == LEGUP_function_call_75)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = roundAndPackFloat64_memory_controller_in_b;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_function_call_33)) begin
		memory_controller_size_b[1:0] = roundAndPackFloat64_memory_controller_size_b;
	end
	/* main: %101*/
	/*   %102 = tail call fastcc i64 @roundAndPackFloat64(i32 %6, i32 %zExp.1.i.i, i64 %zSig.0.i12.i) #1*/
	if ((cur_state == LEGUP_function_call_33)) begin
		memory_controller_size_b[1:0] = roundAndPackFloat64_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_75)) begin
		memory_controller_size_b[1:0] = roundAndPackFloat64_memory_controller_size_b;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %214 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i.i, i32 %211, i64 %213) #1*/
	if ((cur_state == LEGUP_function_call_75)) begin
		memory_controller_size_b[1:0] = roundAndPackFloat64_memory_controller_size_b;
	end
	/* main: %1*/
	/*   %4 = load i64* %scevgep2, align 8, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_1)) begin
		memory_controller_size_b = 2'd3;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
		/* synthesis translate_on */
	end
	/* main: %228*/
	/*   ret i32 %218*/
	if ((cur_state == LEGUP_F_main_BB__228_83)) begin
		return_val <= main_float64_addexit_218_reg;
		/* synthesis translate_off */
		if (start == 1'b0 && ^(main_float64_addexit_218_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
		/* synthesis translate_on */
	end
end

endmodule 
module ram_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
localparam COL_WIDTH = width_a / width_be_a;
localparam NUM_COL = width_be_a;
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

reg [width_a-1:0] ram[numwords_a-1:0];

initial
    if (init_file != "UNUSED.mif")
        $readmemh(init_file, ram);

integer i;
always @ (posedge clk) begin
	if (clken) begin // Port A
		for (i=0;i<NUM_COL;i=i+1) begin
			if (byteena_a[i] && wren_a) begin
				ram[address_a][i*COL_WIDTH +: COL_WIDTH] <= data_a[i*COL_WIDTH +: COL_WIDTH];
			end
		end
		q_a_wire <= ram[address_a];
	end
end

always @ (posedge clk) begin
	if (clken) begin // Port B
		for (i=0;i<NUM_COL;i=i+1) begin
			if (byteena_b[i] && wren_b) begin
				ram[address_b][i*COL_WIDTH +: COL_WIDTH] <= data_b[i*COL_WIDTH +: COL_WIDTH];
			end
		end
		q_b_wire <= ram[address_b];
	end
end




integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
module rom_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

reg [width_a-1:0] ram[numwords_a-1:0];

initial
    if (init_file != "UNUSED.mif")
        $readmemh(init_file, ram);

always @ (posedge clk)
if (clken)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule